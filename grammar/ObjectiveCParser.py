# Generated from ObjectiveCParser.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00e4")
        buf.write("\u06b2\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\3\2\7\2\u0128\n\2\f\2\16\2\u012b")
        buf.write("\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\5\3\u013c\n\3\3\4\3\4\3\4\3\4\3\5\3\5\3\5")
        buf.write("\3\6\5\6\u0146\n\6\3\6\3\6\3\6\3\6\5\6\u014c\n\6\3\6\3")
        buf.write("\6\3\6\3\6\5\6\u0152\n\6\3\6\5\6\u0155\n\6\3\6\5\6\u0158")
        buf.write("\n\6\3\6\3\6\3\7\3\7\3\7\3\7\5\7\u0160\n\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\5\7\u0167\n\7\3\7\5\7\u016a\n\7\3\7\5\7\u016d")
        buf.write("\n\7\3\7\3\7\3\b\3\b\3\b\3\b\5\b\u0175\n\b\3\b\5\b\u0178")
        buf.write("\n\b\3\b\5\b\u017b\n\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\5\t\u0185\n\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u018f")
        buf.write("\n\n\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0197\n\13\3\13")
        buf.write("\7\13\u019a\n\13\f\13\16\13\u019d\13\13\3\13\3\13\3\f")
        buf.write("\3\f\7\f\u01a3\n\f\f\f\16\f\u01a6\13\f\3\f\6\f\u01a9\n")
        buf.write("\f\r\f\16\f\u01aa\5\f\u01ad\n\f\3\r\3\r\3\r\3\r\3\16\3")
        buf.write("\16\3\16\3\16\7\16\u01b7\n\16\f\16\16\16\u01ba\13\16\3")
        buf.write("\16\3\16\3\17\3\17\3\17\7\17\u01c1\n\17\f\17\16\17\u01c4")
        buf.write("\13\17\3\20\3\20\3\20\3\20\3\20\5\20\u01cb\n\20\3\20\5")
        buf.write("\20\u01ce\n\20\3\20\5\20\u01d1\n\20\3\20\3\20\3\21\3\21")
        buf.write("\3\21\7\21\u01d8\n\21\f\21\16\21\u01db\13\21\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u01f1\n\22\3")
        buf.write("\23\3\23\3\23\3\23\3\23\5\23\u01f8\n\23\3\23\5\23\u01fb")
        buf.write("\n\23\3\24\3\24\7\24\u01ff\n\24\f\24\16\24\u0202\13\24")
        buf.write("\3\24\3\24\3\25\3\25\7\25\u0208\n\25\f\25\16\25\u020b")
        buf.write("\13\25\3\25\6\25\u020e\n\25\r\25\16\25\u020f\5\25\u0212")
        buf.write("\n\25\3\26\3\26\3\27\3\27\3\27\3\27\3\27\6\27\u021b\n")
        buf.write("\27\r\27\16\27\u021c\3\30\3\30\3\30\3\31\3\31\3\31\3\32")
        buf.write("\5\32\u0226\n\32\3\32\3\32\5\32\u022a\n\32\3\32\3\32\3")
        buf.write("\33\3\33\3\33\3\33\3\33\6\33\u0233\n\33\r\33\16\33\u0234")
        buf.write("\3\34\3\34\3\34\3\35\3\35\3\35\3\36\5\36\u023e\n\36\3")
        buf.write("\36\3\36\5\36\u0242\n\36\3\36\5\36\u0245\n\36\3\36\3\36")
        buf.write("\3\37\3\37\6\37\u024b\n\37\r\37\16\37\u024c\3\37\3\37")
        buf.write("\5\37\u0251\n\37\5\37\u0253\n\37\3 \5 \u0256\n \3 \3 ")
        buf.write("\7 \u025a\n \f \16 \u025d\13 \3 \5 \u0260\n \3 \3 \3!")
        buf.write("\3!\5!\u0266\n!\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\5#\u0274\n#\3$\3$\3$\7$\u0279\n$\f$\16$\u027c\13$\3")
        buf.write("%\3%\3%\5%\u0281\n%\3&\5&\u0284\n&\3&\3&\5&\u0288\n&\3")
        buf.write("&\3&\3&\3&\5&\u028e\n&\3&\3&\5&\u0292\n&\3\'\3\'\3\'\3")
        buf.write("\'\7\'\u0298\n\'\f\'\16\'\u029b\13\'\5\'\u029d\n\'\3\'")
        buf.write("\3\'\3(\7(\u02a2\n(\f(\16(\u02a5\13(\3(\3(\3)\3)\3)\3")
        buf.write(")\3)\7)\u02ae\n)\f)\16)\u02b1\13)\3)\5)\u02b4\n)\5)\u02b6")
        buf.write("\n)\3)\3)\3*\3*\3*\3*\3+\3+\3+\3+\5+\u02c2\n+\5+\u02c4")
        buf.write("\n+\3+\3+\3,\3,\3,\3,\3,\3,\3,\3,\5,\u02d0\n,\5,\u02d2")
        buf.write("\n,\3-\3-\3-\5-\u02d7\n-\3-\3-\7-\u02db\n-\f-\16-\u02de")
        buf.write("\13-\5-\u02e0\n-\3-\3-\3.\3.\5.\u02e6\n.\3/\3/\5/\u02ea")
        buf.write("\n/\3/\5/\u02ed\n/\3/\5/\u02f0\n/\3/\3/\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\61\3\61\5\61\u02fb\n\61\3\62\3\62\6\62\u02ff")
        buf.write("\n\62\r\62\16\62\u0300\5\62\u0303\n\62\3\63\5\63\u0306")
        buf.write("\n\63\3\63\3\63\3\63\3\63\7\63\u030c\n\63\f\63\16\63\u030f")
        buf.write("\13\63\3\64\3\64\5\64\u0313\n\64\3\64\3\64\3\64\3\64\5")
        buf.write("\64\u0319\n\64\3\65\3\65\3\65\3\65\3\65\3\66\3\66\5\66")
        buf.write("\u0322\n\66\3\66\6\66\u0325\n\66\r\66\16\66\u0326\5\66")
        buf.write("\u0329\n\66\3\67\3\67\3\67\3\67\3\67\38\38\38\38\38\3")
        buf.write("9\39\39\3:\3:\3:\3:\3:\3:\3:\5:\u033f\n:\3;\3;\3;\7;\u0344")
        buf.write("\n;\f;\16;\u0347\13;\3;\3;\5;\u034b\n;\3<\3<\3<\3<\3<")
        buf.write("\3<\3=\3=\3=\3=\3=\3=\3>\3>\3>\3?\3?\3?\3@\3@\3@\3A\5")
        buf.write("A\u0363\nA\3A\3A\3A\5A\u0368\nA\3A\3A\3A\5A\u036d\nA\3")
        buf.write("B\3B\5B\u0371\nB\3C\3C\5C\u0375\nC\3D\3D\5D\u0379\nD\3")
        buf.write("D\3D\3E\3E\3E\7E\u0380\nE\fE\16E\u0383\13E\3F\3F\3F\3")
        buf.write("F\5F\u0389\nF\3G\3G\3G\3G\3G\5G\u0390\nG\3H\3H\3H\3H\5")
        buf.write("H\u0396\nH\3I\5I\u0399\nI\3I\3I\5I\u039d\nI\3I\3I\3I\3")
        buf.write("I\3I\3J\5J\u03a5\nJ\3J\5J\u03a8\nJ\3J\3J\5J\u03ac\nJ\3")
        buf.write("J\3J\3K\3K\3K\3K\5K\u03b4\nK\3K\3K\3L\5L\u03b9\nL\3L\3")
        buf.write("L\3L\3L\3L\5L\u03c0\nL\3L\3L\3M\3M\3M\7M\u03c7\nM\fM\16")
        buf.write("M\u03ca\13M\3N\5N\u03cd\nN\3N\3N\3O\3O\3O\3O\3O\3O\3O")
        buf.write("\3O\6O\u03d9\nO\rO\16O\u03da\3P\3P\3P\3P\3P\3P\7P\u03e3")
        buf.write("\nP\fP\16P\u03e6\13P\3P\3P\3P\3Q\3Q\3Q\7Q\u03ee\nQ\fQ")
        buf.write("\16Q\u03f1\13Q\3R\3R\3R\5R\u03f6\nR\3S\3S\3S\5S\u03fb")
        buf.write("\nS\3S\3S\6S\u03ff\nS\rS\16S\u0400\3S\3S\5S\u0405\nS\3")
        buf.write("T\3T\3T\5T\u040a\nT\3T\3T\3U\3U\3U\3U\3U\3U\6U\u0414\n")
        buf.write("U\rU\16U\u0415\3V\3V\3V\3V\3V\3V\5V\u041e\nV\3W\3W\3X")
        buf.write("\3X\3Y\3Y\3Z\3Z\3[\3[\3[\3[\5[\u042c\n[\3\\\3\\\3]\3]")
        buf.write("\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\5]\u043f\n]\5")
        buf.write("]\u0441\n]\3^\3^\3^\3^\3^\3_\3_\3_\7_\u044b\n_\f_\16_")
        buf.write("\u044e\13_\3`\3`\5`\u0452\n`\3`\3`\5`\u0456\n`\3a\3a\5")
        buf.write("a\u045a\na\3a\3a\5a\u045e\na\3a\3a\3a\3a\3a\5a\u0465\n")
        buf.write("a\3a\3a\3a\3a\5a\u046b\na\3a\3a\3a\3a\3a\3a\3a\3a\3a\3")
        buf.write("a\5a\u0477\na\3b\3b\3b\7b\u047c\nb\fb\16b\u047f\13b\3")
        buf.write("b\5b\u0482\nb\3c\3c\3c\5c\u0487\nc\3d\3d\5d\u048b\nd\3")
        buf.write("e\3e\3e\3e\3e\5e\u0492\ne\3e\7e\u0495\ne\fe\16e\u0498")
        buf.write("\13e\3e\3e\3e\5e\u049d\ne\3e\5e\u04a0\ne\3e\3e\5e\u04a4")
        buf.write("\ne\3f\3f\5f\u04a8\nf\3f\3f\3g\3g\3g\5g\u04af\ng\3h\3")
        buf.write("h\5h\u04b3\nh\3h\5h\u04b6\nh\3i\3i\3i\3i\3i\7i\u04bd\n")
        buf.write("i\fi\16i\u04c0\13i\3i\3i\5i\u04c4\ni\3j\3j\3j\5j\u04c9")
        buf.write("\nj\5j\u04cb\nj\3j\3j\3k\3k\3k\3k\3k\3k\7k\u04d5\nk\f")
        buf.write("k\16k\u04d8\13k\3k\5k\u04db\nk\5k\u04dd\nk\3k\3k\3l\3")
        buf.write("l\3l\7l\u04e4\nl\fl\16l\u04e7\13l\3l\5l\u04ea\nl\3m\3")
        buf.write("m\5m\u04ee\nm\3m\5m\u04f1\nm\3n\3n\5n\u04f5\nn\3n\3n\5")
        buf.write("n\u04f9\nn\3n\3n\6n\u04fd\nn\rn\16n\u04fe\3n\3n\5n\u0503")
        buf.write("\nn\3n\6n\u0506\nn\rn\16n\u0507\5n\u050a\nn\3o\3o\5o\u050e")
        buf.write("\no\3o\3o\3o\5o\u0513\no\3o\5o\u0516\no\3p\3p\3p\7p\u051b")
        buf.write("\np\fp\16p\u051e\13p\3q\3q\3q\3q\5q\u0524\nq\3r\5r\u0527")
        buf.write("\nr\3r\3r\3s\3s\5s\u052d\ns\3s\3s\5s\u0531\ns\3s\3s\5")
        buf.write("s\u0535\ns\3s\3s\5s\u0539\ns\3s\3s\5s\u053d\ns\3s\3s\5")
        buf.write("s\u0541\ns\3s\3s\5s\u0545\ns\3s\3s\5s\u0549\ns\3s\3s\5")
        buf.write("s\u054d\ns\3s\3s\5s\u0551\ns\3s\5s\u0554\ns\3t\3t\3t\3")
        buf.write("t\3u\3u\3u\5u\u055d\nu\3v\3v\3v\7v\u0562\nv\fv\16v\u0565")
        buf.write("\13v\3v\3v\3w\3w\3w\3w\3w\3w\3w\5w\u0570\nw\3w\5w\u0573")
        buf.write("\nw\3x\3x\3x\3x\3x\3x\3y\3y\7y\u057d\ny\fy\16y\u0580\13")
        buf.write("y\3y\3y\3z\6z\u0585\nz\rz\16z\u0586\3z\6z\u058a\nz\rz")
        buf.write("\16z\u058b\3{\3{\3{\3{\3{\3{\5{\u0594\n{\3{\3{\3{\3{\5")
        buf.write("{\u059a\n{\3|\3|\3|\3|\5|\u05a0\n|\3}\3}\3}\3}\3}\3}\3")
        buf.write("~\3~\3~\3~\3~\3~\3~\3~\3\177\3\177\3\177\5\177\u05b3\n")
        buf.write("\177\3\177\3\177\5\177\u05b7\n\177\3\177\3\177\5\177\u05bb")
        buf.write("\n\177\3\177\3\177\3\177\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\5\u0080\u05c4\n\u0080\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\5\u0081\u05cb\n\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082")
        buf.write("\u05d6\n\u0082\5\u0082\u05d8\n\u0082\3\u0083\3\u0083\3")
        buf.write("\u0083\7\u0083\u05dd\n\u0083\f\u0083\16\u0083\u05e0\13")
        buf.write("\u0083\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u05ec\n\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u05f9\n\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0614\n\u0084")
        buf.write("\3\u0084\3\u0084\7\u0084\u0618\n\u0084\f\u0084\16\u0084")
        buf.write("\u061b\13\u0084\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086")
        buf.write("\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0626\n\u0086")
        buf.write("\5\u0086\u0628\n\u0086\3\u0087\3\u0087\3\u0087\5\u0087")
        buf.write("\u062d\n\u0087\3\u0088\3\u0088\5\u0088\u0631\n\u0088\3")
        buf.write("\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\5\u0089\u063a\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\5\u0089\u0641\n\u0089\3\u008a\3\u008a\3\u008b")
        buf.write("\3\u008b\3\u008b\7\u008b\u0648\n\u008b\f\u008b\16\u008b")
        buf.write("\u064b\13\u008b\3\u008b\3\u008b\3\u008b\3\u008b\7\u008b")
        buf.write("\u0651\n\u008b\f\u008b\16\u008b\u0654\13\u008b\7\u008b")
        buf.write("\u0656\n\u008b\f\u008b\16\u008b\u0659\13\u008b\3\u008c")
        buf.write("\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u0661")
        buf.write("\n\u008c\3\u008c\3\u008c\3\u008c\3\u008c\6\u008c\u0667")
        buf.write("\n\u008c\r\u008c\16\u008c\u0668\3\u008c\3\u008c\5\u008c")
        buf.write("\u066d\n\u008c\3\u008d\3\u008d\3\u008d\7\u008d\u0672\n")
        buf.write("\u008d\f\u008d\16\u008d\u0675\13\u008d\3\u008e\3\u008e")
        buf.write("\5\u008e\u0679\n\u008e\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u068a\n\u008f")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0690\n\u0090")
        buf.write("\3\u0090\3\u0090\5\u0090\u0694\n\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090")
        buf.write("\u069e\n\u0090\3\u0091\3\u0091\7\u0091\u06a2\n\u0091\f")
        buf.write("\u0091\16\u0091\u06a5\13\u0091\3\u0091\6\u0091\u06a8\n")
        buf.write("\u0091\r\u0091\16\u0091\u06a9\3\u0092\3\u0092\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\2\4\u0106\u0114\u0094")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write("\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write("\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write("\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112")
        buf.write("\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124")
        buf.write("\2\27\4\2IINN\3\2]^\5\2GGJJLM\4\2\35\35  \6\2XXaaccee")
        buf.write("\3\2fi\6\2\3\3\16\16\26\26\34\34\6\2\23\23Y\\``jj\5\2")
        buf.write(",-\60\61\65\66\3\2kl\4\2\u009d\u009e\u00a2\u00a2\3\2\u009b")
        buf.write("\u009c\4\2\u008d\u008e\u0094\u0095\4\2\u0093\u0093\u0096")
        buf.write("\u0096\4\2\u008c\u008c\u00a3\u00ac\3\2\u0099\u009a\5\2")
        buf.write("\u008f\u0090\u009b\u009d\u009f\u009f\3\2\u0089\u008a\3")
        buf.write("\2\u0082\u0082\4\2\u00bd\u00bd\u00bf\u00bf\n\2*\61\65")
        buf.write(":TVXY[`ddfy\u0080\u0080\2\u076a\2\u0129\3\2\2\2\4\u013b")
        buf.write("\3\2\2\2\6\u013d\3\2\2\2\b\u0141\3\2\2\2\n\u0145\3\2\2")
        buf.write("\2\f\u015b\3\2\2\2\16\u0170\3\2\2\2\20\u017e\3\2\2\2\22")
        buf.write("\u0188\3\2\2\2\24\u0190\3\2\2\2\26\u01ac\3\2\2\2\30\u01ae")
        buf.write("\3\2\2\2\32\u01b2\3\2\2\2\34\u01bd\3\2\2\2\36\u01c5\3")
        buf.write("\2\2\2 \u01d4\3\2\2\2\"\u01f0\3\2\2\2$\u01fa\3\2\2\2&")
        buf.write("\u01fc\3\2\2\2(\u0211\3\2\2\2*\u0213\3\2\2\2,\u021a\3")
        buf.write("\2\2\2.\u021e\3\2\2\2\60\u0221\3\2\2\2\62\u0225\3\2\2")
        buf.write("\2\64\u0232\3\2\2\2\66\u0236\3\2\2\28\u0239\3\2\2\2:\u023d")
        buf.write("\3\2\2\2<\u0252\3\2\2\2>\u0255\3\2\2\2@\u0265\3\2\2\2")
        buf.write("B\u0267\3\2\2\2D\u0273\3\2\2\2F\u0275\3\2\2\2H\u027d\3")
        buf.write("\2\2\2J\u0283\3\2\2\2L\u0293\3\2\2\2N\u02a3\3\2\2\2P\u02a8")
        buf.write("\3\2\2\2R\u02b9\3\2\2\2T\u02bd\3\2\2\2V\u02d1\3\2\2\2")
        buf.write("X\u02d3\3\2\2\2Z\u02e5\3\2\2\2\\\u02e7\3\2\2\2^\u02f3")
        buf.write("\3\2\2\2`\u02fa\3\2\2\2b\u0302\3\2\2\2d\u0305\3\2\2\2")
        buf.write("f\u0310\3\2\2\2h\u031a\3\2\2\2j\u0328\3\2\2\2l\u032a\3")
        buf.write("\2\2\2n\u032f\3\2\2\2p\u0334\3\2\2\2r\u033e\3\2\2\2t\u0340")
        buf.write("\3\2\2\2v\u034c\3\2\2\2x\u0352\3\2\2\2z\u0358\3\2\2\2")
        buf.write("|\u035b\3\2\2\2~\u035e\3\2\2\2\u0080\u0362\3\2\2\2\u0082")
        buf.write("\u036e\3\2\2\2\u0084\u0374\3\2\2\2\u0086\u0376\3\2\2\2")
        buf.write("\u0088\u037c\3\2\2\2\u008a\u0388\3\2\2\2\u008c\u038a\3")
        buf.write("\2\2\2\u008e\u0395\3\2\2\2\u0090\u0398\3\2\2\2\u0092\u03a4")
        buf.write("\3\2\2\2\u0094\u03b3\3\2\2\2\u0096\u03b8\3\2\2\2\u0098")
        buf.write("\u03c3\3\2\2\2\u009a\u03cc\3\2\2\2\u009c\u03d8\3\2\2\2")
        buf.write("\u009e\u03dc\3\2\2\2\u00a0\u03ea\3\2\2\2\u00a2\u03f2\3")
        buf.write("\2\2\2\u00a4\u03f7\3\2\2\2\u00a6\u0406\3\2\2\2\u00a8\u0413")
        buf.write("\3\2\2\2\u00aa\u041d\3\2\2\2\u00ac\u041f\3\2\2\2\u00ae")
        buf.write("\u0421\3\2\2\2\u00b0\u0423\3\2\2\2\u00b2\u0425\3\2\2\2")
        buf.write("\u00b4\u042b\3\2\2\2\u00b6\u042d\3\2\2\2\u00b8\u0440\3")
        buf.write("\2\2\2\u00ba\u0442\3\2\2\2\u00bc\u0447\3\2\2\2\u00be\u0455")
        buf.write("\3\2\2\2\u00c0\u0476\3\2\2\2\u00c2\u0478\3\2\2\2\u00c4")
        buf.write("\u0483\3\2\2\2\u00c6\u048a\3\2\2\2\u00c8\u04a3\3\2\2\2")
        buf.write("\u00ca\u04a5\3\2\2\2\u00cc\u04ab\3\2\2\2\u00ce\u04b0\3")
        buf.write("\2\2\2\u00d0\u04b7\3\2\2\2\u00d2\u04c5\3\2\2\2\u00d4\u04ce")
        buf.write("\3\2\2\2\u00d6\u04e0\3\2\2\2\u00d8\u04f0\3\2\2\2\u00da")
        buf.write("\u0509\3\2\2\2\u00dc\u0515\3\2\2\2\u00de\u0517\3\2\2\2")
        buf.write("\u00e0\u0523\3\2\2\2\u00e2\u0526\3\2\2\2\u00e4\u0553\3")
        buf.write("\2\2\2\u00e6\u0555\3\2\2\2\u00e8\u0559\3\2\2\2\u00ea\u055e")
        buf.write("\3\2\2\2\u00ec\u0572\3\2\2\2\u00ee\u0574\3\2\2\2\u00f0")
        buf.write("\u057a\3\2\2\2\u00f2\u0584\3\2\2\2\u00f4\u0599\3\2\2\2")
        buf.write("\u00f6\u059f\3\2\2\2\u00f8\u05a1\3\2\2\2\u00fa\u05a7\3")
        buf.write("\2\2\2\u00fc\u05af\3\2\2\2\u00fe\u05c3\3\2\2\2\u0100\u05c5")
        buf.write("\3\2\2\2\u0102\u05d7\3\2\2\2\u0104\u05d9\3\2\2\2\u0106")
        buf.write("\u05eb\3\2\2\2\u0108\u061c\3\2\2\2\u010a\u0627\3\2\2\2")
        buf.write("\u010c\u062c\3\2\2\2\u010e\u0630\3\2\2\2\u0110\u0640\3")
        buf.write("\2\2\2\u0112\u0642\3\2\2\2\u0114\u0644\3\2\2\2\u0116\u066c")
        buf.write("\3\2\2\2\u0118\u066e\3\2\2\2\u011a\u0678\3\2\2\2\u011c")
        buf.write("\u0689\3\2\2\2\u011e\u069d\3\2\2\2\u0120\u06a7\3\2\2\2")
        buf.write("\u0122\u06ab\3\2\2\2\u0124\u06ad\3\2\2\2\u0126\u0128\5")
        buf.write("\4\3\2\u0127\u0126\3\2\2\2\u0128\u012b\3\2\2\2\u0129\u0127")
        buf.write("\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u012c\3\2\2\2\u012b")
        buf.write("\u0129\3\2\2\2\u012c\u012d\7\2\2\3\u012d\3\3\2\2\2\u012e")
        buf.write("\u013c\5\6\4\2\u012f\u013c\5\b\5\2\u0130\u013c\5|?\2\u0131")
        buf.write("\u013c\5\u008eH\2\u0132\u013c\5\n\6\2\u0133\u013c\5\16")
        buf.write("\b\2\u0134\u013c\5\f\7\2\u0135\u013c\5\20\t\2\u0136\u013c")
        buf.write("\5\24\13\2\u0137\u013c\5\30\r\2\u0138\u013c\5\32\16\2")
        buf.write("\u0139\u013c\5~@\2\u013a\u013c\5\u00e4s\2\u013b\u012e")
        buf.write("\3\2\2\2\u013b\u012f\3\2\2\2\u013b\u0130\3\2\2\2\u013b")
        buf.write("\u0131\3\2\2\2\u013b\u0132\3\2\2\2\u013b\u0133\3\2\2\2")
        buf.write("\u013b\u0134\3\2\2\2\u013b\u0135\3\2\2\2\u013b\u0136\3")
        buf.write("\2\2\2\u013b\u0137\3\2\2\2\u013b\u0138\3\2\2\2\u013b\u0139")
        buf.write("\3\2\2\2\u013b\u013a\3\2\2\2\u013c\5\3\2\2\2\u013d\u013e")
        buf.write("\7E\2\2\u013e\u013f\5\u0122\u0092\2\u013f\u0140\7\u0087")
        buf.write("\2\2\u0140\7\3\2\2\2\u0141\u0142\7F\2\2\u0142\u0143\5")
        buf.write("\u0124\u0093\2\u0143\t\3\2\2\2\u0144\u0146\7y\2\2\u0145")
        buf.write("\u0144\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0147\3\2\2\2")
        buf.write("\u0147\u0148\7D\2\2\u0148\u014b\5\22\n\2\u0149\u014a\7")
        buf.write("\u0092\2\2\u014a\u014c\5\u0122\u0092\2\u014b\u0149\3\2")
        buf.write("\2\2\u014b\u014c\3\2\2\2\u014c\u0151\3\2\2\2\u014d\u014e")
        buf.write("\7\u008e\2\2\u014e\u014f\5\34\17\2\u014f\u0150\7\u008d")
        buf.write("\2\2\u0150\u0152\3\2\2\2\u0151\u014d\3\2\2\2\u0151\u0152")
        buf.write("\3\2\2\2\u0152\u0154\3\2\2\2\u0153\u0155\5&\24\2\u0154")
        buf.write("\u0153\3\2\2\2\u0154\u0155\3\2\2\2\u0155\u0157\3\2\2\2")
        buf.write("\u0156\u0158\5,\27\2\u0157\u0156\3\2\2\2\u0157\u0158\3")
        buf.write("\2\2\2\u0158\u0159\3\2\2\2\u0159\u015a\7A\2\2\u015a\13")
        buf.write("\3\2\2\2\u015b\u015c\7D\2\2\u015c\u015d\5\22\n\2\u015d")
        buf.write("\u015f\7\u0081\2\2\u015e\u0160\5\u0122\u0092\2\u015f\u015e")
        buf.write("\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u0161\3\2\2\2\u0161")
        buf.write("\u0166\7\u0082\2\2\u0162\u0163\7\u008e\2\2\u0163\u0164")
        buf.write("\5\34\17\2\u0164\u0165\7\u008d\2\2\u0165\u0167\3\2\2\2")
        buf.write("\u0166\u0162\3\2\2\2\u0166\u0167\3\2\2\2\u0167\u0169\3")
        buf.write("\2\2\2\u0168\u016a\5&\24\2\u0169\u0168\3\2\2\2\u0169\u016a")
        buf.write("\3\2\2\2\u016a\u016c\3\2\2\2\u016b\u016d\5,\27\2\u016c")
        buf.write("\u016b\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u016e\3\2\2\2")
        buf.write("\u016e\u016f\7A\2\2\u016f\r\3\2\2\2\u0170\u0171\7C\2\2")
        buf.write("\u0171\u0174\5\22\n\2\u0172\u0173\7\u0092\2\2\u0173\u0175")
        buf.write("\5\u0122\u0092\2\u0174\u0172\3\2\2\2\u0174\u0175\3\2\2")
        buf.write("\2\u0175\u0177\3\2\2\2\u0176\u0178\5&\24\2\u0177\u0176")
        buf.write("\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u017a\3\2\2\2\u0179")
        buf.write("\u017b\5\64\33\2\u017a\u0179\3\2\2\2\u017a\u017b\3\2\2")
        buf.write("\2\u017b\u017c\3\2\2\2\u017c\u017d\7A\2\2\u017d\17\3\2")
        buf.write("\2\2\u017e\u017f\7C\2\2\u017f\u0180\5\22\n\2\u0180\u0181")
        buf.write("\7\u0081\2\2\u0181\u0182\5\u0122\u0092\2\u0182\u0184\7")
        buf.write("\u0082\2\2\u0183\u0185\5\64\33\2\u0184\u0183\3\2\2\2\u0184")
        buf.write("\u0185\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u0187\7A\2\2")
        buf.write("\u0187\21\3\2\2\2\u0188\u018e\5\u0122\u0092\2\u0189\u018a")
        buf.write("\7\u008e\2\2\u018a\u018b\5\34\17\2\u018b\u018c\7\u008d")
        buf.write("\2\2\u018c\u018f\3\2\2\2\u018d\u018f\5L\'\2\u018e\u0189")
        buf.write("\3\2\2\2\u018e\u018d\3\2\2\2\u018e\u018f\3\2\2\2\u018f")
        buf.write("\23\3\2\2\2\u0190\u0191\7H\2\2\u0191\u0196\5$\23\2\u0192")
        buf.write("\u0193\7\u008e\2\2\u0193\u0194\5\34\17\2\u0194\u0195\7")
        buf.write("\u008d\2\2\u0195\u0197\3\2\2\2\u0196\u0192\3\2\2\2\u0196")
        buf.write("\u0197\3\2\2\2\u0197\u019b\3\2\2\2\u0198\u019a\5\26\f")
        buf.write("\2\u0199\u0198\3\2\2\2\u019a\u019d\3\2\2\2\u019b\u0199")
        buf.write("\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u019e\3\2\2\2\u019d")
        buf.write("\u019b\3\2\2\2\u019e\u019f\7A\2\2\u019f\25\3\2\2\2\u01a0")
        buf.write("\u01a4\t\2\2\2\u01a1\u01a3\5,\27\2\u01a2\u01a1\3\2\2\2")
        buf.write("\u01a3\u01a6\3\2\2\2\u01a4\u01a2\3\2\2\2\u01a4\u01a5\3")
        buf.write("\2\2\2\u01a5\u01ad\3\2\2\2\u01a6\u01a4\3\2\2\2\u01a7\u01a9")
        buf.write("\5,\27\2\u01a8\u01a7\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa")
        buf.write("\u01a8\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab\u01ad\3\2\2\2")
        buf.write("\u01ac\u01a0\3\2\2\2\u01ac\u01a8\3\2\2\2\u01ad\27\3\2")
        buf.write("\2\2\u01ae\u01af\7H\2\2\u01af\u01b0\5\34\17\2\u01b0\u01b1")
        buf.write("\7\u0087\2\2\u01b1\31\3\2\2\2\u01b2\u01b3\7>\2\2\u01b3")
        buf.write("\u01b8\5\u0122\u0092\2\u01b4\u01b5\7\u0088\2\2\u01b5\u01b7")
        buf.write("\5\u0122\u0092\2\u01b6\u01b4\3\2\2\2\u01b7\u01ba\3\2\2")
        buf.write("\2\u01b8\u01b6\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9\u01bb")
        buf.write("\3\2\2\2\u01ba\u01b8\3\2\2\2\u01bb\u01bc\7\u0087\2\2\u01bc")
        buf.write("\33\3\2\2\2\u01bd\u01c2\5$\23\2\u01be\u01bf\7\u0088\2")
        buf.write("\2\u01bf\u01c1\5$\23\2\u01c0\u01be\3\2\2\2\u01c1\u01c4")
        buf.write("\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3")
        buf.write("\35\3\2\2\2\u01c4\u01c2\3\2\2\2\u01c5\u01ca\7K\2\2\u01c6")
        buf.write("\u01c7\7\u0081\2\2\u01c7\u01c8\5 \21\2\u01c8\u01c9\7\u0082")
        buf.write("\2\2\u01c9\u01cb\3\2\2\2\u01ca\u01c6\3\2\2\2\u01ca\u01cb")
        buf.write("\3\2\2\2\u01cb\u01cd\3\2\2\2\u01cc\u01ce\5\u00aaV\2\u01cd")
        buf.write("\u01cc\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\u01d0\3\2\2\2")
        buf.write("\u01cf\u01d1\7x\2\2\u01d0\u01cf\3\2\2\2\u01d0\u01d1\3")
        buf.write("\2\2\2\u01d1\u01d2\3\2\2\2\u01d2\u01d3\5\u00a6T\2\u01d3")
        buf.write("\37\3\2\2\2\u01d4\u01d9\5\"\22\2\u01d5\u01d6\7\u0088\2")
        buf.write("\2\u01d6\u01d8\5\"\22\2\u01d7\u01d5\3\2\2\2\u01d8\u01db")
        buf.write("\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2\u01da")
        buf.write("!\3\2\2\2\u01db\u01d9\3\2\2\2\u01dc\u01f1\7T\2\2\u01dd")
        buf.write("\u01f1\7U\2\2\u01de\u01f1\7q\2\2\u01df\u01f1\7t\2\2\u01e0")
        buf.write("\u01f1\7V\2\2\u01e1\u01f1\7m\2\2\u01e2\u01f1\7u\2\2\u01e3")
        buf.write("\u01f1\7n\2\2\u01e4\u01f1\7r\2\2\u01e5\u01f1\7s\2\2\u01e6")
        buf.write("\u01e7\7o\2\2\u01e7\u01e8\7\u008c\2\2\u01e8\u01f1\5\u0122")
        buf.write("\u0092\2\u01e9\u01ea\7p\2\2\u01ea\u01eb\7\u008c\2\2\u01eb")
        buf.write("\u01ec\5\u0122\u0092\2\u01ec\u01ed\7\u0092\2\2\u01ed\u01f1")
        buf.write("\3\2\2\2\u01ee\u01f1\5\u00aeX\2\u01ef\u01f1\5\u0122\u0092")
        buf.write("\2\u01f0\u01dc\3\2\2\2\u01f0\u01dd\3\2\2\2\u01f0\u01de")
        buf.write("\3\2\2\2\u01f0\u01df\3\2\2\2\u01f0\u01e0\3\2\2\2\u01f0")
        buf.write("\u01e1\3\2\2\2\u01f0\u01e2\3\2\2\2\u01f0\u01e3\3\2\2\2")
        buf.write("\u01f0\u01e4\3\2\2\2\u01f0\u01e5\3\2\2\2\u01f0\u01e6\3")
        buf.write("\2\2\2\u01f0\u01e9\3\2\2\2\u01f0\u01ee\3\2\2\2\u01f0\u01ef")
        buf.write("\3\2\2\2\u01f1#\3\2\2\2\u01f2\u01f3\7\u008e\2\2\u01f3")
        buf.write("\u01f4\5\34\17\2\u01f4\u01f5\7\u008d\2\2\u01f5\u01fb\3")
        buf.write("\2\2\2\u01f6\u01f8\t\3\2\2\u01f7\u01f6\3\2\2\2\u01f7\u01f8")
        buf.write("\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9\u01fb\5\u0122\u0092")
        buf.write("\2\u01fa\u01f2\3\2\2\2\u01fa\u01f7\3\2\2\2\u01fb%\3\2")
        buf.write("\2\2\u01fc\u0200\7\u0083\2\2\u01fd\u01ff\5(\25\2\u01fe")
        buf.write("\u01fd\3\2\2\2\u01ff\u0202\3\2\2\2\u0200\u01fe\3\2\2\2")
        buf.write("\u0200\u0201\3\2\2\2\u0201\u0203\3\2\2\2\u0202\u0200\3")
        buf.write("\2\2\2\u0203\u0204\7\u0084\2\2\u0204\'\3\2\2\2\u0205\u0209")
        buf.write("\5*\26\2\u0206\u0208\5\u00a6T\2\u0207\u0206\3\2\2\2\u0208")
        buf.write("\u020b\3\2\2\2\u0209\u0207\3\2\2\2\u0209\u020a\3\2\2\2")
        buf.write("\u020a\u0212\3\2\2\2\u020b\u0209\3\2\2\2\u020c\u020e\5")
        buf.write("\u00a6T\2\u020d\u020c\3\2\2\2\u020e\u020f\3\2\2\2\u020f")
        buf.write("\u020d\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0212\3\2\2\2")
        buf.write("\u0211\u0205\3\2\2\2\u0211\u020d\3\2\2\2\u0212)\3\2\2")
        buf.write("\2\u0213\u0214\t\4\2\2\u0214+\3\2\2\2\u0215\u021b\5\u008e")
        buf.write("H\2\u0216\u021b\5.\30\2\u0217\u021b\5\60\31\2\u0218\u021b")
        buf.write("\5\36\20\2\u0219\u021b\5|?\2\u021a\u0215\3\2\2\2\u021a")
        buf.write("\u0216\3\2\2\2\u021a\u0217\3\2\2\2\u021a\u0218\3\2\2\2")
        buf.write("\u021a\u0219\3\2\2\2\u021b\u021c\3\2\2\2\u021c\u021a\3")
        buf.write("\2\2\2\u021c\u021d\3\2\2\2\u021d-\3\2\2\2\u021e\u021f")
        buf.write("\7\u009b\2\2\u021f\u0220\5\62\32\2\u0220/\3\2\2\2\u0221")
        buf.write("\u0222\7\u009c\2\2\u0222\u0223\5\62\32\2\u0223\61\3\2")
        buf.write("\2\2\u0224\u0226\5B\"\2\u0225\u0224\3\2\2\2\u0225\u0226")
        buf.write("\3\2\2\2\u0226\u0227\3\2\2\2\u0227\u0229\5<\37\2\u0228")
        buf.write("\u022a\5\u00d0i\2\u0229\u0228\3\2\2\2\u0229\u022a\3\2")
        buf.write("\2\2\u022a\u022b\3\2\2\2\u022b\u022c\7\u0087\2\2\u022c")
        buf.write("\63\3\2\2\2\u022d\u0233\5~@\2\u022e\u0233\5\u008eH\2\u022f")
        buf.write("\u0233\5\66\34\2\u0230\u0233\58\35\2\u0231\u0233\5D#\2")
        buf.write("\u0232\u022d\3\2\2\2\u0232\u022e\3\2\2\2\u0232\u022f\3")
        buf.write("\2\2\2\u0232\u0230\3\2\2\2\u0232\u0231\3\2\2\2\u0233\u0234")
        buf.write("\3\2\2\2\u0234\u0232\3\2\2\2\u0234\u0235\3\2\2\2\u0235")
        buf.write("\65\3\2\2\2\u0236\u0237\7\u009b\2\2\u0237\u0238\5:\36")
        buf.write("\2\u0238\67\3\2\2\2\u0239\u023a\7\u009c\2\2\u023a\u023b")
        buf.write("\5:\36\2\u023b9\3\2\2\2\u023c\u023e\5B\"\2\u023d\u023c")
        buf.write("\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u023f\3\2\2\2\u023f")
        buf.write("\u0241\5<\37\2\u0240\u0242\5\u00a0Q\2\u0241\u0240\3\2")
        buf.write("\2\2\u0241\u0242\3\2\2\2\u0242\u0244\3\2\2\2\u0243\u0245")
        buf.write("\7\u0087\2\2\u0244\u0243\3\2\2\2\u0244\u0245\3\2\2\2\u0245")
        buf.write("\u0246\3\2\2\2\u0246\u0247\5\u00eav\2\u0247;\3\2\2\2\u0248")
        buf.write("\u0253\5@!\2\u0249\u024b\5> \2\u024a\u0249\3\2\2\2\u024b")
        buf.write("\u024c\3\2\2\2\u024c\u024a\3\2\2\2\u024c\u024d\3\2\2\2")
        buf.write("\u024d\u0250\3\2\2\2\u024e\u024f\7\u0088\2\2\u024f\u0251")
        buf.write("\7\u00ad\2\2\u0250\u024e\3\2\2\2\u0250\u0251\3\2\2\2\u0251")
        buf.write("\u0253\3\2\2\2\u0252\u0248\3\2\2\2\u0252\u024a\3\2\2\2")
        buf.write("\u0253=\3\2\2\2\u0254\u0256\5@!\2\u0255\u0254\3\2\2\2")
        buf.write("\u0255\u0256\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u025b\7")
        buf.write("\u0092\2\2\u0258\u025a\5B\"\2\u0259\u0258\3\2\2\2\u025a")
        buf.write("\u025d\3\2\2\2\u025b\u0259\3\2\2\2\u025b\u025c\3\2\2\2")
        buf.write("\u025c\u025f\3\2\2\2\u025d\u025b\3\2\2\2\u025e\u0260\5")
        buf.write("\u00acW\2\u025f\u025e\3\2\2\2\u025f\u0260\3\2\2\2\u0260")
        buf.write("\u0261\3\2\2\2\u0261\u0262\5\u0122\u0092\2\u0262?\3\2")
        buf.write("\2\2\u0263\u0266\5\u0122\u0092\2\u0264\u0266\7\30\2\2")
        buf.write("\u0265\u0263\3\2\2\2\u0265\u0264\3\2\2\2\u0266A\3\2\2")
        buf.write("\2\u0267\u0268\7\u0081\2\2\u0268\u0269\5\u00d8m\2\u0269")
        buf.write("\u026a\7\u0082\2\2\u026aC\3\2\2\2\u026b\u026c\7Q\2\2\u026c")
        buf.write("\u026d\5F$\2\u026d\u026e\7\u0087\2\2\u026e\u0274\3\2\2")
        buf.write("\2\u026f\u0270\7?\2\2\u0270\u0271\5F$\2\u0271\u0272\7")
        buf.write("\u0087\2\2\u0272\u0274\3\2\2\2\u0273\u026b\3\2\2\2\u0273")
        buf.write("\u026f\3\2\2\2\u0274E\3\2\2\2\u0275\u027a\5H%\2\u0276")
        buf.write("\u0277\7\u0088\2\2\u0277\u0279\5H%\2\u0278\u0276\3\2\2")
        buf.write("\2\u0279\u027c\3\2\2\2\u027a\u0278\3\2\2\2\u027a\u027b")
        buf.write("\3\2\2\2\u027bG\3\2\2\2\u027c\u027a\3\2\2\2\u027d\u0280")
        buf.write("\5\u0122\u0092\2\u027e\u027f\7\u008c\2\2\u027f\u0281\5")
        buf.write("\u0122\u0092\2\u0280\u027e\3\2\2\2\u0280\u0281\3\2\2\2")
        buf.write("\u0281I\3\2\2\2\u0282\u0284\5\u00aeX\2\u0283\u0282\3\2")
        buf.write("\2\2\u0283\u0284\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u0287")
        buf.write("\5\u00b8]\2\u0286\u0288\5\u00aeX\2\u0287\u0286\3\2\2\2")
        buf.write("\u0287\u0288\3\2\2\2\u0288\u0289\3\2\2\2\u0289\u028a\7")
        buf.write("\u0081\2\2\u028a\u028d\7\u00a1\2\2\u028b\u028e\5\u00ae")
        buf.write("X\2\u028c\u028e\5\u00b8]\2\u028d\u028b\3\2\2\2\u028d\u028c")
        buf.write("\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u028f\3\2\2\2\u028f")
        buf.write("\u0291\7\u0082\2\2\u0290\u0292\5X-\2\u0291\u0290\3\2\2")
        buf.write("\2\u0291\u0292\3\2\2\2\u0292K\3\2\2\2\u0293\u029c\7\u008e")
        buf.write("\2\2\u0294\u0299\5N(\2\u0295\u0296\7\u0088\2\2\u0296\u0298")
        buf.write("\5N(\2\u0297\u0295\3\2\2\2\u0298\u029b\3\2\2\2\u0299\u0297")
        buf.write("\3\2\2\2\u0299\u029a\3\2\2\2\u029a\u029d\3\2\2\2\u029b")
        buf.write("\u0299\3\2\2\2\u029c\u0294\3\2\2\2\u029c\u029d\3\2\2\2")
        buf.write("\u029d\u029e\3\2\2\2\u029e\u029f\7\u008d\2\2\u029fM\3")
        buf.write("\2\2\2\u02a0\u02a2\5\u00b2Z\2\u02a1\u02a0\3\2\2\2\u02a2")
        buf.write("\u02a5\3\2\2\2\u02a3\u02a1\3\2\2\2\u02a3\u02a4\3\2\2\2")
        buf.write("\u02a4\u02a6\3\2\2\2\u02a5\u02a3\3\2\2\2\u02a6\u02a7\5")
        buf.write("\u00b8]\2\u02a7O\3\2\2\2\u02a8\u02a9\7\u008b\2\2\u02a9")
        buf.write("\u02b5\7\u0083\2\2\u02aa\u02af\5R*\2\u02ab\u02ac\7\u0088")
        buf.write("\2\2\u02ac\u02ae\5R*\2\u02ad\u02ab\3\2\2\2\u02ae\u02b1")
        buf.write("\3\2\2\2\u02af\u02ad\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0")
        buf.write("\u02b3\3\2\2\2\u02b1\u02af\3\2\2\2\u02b2\u02b4\7\u0088")
        buf.write("\2\2\u02b3\u02b2\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02b6")
        buf.write("\3\2\2\2\u02b5\u02aa\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6")
        buf.write("\u02b7\3\2\2\2\u02b7\u02b8\7\u0084\2\2\u02b8Q\3\2\2\2")
        buf.write("\u02b9\u02ba\5\u010a\u0086\2\u02ba\u02bb\7\u0092\2\2\u02bb")
        buf.write("\u02bc\5\u0106\u0084\2\u02bcS\3\2\2\2\u02bd\u02be\7\u008b")
        buf.write("\2\2\u02be\u02c3\7\u0085\2\2\u02bf\u02c1\5\u0104\u0083")
        buf.write("\2\u02c0\u02c2\7\u0088\2\2\u02c1\u02c0\3\2\2\2\u02c1\u02c2")
        buf.write("\3\2\2\2\u02c2\u02c4\3\2\2\2\u02c3\u02bf\3\2\2\2\u02c3")
        buf.write("\u02c4\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\u02c6\7\u0086")
        buf.write("\2\2\u02c6U\3\2\2\2\u02c7\u02c8\7\u008b\2\2\u02c8\u02c9")
        buf.write("\7\u0081\2\2\u02c9\u02ca\5\u0106\u0084\2\u02ca\u02cb\7")
        buf.write("\u0082\2\2\u02cb\u02d2\3\2\2\2\u02cc\u02cf\7\u008b\2\2")
        buf.write("\u02cd\u02d0\5\u011e\u0090\2\u02ce\u02d0\5\u0122\u0092")
        buf.write("\2\u02cf\u02cd\3\2\2\2\u02cf\u02ce\3\2\2\2\u02d0\u02d2")
        buf.write("\3\2\2\2\u02d1\u02c7\3\2\2\2\u02d1\u02cc\3\2\2\2\u02d2")
        buf.write("W\3\2\2\2\u02d3\u02df\7\u0081\2\2\u02d4\u02d7\5Z.\2\u02d5")
        buf.write("\u02d7\7\"\2\2\u02d6\u02d4\3\2\2\2\u02d6\u02d5\3\2\2\2")
        buf.write("\u02d7\u02dc\3\2\2\2\u02d8\u02d9\7\u0088\2\2\u02d9\u02db")
        buf.write("\5Z.\2\u02da\u02d8\3\2\2\2\u02db\u02de\3\2\2\2\u02dc\u02da")
        buf.write("\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02e0\3\2\2\2\u02de")
        buf.write("\u02dc\3\2\2\2\u02df\u02d6\3\2\2\2\u02df\u02e0\3\2\2\2")
        buf.write("\u02e0\u02e1\3\2\2\2\u02e1\u02e2\7\u0082\2\2\u02e2Y\3")
        buf.write("\2\2\2\u02e3\u02e6\5p9\2\u02e4\u02e6\5\u00d8m\2\u02e5")
        buf.write("\u02e3\3\2\2\2\u02e5\u02e4\3\2\2\2\u02e6[\3\2\2\2\u02e7")
        buf.write("\u02e9\7\u00a1\2\2\u02e8\u02ea\5\u00b8]\2\u02e9\u02e8")
        buf.write("\3\2\2\2\u02e9\u02ea\3\2\2\2\u02ea\u02ec\3\2\2\2\u02eb")
        buf.write("\u02ed\5\u00aeX\2\u02ec\u02eb\3\2\2\2\u02ec\u02ed\3\2")
        buf.write("\2\2\u02ed\u02ef\3\2\2\2\u02ee\u02f0\5X-\2\u02ef\u02ee")
        buf.write("\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1")
        buf.write("\u02f2\5\u00eav\2\u02f2]\3\2\2\2\u02f3\u02f4\7\u0085\2")
        buf.write("\2\u02f4\u02f5\5`\61\2\u02f5\u02f6\5b\62\2\u02f6\u02f7")
        buf.write("\7\u0086\2\2\u02f7_\3\2\2\2\u02f8\u02fb\5\u0106\u0084")
        buf.write("\2\u02f9\u02fb\5\u00b8]\2\u02fa\u02f8\3\2\2\2\u02fa\u02f9")
        buf.write("\3\2\2\2\u02fba\3\2\2\2\u02fc\u0303\5@!\2\u02fd\u02ff")
        buf.write("\5d\63\2\u02fe\u02fd\3\2\2\2\u02ff\u0300\3\2\2\2\u0300")
        buf.write("\u02fe\3\2\2\2\u0300\u0301\3\2\2\2\u0301\u0303\3\2\2\2")
        buf.write("\u0302\u02fc\3\2\2\2\u0302\u02fe\3\2\2\2\u0303c\3\2\2")
        buf.write("\2\u0304\u0306\5@!\2\u0305\u0304\3\2\2\2\u0305\u0306\3")
        buf.write("\2\2\2\u0306\u0307\3\2\2\2\u0307\u0308\7\u0092\2\2\u0308")
        buf.write("\u030d\5f\64\2\u0309\u030a\7\u0088\2\2\u030a\u030c\5f")
        buf.write("\64\2\u030b\u0309\3\2\2\2\u030c\u030f\3\2\2\2\u030d\u030b")
        buf.write("\3\2\2\2\u030d\u030e\3\2\2\2\u030ee\3\2\2\2\u030f\u030d")
        buf.write("\3\2\2\2\u0310\u0312\5\u0104\u0083\2\u0311\u0313\5\u00ae")
        buf.write("X\2\u0312\u0311\3\2\2\2\u0312\u0313\3\2\2\2\u0313\u0318")
        buf.write("\3\2\2\2\u0314\u0315\7\u0083\2\2\u0315\u0316\5\u00d6l")
        buf.write("\2\u0316\u0317\7\u0084\2\2\u0317\u0319\3\2\2\2\u0318\u0314")
        buf.write("\3\2\2\2\u0318\u0319\3\2\2\2\u0319g\3\2\2\2\u031a\u031b")
        buf.write("\7O\2\2\u031b\u031c\7\u0081\2\2\u031c\u031d\5j\66\2\u031d")
        buf.write("\u031e\7\u0082\2\2\u031ei\3\2\2\2\u031f\u0329\5@!\2\u0320")
        buf.write("\u0322\5@!\2\u0321\u0320\3\2\2\2\u0321\u0322\3\2\2\2\u0322")
        buf.write("\u0323\3\2\2\2\u0323\u0325\7\u0092\2\2\u0324\u0321\3\2")
        buf.write("\2\2\u0325\u0326\3\2\2\2\u0326\u0324\3\2\2\2\u0326\u0327")
        buf.write("\3\2\2\2\u0327\u0329\3\2\2\2\u0328\u031f\3\2\2\2\u0328")
        buf.write("\u0324\3\2\2\2\u0329k\3\2\2\2\u032a\u032b\7H\2\2\u032b")
        buf.write("\u032c\7\u0081\2\2\u032c\u032d\5$\23\2\u032d\u032e\7\u0082")
        buf.write("\2\2\u032em\3\2\2\2\u032f\u0330\7@\2\2\u0330\u0331\7\u0081")
        buf.write("\2\2\u0331\u0332\5\u00d8m\2\u0332\u0333\7\u0082\2\2\u0333")
        buf.write("o\3\2\2\2\u0334\u0335\5\u009cO\2\u0335\u0336\5\u00e2r")
        buf.write("\2\u0336q\3\2\2\2\u0337\u0338\7R\2\2\u0338\u0339\7\u0081")
        buf.write("\2\2\u0339\u033a\5\u0122\u0092\2\u033a\u033b\7\u0082\2")
        buf.write("\2\u033b\u033f\3\2\2\2\u033c\u033d\7R\2\2\u033d\u033f")
        buf.write("\5\u0106\u0084\2\u033e\u0337\3\2\2\2\u033e\u033c\3\2\2")
        buf.write("\2\u033fs\3\2\2\2\u0340\u0341\7S\2\2\u0341\u0345\5\u00ea")
        buf.write("v\2\u0342\u0344\5v<\2\u0343\u0342\3\2\2\2\u0344\u0347")
        buf.write("\3\2\2\2\u0345\u0343\3\2\2\2\u0345\u0346\3\2\2\2\u0346")
        buf.write("\u034a\3\2\2\2\u0347\u0345\3\2\2\2\u0348\u0349\7B\2\2")
        buf.write("\u0349\u034b\5\u00eav\2\u034a\u0348\3\2\2\2\u034a\u034b")
        buf.write("\3\2\2\2\u034bu\3\2\2\2\u034c\u034d\7=\2\2\u034d\u034e")
        buf.write("\7\u0081\2\2\u034e\u034f\5p9\2\u034f\u0350\7\u0082\2\2")
        buf.write("\u0350\u0351\5\u00eav\2\u0351w\3\2\2\2\u0352\u0353\7P")
        buf.write("\2\2\u0353\u0354\7\u0081\2\2\u0354\u0355\5\u0106\u0084")
        buf.write("\2\u0355\u0356\7\u0082\2\2\u0356\u0357\5\u00eav\2\u0357")
        buf.write("y\3\2\2\2\u0358\u0359\7<\2\2\u0359\u035a\5\u00eav\2\u035a")
        buf.write("{\3\2\2\2\u035b\u035c\5\u0080A\2\u035c\u035d\7\u0087\2")
        buf.write("\2\u035d}\3\2\2\2\u035e\u035f\5\u0080A\2\u035f\u0360\5")
        buf.write("\u00eav\2\u0360\177\3\2\2\2\u0361\u0363\5\u009cO\2\u0362")
        buf.write("\u0361\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u0364\3\2\2\2")
        buf.write("\u0364\u0365\5\u0122\u0092\2\u0365\u0367\7\u0081\2\2\u0366")
        buf.write("\u0368\5\u00ccg\2\u0367\u0366\3\2\2\2\u0367\u0368\3\2")
        buf.write("\2\2\u0368\u0369\3\2\2\2\u0369\u036a\7\u0082\2\2\u036a")
        buf.write("\u036c\3\2\2\2\u036b\u036d\5\u009eP\2\u036c\u036b\3\2")
        buf.write("\2\2\u036c\u036d\3\2\2\2\u036d\u0081\3\2\2\2\u036e\u0370")
        buf.write("\5\u0084C\2\u036f\u0371\5\u0086D\2\u0370\u036f\3\2\2\2")
        buf.write("\u0370\u0371\3\2\2\2\u0371\u0083\3\2\2\2\u0372\u0375\7")
        buf.write("\7\2\2\u0373\u0375\5\u0122\u0092\2\u0374\u0372\3\2\2\2")
        buf.write("\u0374\u0373\3\2\2\2\u0375\u0085\3\2\2\2\u0376\u0378\7")
        buf.write("\u0081\2\2\u0377\u0379\5\u0088E\2\u0378\u0377\3\2\2\2")
        buf.write("\u0378\u0379\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u037b\7")
        buf.write("\u0082\2\2\u037b\u0087\3\2\2\2\u037c\u0381\5\u008aF\2")
        buf.write("\u037d\u037e\7\u0088\2\2\u037e\u0380\5\u008aF\2\u037f")
        buf.write("\u037d\3\2\2\2\u0380\u0383\3\2\2\2\u0381\u037f\3\2\2\2")
        buf.write("\u0381\u0382\3\2\2\2\u0382\u0089\3\2\2\2\u0383\u0381\3")
        buf.write("\2\2\2\u0384\u0389\5\u0082B\2\u0385\u0389\5\u011e\u0090")
        buf.write("\2\u0386\u0389\5\u0120\u0091\2\u0387\u0389\5\u008cG\2")
        buf.write("\u0388\u0384\3\2\2\2\u0388\u0385\3\2\2\2\u0388\u0386\3")
        buf.write("\2\2\2\u0388\u0387\3\2\2\2\u0389\u008b\3\2\2\2\u038a\u038b")
        buf.write("\5\u0084C\2\u038b\u038f\7\u008c\2\2\u038c\u0390\5\u011e")
        buf.write("\u0090\2\u038d\u0390\5\u0084C\2\u038e\u0390\5\u0120\u0091")
        buf.write("\2\u038f\u038c\3\2\2\2\u038f\u038d\3\2\2\2\u038f\u038e")
        buf.write("\3\2\2\2\u0390\u008d\3\2\2\2\u0391\u0396\5\u0090I\2\u0392")
        buf.write("\u0396\5\u0092J\2\u0393\u0396\5\u0094K\2\u0394\u0396\5")
        buf.write("\u0096L\2\u0395\u0391\3\2\2\2\u0395\u0392\3\2\2\2\u0395")
        buf.write("\u0393\3\2\2\2\u0395\u0394\3\2\2\2\u0396\u008f\3\2\2\2")
        buf.write("\u0397\u0399\5\u009eP\2\u0398\u0397\3\2\2\2\u0398\u0399")
        buf.write("\3\2\2\2\u0399\u039a\3\2\2\2\u039a\u039c\5\u0122\u0092")
        buf.write("\2\u039b\u039d\5\u009eP\2\u039c\u039b\3\2\2\2\u039c\u039d")
        buf.write("\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u039f\7\u0081\2\2\u039f")
        buf.write("\u03a0\5\u00c8e\2\u03a0\u03a1\7\u0082\2\2\u03a1\u03a2")
        buf.write("\7\u0087\2\2\u03a2\u0091\3\2\2\2\u03a3\u03a5\5\u009eP")
        buf.write("\2\u03a4\u03a3\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a7")
        buf.write("\3\2\2\2\u03a6\u03a8\7\37\2\2\u03a7\u03a6\3\2\2\2\u03a7")
        buf.write("\u03a8\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u03ab\5\u00c0")
        buf.write("a\2\u03aa\u03ac\5\u0122\u0092\2\u03ab\u03aa\3\2\2\2\u03ab")
        buf.write("\u03ac\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03ae\7\u0087")
        buf.write("\2\2\u03ae\u0093\3\2\2\2\u03af\u03b0\5\u009cO\2\u03b0")
        buf.write("\u03b1\5\u00a0Q\2\u03b1\u03b4\3\2\2\2\u03b2\u03b4\5\u009c")
        buf.write("O\2\u03b3\u03af\3\2\2\2\u03b3\u03b2\3\2\2\2\u03b4\u03b5")
        buf.write("\3\2\2\2\u03b5\u03b6\7\u0087\2\2\u03b6\u0095\3\2\2\2\u03b7")
        buf.write("\u03b9\5\u009eP\2\u03b8\u03b7\3\2\2\2\u03b8\u03b9\3\2")
        buf.write("\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03bf\7\37\2\2\u03bb\u03bc")
        buf.write("\5\u009cO\2\u03bc\u03bd\5\u0098M\2\u03bd\u03c0\3\2\2\2")
        buf.write("\u03be\u03c0\5\u009cO\2\u03bf\u03bb\3\2\2\2\u03bf\u03be")
        buf.write("\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c2\7\u0087\2\2\u03c2")
        buf.write("\u0097\3\2\2\2\u03c3\u03c8\5\u009aN\2\u03c4\u03c5\7\u0088")
        buf.write("\2\2\u03c5\u03c7\5\u009aN\2\u03c6\u03c4\3\2\2\2\u03c7")
        buf.write("\u03ca\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c8\u03c9\3\2\2\2")
        buf.write("\u03c9\u0099\3\2\2\2\u03ca\u03c8\3\2\2\2\u03cb\u03cd\5")
        buf.write("\u00ceh\2\u03cc\u03cb\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd")
        buf.write("\u03ce\3\2\2\2\u03ce\u03cf\5\u00c8e\2\u03cf\u009b\3\2")
        buf.write("\2\2\u03d0\u03d9\5\u00b0Y\2\u03d1\u03d9\5\u009eP\2\u03d2")
        buf.write("\u03d9\5\u00acW\2\u03d3\u03d9\5\u00aeX\2\u03d4\u03d9\5")
        buf.write("\u00aaV\2\u03d5\u03d9\5\u00b2Z\2\u03d6\u03d9\5\u00b4[")
        buf.write("\2\u03d7\u03d9\5\u00b8]\2\u03d8\u03d0\3\2\2\2\u03d8\u03d1")
        buf.write("\3\2\2\2\u03d8\u03d2\3\2\2\2\u03d8\u03d3\3\2\2\2\u03d8")
        buf.write("\u03d4\3\2\2\2\u03d8\u03d5\3\2\2\2\u03d8\u03d6\3\2\2\2")
        buf.write("\u03d8\u03d7\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u03d8\3")
        buf.write("\2\2\2\u03da\u03db\3\2\2\2\u03db\u009d\3\2\2\2\u03dc\u03dd")
        buf.write("\7W\2\2\u03dd\u03de\7\u0081\2\2\u03de\u03df\7\u0081\2")
        buf.write("\2\u03df\u03e4\5\u0082B\2\u03e0\u03e1\7\u0088\2\2\u03e1")
        buf.write("\u03e3\5\u0082B\2\u03e2\u03e0\3\2\2\2\u03e3\u03e6\3\2")
        buf.write("\2\2\u03e4\u03e2\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e7")
        buf.write("\3\2\2\2\u03e6\u03e4\3\2\2\2\u03e7\u03e8\7\u0082\2\2\u03e8")
        buf.write("\u03e9\7\u0082\2\2\u03e9\u009f\3\2\2\2\u03ea\u03ef\5\u00a2")
        buf.write("R\2\u03eb\u03ec\7\u0088\2\2\u03ec\u03ee\5\u00a2R\2\u03ed")
        buf.write("\u03eb\3\2\2\2\u03ee\u03f1\3\2\2\2\u03ef\u03ed\3\2\2\2")
        buf.write("\u03ef\u03f0\3\2\2\2\u03f0\u00a1\3\2\2\2\u03f1\u03ef\3")
        buf.write("\2\2\2\u03f2\u03f5\5\u00e2r\2\u03f3\u03f4\7\u008c\2\2")
        buf.write("\u03f4\u03f6\5\u010c\u0087\2\u03f5\u03f3\3\2\2\2\u03f5")
        buf.write("\u03f6\3\2\2\2\u03f6\u00a3\3\2\2\2\u03f7\u0404\t\5\2\2")
        buf.write("\u03f8\u0405\5\u0122\u0092\2\u03f9\u03fb\5\u0122\u0092")
        buf.write("\2\u03fa\u03f9\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fc")
        buf.write("\3\2\2\2\u03fc\u03fe\7\u0083\2\2\u03fd\u03ff\5\u00a6T")
        buf.write("\2\u03fe\u03fd\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u03fe")
        buf.write("\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0402\3\2\2\2\u0402")
        buf.write("\u0403\7\u0084\2\2\u0403\u0405\3\2\2\2\u0404\u03f8\3\2")
        buf.write("\2\2\u0404\u03fa\3\2\2\2\u0405\u00a5\3\2\2\2\u0406\u0407")
        buf.write("\5\u00a8U\2\u0407\u0409\5\u00bc_\2\u0408\u040a\5\u00d0")
        buf.write("i\2\u0409\u0408\3\2\2\2\u0409\u040a\3\2\2\2\u040a\u040b")
        buf.write("\3\2\2\2\u040b\u040c\7\u0087\2\2\u040c\u00a7\3\2\2\2\u040d")
        buf.write("\u0414\5\u00acW\2\u040e\u0414\5\u00aeX\2\u040f\u0414\5")
        buf.write("\u00aaV\2\u0410\u0414\5\u00b2Z\2\u0411\u0414\5\u00b4[")
        buf.write("\2\u0412\u0414\5\u00b8]\2\u0413\u040d\3\2\2\2\u0413\u040e")
        buf.write("\3\2\2\2\u0413\u040f\3\2\2\2\u0413\u0410\3\2\2\2\u0413")
        buf.write("\u0411\3\2\2\2\u0413\u0412\3\2\2\2\u0414\u0415\3\2\2\2")
        buf.write("\u0415\u0413\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u00a9\3")
        buf.write("\2\2\2\u0417\u0418\7w\2\2\u0418\u0419\7\u0081\2\2\u0419")
        buf.write("\u041a\5\u0122\u0092\2\u041a\u041b\7\u0082\2\2\u041b\u041e")
        buf.write("\3\2\2\2\u041c\u041e\7v\2\2\u041d\u0417\3\2\2\2\u041d")
        buf.write("\u041c\3\2\2\2\u041e\u00ab\3\2\2\2\u041f\u0420\t\6\2\2")
        buf.write("\u0420\u00ad\3\2\2\2\u0421\u0422\t\7\2\2\u0422\u00af\3")
        buf.write("\2\2\2\u0423\u0424\t\b\2\2\u0424\u00b1\3\2\2\2\u0425\u0426")
        buf.write("\t\t\2\2\u0426\u00b3\3\2\2\2\u0427\u042c\7\7\2\2\u0428")
        buf.write("\u042c\7#\2\2\u0429\u042c\7\27\2\2\u042a\u042c\5\u00b6")
        buf.write("\\\2\u042b\u0427\3\2\2\2\u042b\u0428\3\2\2\2\u042b\u0429")
        buf.write("\3\2\2\2\u042b\u042a\3\2\2\2\u042c\u00b5\3\2\2\2\u042d")
        buf.write("\u042e\t\n\2\2\u042e\u00b7\3\2\2\2\u042f\u0441\7\"\2\2")
        buf.write("\u0430\u0441\7\6\2\2\u0431\u0441\7\31\2\2\u0432\u0441")
        buf.write("\7\24\2\2\u0433\u0441\7\25\2\2\u0434\u0441\7\17\2\2\u0435")
        buf.write("\u0441\7\13\2\2\u0436\u0441\7\32\2\2\u0437\u0441\7!\2")
        buf.write("\2\u0438\u0441\5\u00ba^\2\u0439\u0441\5\22\n\2\u043a\u0441")
        buf.write("\5\u00a4S\2\u043b\u0441\5\u00c0a\2\u043c\u043e\5\u0122")
        buf.write("\u0092\2\u043d\u043f\5\u00ceh\2\u043e\u043d\3\2\2\2\u043e")
        buf.write("\u043f\3\2\2\2\u043f\u0441\3\2\2\2\u0440\u042f\3\2\2\2")
        buf.write("\u0440\u0430\3\2\2\2\u0440\u0431\3\2\2\2\u0440\u0432\3")
        buf.write("\2\2\2\u0440\u0433\3\2\2\2\u0440\u0434\3\2\2\2\u0440\u0435")
        buf.write("\3\2\2\2\u0440\u0436\3\2\2\2\u0440\u0437\3\2\2\2\u0440")
        buf.write("\u0438\3\2\2\2\u0440\u0439\3\2\2\2\u0440\u043a\3\2\2\2")
        buf.write("\u0440\u043b\3\2\2\2\u0440\u043c\3\2\2\2\u0441\u00b9\3")
        buf.write("\2\2\2\u0442\u0443\7b\2\2\u0443\u0444\7\u0081\2\2\u0444")
        buf.write("\u0445\5\u0106\u0084\2\u0445\u0446\7\u0082\2\2\u0446\u00bb")
        buf.write("\3\2\2\2\u0447\u044c\5\u00be`\2\u0448\u0449\7\u0088\2")
        buf.write("\2\u0449\u044b\5\u00be`\2\u044a\u0448\3\2\2\2\u044b\u044e")
        buf.write("\3\2\2\2\u044c\u044a\3\2\2\2\u044c\u044d\3\2\2\2\u044d")
        buf.write("\u00bd\3\2\2\2\u044e\u044c\3\2\2\2\u044f\u0456\5\u00e2")
        buf.write("r\2\u0450\u0452\5\u00e2r\2\u0451\u0450\3\2\2\2\u0451\u0452")
        buf.write("\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u0454\7\u0092\2\2\u0454")
        buf.write("\u0456\5\u011e\u0090\2\u0455\u044f\3\2\2\2\u0455\u0451")
        buf.write("\3\2\2\2\u0456\u00bf\3\2\2\2\u0457\u045d\7\r\2\2\u0458")
        buf.write("\u045a\5\u0122\u0092\2\u0459\u0458\3\2\2\2\u0459\u045a")
        buf.write("\3\2\2\2\u045a\u045b\3\2\2\2\u045b\u045c\7\u0092\2\2\u045c")
        buf.write("\u045e\5\u00d8m\2\u045d\u0459\3\2\2\2\u045d\u045e\3\2")
        buf.write("\2\2\u045e\u046a\3\2\2\2\u045f\u0464\5\u0122\u0092\2\u0460")
        buf.write("\u0461\7\u0083\2\2\u0461\u0462\5\u00c2b\2\u0462\u0463")
        buf.write("\7\u0084\2\2\u0463\u0465\3\2\2\2\u0464\u0460\3\2\2\2\u0464")
        buf.write("\u0465\3\2\2\2\u0465\u046b\3\2\2\2\u0466\u0467\7\u0083")
        buf.write("\2\2\u0467\u0468\5\u00c2b\2\u0468\u0469\7\u0084\2\2\u0469")
        buf.write("\u046b\3\2\2\2\u046a\u045f\3\2\2\2\u046a\u0466\3\2\2\2")
        buf.write("\u046b\u0477\3\2\2\2\u046c\u046d\t\13\2\2\u046d\u046e")
        buf.write("\7\u0081\2\2\u046e\u046f\5\u00d8m\2\u046f\u0470\7\u0088")
        buf.write("\2\2\u0470\u0471\5\u0122\u0092\2\u0471\u0472\7\u0082\2")
        buf.write("\2\u0472\u0473\7\u0083\2\2\u0473\u0474\5\u00c2b\2\u0474")
        buf.write("\u0475\7\u0084\2\2\u0475\u0477\3\2\2\2\u0476\u0457\3\2")
        buf.write("\2\2\u0476\u046c\3\2\2\2\u0477\u00c1\3\2\2\2\u0478\u047d")
        buf.write("\5\u00c4c\2\u0479\u047a\7\u0088\2\2\u047a\u047c\5\u00c4")
        buf.write("c\2\u047b\u0479\3\2\2\2\u047c\u047f\3\2\2\2\u047d\u047b")
        buf.write("\3\2\2\2\u047d\u047e\3\2\2\2\u047e\u0481\3\2\2\2\u047f")
        buf.write("\u047d\3\2\2\2\u0480\u0482\7\u0088\2\2\u0481\u0480\3\2")
        buf.write("\2\2\u0481\u0482\3\2\2\2\u0482\u00c3\3\2\2\2\u0483\u0486")
        buf.write("\5\u00c6d\2\u0484\u0485\7\u008c\2\2\u0485\u0487\5\u0106")
        buf.write("\u0084\2\u0486\u0484\3\2\2\2\u0486\u0487\3\2\2\2\u0487")
        buf.write("\u00c5\3\2\2\2\u0488\u048b\5\u0122\u0092\2\u0489\u048b")
        buf.write("\7\t\2\2\u048a\u0488\3\2\2\2\u048a\u0489\3\2\2\2\u048b")
        buf.write("\u00c7\3\2\2\2\u048c\u0492\5\u0122\u0092\2\u048d\u048e")
        buf.write("\7\u0081\2\2\u048e\u048f\5\u00e2r\2\u048f\u0490\7\u0082")
        buf.write("\2\2\u0490\u0492\3\2\2\2\u0491\u048c\3\2\2\2\u0491\u048d")
        buf.write("\3\2\2\2\u0492\u0496\3\2\2\2\u0493\u0495\5\u00caf\2\u0494")
        buf.write("\u0493\3\2\2\2\u0495\u0498\3\2\2\2\u0496\u0494\3\2\2\2")
        buf.write("\u0496\u0497\3\2\2\2\u0497\u04a4\3\2\2\2\u0498\u0496\3")
        buf.write("\2\2\2\u0499\u049a\7\u0081\2\2\u049a\u049c\7\u00a1\2\2")
        buf.write("\u049b\u049d\5\u00aeX\2\u049c\u049b\3\2\2\2\u049c\u049d")
        buf.write("\3\2\2\2\u049d\u049f\3\2\2\2\u049e\u04a0\5\u0122\u0092")
        buf.write("\2\u049f\u049e\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a1")
        buf.write("\3\2\2\2\u04a1\u04a2\7\u0082\2\2\u04a2\u04a4\5X-\2\u04a3")
        buf.write("\u0491\3\2\2\2\u04a3\u0499\3\2\2\2\u04a4\u00c9\3\2\2\2")
        buf.write("\u04a5\u04a7\7\u0085\2\2\u04a6\u04a8\5\u010e\u0088\2\u04a7")
        buf.write("\u04a6\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04a9\3\2\2\2")
        buf.write("\u04a9\u04aa\7\u0086\2\2\u04aa\u00cb\3\2\2\2\u04ab\u04ae")
        buf.write("\5\u00dep\2\u04ac\u04ad\7\u0088\2\2\u04ad\u04af\7\u00ad")
        buf.write("\2\2\u04ae\u04ac\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u00cd")
        buf.write("\3\2\2\2\u04b0\u04b2\7\u009d\2\2\u04b1\u04b3\5\u009cO")
        buf.write("\2\u04b2\u04b1\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u04b5")
        buf.write("\3\2\2\2\u04b4\u04b6\5\u00ceh\2\u04b5\u04b4\3\2\2\2\u04b5")
        buf.write("\u04b6\3\2\2\2\u04b6\u00cf\3\2\2\2\u04b7\u04c3\5\u0122")
        buf.write("\u0092\2\u04b8\u04b9\7\u0081\2\2\u04b9\u04be\5\u011c\u008f")
        buf.write("\2\u04ba\u04bb\7\u0088\2\2\u04bb\u04bd\5\u011c\u008f\2")
        buf.write("\u04bc\u04ba\3\2\2\2\u04bd\u04c0\3\2\2\2\u04be\u04bc\3")
        buf.write("\2\2\2\u04be\u04bf\3\2\2\2\u04bf\u04c1\3\2\2\2\u04c0\u04be")
        buf.write("\3\2\2\2\u04c1\u04c2\7\u0082\2\2\u04c2\u04c4\3\2\2\2\u04c3")
        buf.write("\u04b8\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u00d1\3\2\2\2")
        buf.write("\u04c5\u04ca\7\u0083\2\2\u04c6\u04c8\5\u0104\u0083\2\u04c7")
        buf.write("\u04c9\7\u0088\2\2\u04c8\u04c7\3\2\2\2\u04c8\u04c9\3\2")
        buf.write("\2\2\u04c9\u04cb\3\2\2\2\u04ca\u04c6\3\2\2\2\u04ca\u04cb")
        buf.write("\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u04cd\7\u0084\2\2\u04cd")
        buf.write("\u00d3\3\2\2\2\u04ce\u04dc\7\u0083\2\2\u04cf\u04d0\7\u0089")
        buf.write("\2\2\u04d0\u04d6\5\u0106\u0084\2\u04d1\u04d2\7\u0088\2")
        buf.write("\2\u04d2\u04d3\7\u0089\2\2\u04d3\u04d5\5\u0106\u0084\2")
        buf.write("\u04d4\u04d1\3\2\2\2\u04d5\u04d8\3\2\2\2\u04d6\u04d4\3")
        buf.write("\2\2\2\u04d6\u04d7\3\2\2\2\u04d7\u04da\3\2\2\2\u04d8\u04d6")
        buf.write("\3\2\2\2\u04d9\u04db\7\u0088\2\2\u04da\u04d9\3\2\2\2\u04da")
        buf.write("\u04db\3\2\2\2\u04db\u04dd\3\2\2\2\u04dc\u04cf\3\2\2\2")
        buf.write("\u04dc\u04dd\3\2\2\2\u04dd\u04de\3\2\2\2\u04de\u04df\7")
        buf.write("\u0084\2\2\u04df\u00d5\3\2\2\2\u04e0\u04e5\5\u010c\u0087")
        buf.write("\2\u04e1\u04e2\7\u0088\2\2\u04e2\u04e4\5\u010c\u0087\2")
        buf.write("\u04e3\u04e1\3\2\2\2\u04e4\u04e7\3\2\2\2\u04e5\u04e3\3")
        buf.write("\2\2\2\u04e5\u04e6\3\2\2\2\u04e6\u04e9\3\2\2\2\u04e7\u04e5")
        buf.write("\3\2\2\2\u04e8\u04ea\7\u0088\2\2\u04e9\u04e8\3\2\2\2\u04e9")
        buf.write("\u04ea\3\2\2\2\u04ea\u00d7\3\2\2\2\u04eb\u04ed\5\u00a8")
        buf.write("U\2\u04ec\u04ee\5\u00dan\2\u04ed\u04ec\3\2\2\2\u04ed\u04ee")
        buf.write("\3\2\2\2\u04ee\u04f1\3\2\2\2\u04ef\u04f1\5J&\2\u04f0\u04eb")
        buf.write("\3\2\2\2\u04f0\u04ef\3\2\2\2\u04f1\u00d9\3\2\2\2\u04f2")
        buf.write("\u04f4\5\u00ceh\2\u04f3\u04f5\5\u00dan\2\u04f4\u04f3\3")
        buf.write("\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u050a\3\2\2\2\u04f6\u04f8")
        buf.write("\7\u0081\2\2\u04f7\u04f9\5\u00dan\2\u04f8\u04f7\3\2\2")
        buf.write("\2\u04f8\u04f9\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa\u04fc")
        buf.write("\7\u0082\2\2\u04fb\u04fd\5\u00dco\2\u04fc\u04fb\3\2\2")
        buf.write("\2\u04fd\u04fe\3\2\2\2\u04fe\u04fc\3\2\2\2\u04fe\u04ff")
        buf.write("\3\2\2\2\u04ff\u050a\3\2\2\2\u0500\u0502\7\u0085\2\2\u0501")
        buf.write("\u0503\5\u010e\u0088\2\u0502\u0501\3\2\2\2\u0502\u0503")
        buf.write("\3\2\2\2\u0503\u0504\3\2\2\2\u0504\u0506\7\u0086\2\2\u0505")
        buf.write("\u0500\3\2\2\2\u0506\u0507\3\2\2\2\u0507\u0505\3\2\2\2")
        buf.write("\u0507\u0508\3\2\2\2\u0508\u050a\3\2\2\2\u0509\u04f2\3")
        buf.write("\2\2\2\u0509\u04f6\3\2\2\2\u0509\u0505\3\2\2\2\u050a\u00db")
        buf.write("\3\2\2\2\u050b\u050d\7\u0085\2\2\u050c\u050e\5\u010e\u0088")
        buf.write("\2\u050d\u050c\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u050f")
        buf.write("\3\2\2\2\u050f\u0516\7\u0086\2\2\u0510\u0512\7\u0081\2")
        buf.write("\2\u0511\u0513\5\u00dep\2\u0512\u0511\3\2\2\2\u0512\u0513")
        buf.write("\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0516\7\u0082\2\2\u0515")
        buf.write("\u050b\3\2\2\2\u0515\u0510\3\2\2\2\u0516\u00dd\3\2\2\2")
        buf.write("\u0517\u051c\5\u00e0q\2\u0518\u0519\7\u0088\2\2\u0519")
        buf.write("\u051b\5\u00e0q\2\u051a\u0518\3\2\2\2\u051b\u051e\3\2")
        buf.write("\2\2\u051c\u051a\3\2\2\2\u051c\u051d\3\2\2\2\u051d\u00df")
        buf.write("\3\2\2\2\u051e\u051c\3\2\2\2\u051f\u0520\5\u009cO\2\u0520")
        buf.write("\u0521\5\u00e2r\2\u0521\u0524\3\2\2\2\u0522\u0524\7\"")
        buf.write("\2\2\u0523\u051f\3\2\2\2\u0523\u0522\3\2\2\2\u0524\u00e1")
        buf.write("\3\2\2\2\u0525\u0527\5\u00ceh\2\u0526\u0525\3\2\2\2\u0526")
        buf.write("\u0527\3\2\2\2\u0527\u0528\3\2\2\2\u0528\u0529\5\u00c8")
        buf.write("e\2\u0529\u00e3\3\2\2\2\u052a\u052c\5\u00e6t\2\u052b\u052d")
        buf.write("\7\u0087\2\2\u052c\u052b\3\2\2\2\u052c\u052d\3\2\2\2\u052d")
        buf.write("\u0554\3\2\2\2\u052e\u0530\5\u00eav\2\u052f\u0531\7\u0087")
        buf.write("\2\2\u0530\u052f\3\2\2\2\u0530\u0531\3\2\2\2\u0531\u0554")
        buf.write("\3\2\2\2\u0532\u0534\5\u00ecw\2\u0533\u0535\7\u0087\2")
        buf.write("\2\u0534\u0533\3\2\2\2\u0534\u0535\3\2\2\2\u0535\u0554")
        buf.write("\3\2\2\2\u0536\u0538\5\u00f6|\2\u0537\u0539\7\u0087\2")
        buf.write("\2\u0538\u0537\3\2\2\2\u0538\u0539\3\2\2\2\u0539\u0554")
        buf.write("\3\2\2\2\u053a\u053c\5\u0102\u0082\2\u053b\u053d\7\u0087")
        buf.write("\2\2\u053c\u053b\3\2\2\2\u053c\u053d\3\2\2\2\u053d\u0554")
        buf.write("\3\2\2\2\u053e\u0540\5x=\2\u053f\u0541\7\u0087\2\2\u0540")
        buf.write("\u053f\3\2\2\2\u0540\u0541\3\2\2\2\u0541\u0554\3\2\2\2")
        buf.write("\u0542\u0544\5z>\2\u0543\u0545\7\u0087\2\2\u0544\u0543")
        buf.write("\3\2\2\2\u0544\u0545\3\2\2\2\u0545\u0554\3\2\2\2\u0546")
        buf.write("\u0548\5r:\2\u0547\u0549\7\u0087\2\2\u0548\u0547\3\2\2")
        buf.write("\2\u0548\u0549\3\2\2\2\u0549\u0554\3\2\2\2\u054a\u054c")
        buf.write("\5t;\2\u054b\u054d\7\u0087\2\2\u054c\u054b\3\2\2\2\u054c")
        buf.write("\u054d\3\2\2\2\u054d\u0554\3\2\2\2\u054e\u0550\5\u0104")
        buf.write("\u0083\2\u054f\u0551\7\u0087\2\2\u0550\u054f\3\2\2\2\u0550")
        buf.write("\u0551\3\2\2\2\u0551\u0554\3\2\2\2\u0552\u0554\7\u0087")
        buf.write("\2\2\u0553\u052a\3\2\2\2\u0553\u052e\3\2\2\2\u0553\u0532")
        buf.write("\3\2\2\2\u0553\u0536\3\2\2\2\u0553\u053a\3\2\2\2\u0553")
        buf.write("\u053e\3\2\2\2\u0553\u0542\3\2\2\2\u0553\u0546\3\2\2\2")
        buf.write("\u0553\u054a\3\2\2\2\u0553\u054e\3\2\2\2\u0553\u0552\3")
        buf.write("\2\2\2\u0554\u00e5\3\2\2\2\u0555\u0556\5\u0122\u0092\2")
        buf.write("\u0556\u0557\7\u0092\2\2\u0557\u0558\5\u00e4s\2\u0558")
        buf.write("\u00e7\3\2\2\2\u0559\u055c\5\u010e\u0088\2\u055a\u055b")
        buf.write("\7\u00ad\2\2\u055b\u055d\5\u010e\u0088\2\u055c\u055a\3")
        buf.write("\2\2\2\u055c\u055d\3\2\2\2\u055d\u00e9\3\2\2\2\u055e\u0563")
        buf.write("\7\u0083\2\2\u055f\u0562\5\u008eH\2\u0560\u0562\5\u00e4")
        buf.write("s\2\u0561\u055f\3\2\2\2\u0561\u0560\3\2\2\2\u0562\u0565")
        buf.write("\3\2\2\2\u0563\u0561\3\2\2\2\u0563\u0564\3\2\2\2\u0564")
        buf.write("\u0566\3\2\2\2\u0565\u0563\3\2\2\2\u0566\u0567\7\u0084")
        buf.write("\2\2\u0567\u00eb\3\2\2\2\u0568\u0569\7\22\2\2\u0569\u056a")
        buf.write("\7\u0081\2\2\u056a\u056b\5\u0106\u0084\2\u056b\u056c\7")
        buf.write("\u0082\2\2\u056c\u056f\5\u00e4s\2\u056d\u056e\7\f\2\2")
        buf.write("\u056e\u0570\5\u00e4s\2\u056f\u056d\3\2\2\2\u056f\u0570")
        buf.write("\3\2\2\2\u0570\u0573\3\2\2\2\u0571\u0573\5\u00eex\2\u0572")
        buf.write("\u0568\3\2\2\2\u0572\u0571\3\2\2\2\u0573\u00ed\3\2\2\2")
        buf.write("\u0574\u0575\7\36\2\2\u0575\u0576\7\u0081\2\2\u0576\u0577")
        buf.write("\5\u0106\u0084\2\u0577\u0578\7\u0082\2\2\u0578\u0579\5")
        buf.write("\u00f0y\2\u0579\u00ef\3\2\2\2\u057a\u057e\7\u0083\2\2")
        buf.write("\u057b\u057d\5\u00f2z\2\u057c\u057b\3\2\2\2\u057d\u0580")
        buf.write("\3\2\2\2\u057e\u057c\3\2\2\2\u057e\u057f\3\2\2\2\u057f")
        buf.write("\u0581\3\2\2\2\u0580\u057e\3\2\2\2\u0581\u0582\7\u0084")
        buf.write("\2\2\u0582\u00f1\3\2\2\2\u0583\u0585\5\u00f4{\2\u0584")
        buf.write("\u0583\3\2\2\2\u0585\u0586\3\2\2\2\u0586\u0584\3\2\2\2")
        buf.write("\u0586\u0587\3\2\2\2\u0587\u0589\3\2\2\2\u0588\u058a\5")
        buf.write("\u00e4s\2\u0589\u0588\3\2\2\2\u058a\u058b\3\2\2\2\u058b")
        buf.write("\u0589\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u00f3\3\2\2\2")
        buf.write("\u058d\u0593\7\5\2\2\u058e\u0594\5\u00e8u\2\u058f\u0590")
        buf.write("\7\u0081\2\2\u0590\u0591\5\u00e8u\2\u0591\u0592\7\u0082")
        buf.write("\2\2\u0592\u0594\3\2\2\2\u0593\u058e\3\2\2\2\u0593\u058f")
        buf.write("\3\2\2\2\u0594\u0595\3\2\2\2\u0595\u0596\7\u0092\2\2\u0596")
        buf.write("\u059a\3\2\2\2\u0597\u0598\7\t\2\2\u0598\u059a\7\u0092")
        buf.write("\2\2\u0599\u058d\3\2\2\2\u0599\u0597\3\2\2\2\u059a\u00f5")
        buf.write("\3\2\2\2\u059b\u05a0\5\u00f8}\2\u059c\u05a0\5\u00fa~\2")
        buf.write("\u059d\u05a0\5\u00fc\177\2\u059e\u05a0\5\u0100\u0081\2")
        buf.write("\u059f\u059b\3\2\2\2\u059f\u059c\3\2\2\2\u059f\u059d\3")
        buf.write("\2\2\2\u059f\u059e\3\2\2\2\u05a0\u00f7\3\2\2\2\u05a1\u05a2")
        buf.write("\7$\2\2\u05a2\u05a3\7\u0081\2\2\u05a3\u05a4\5\u0106\u0084")
        buf.write("\2\u05a4\u05a5\7\u0082\2\2\u05a5\u05a6\5\u00e4s\2\u05a6")
        buf.write("\u00f9\3\2\2\2\u05a7\u05a8\7\n\2\2\u05a8\u05a9\5\u00e4")
        buf.write("s\2\u05a9\u05aa\7$\2\2\u05aa\u05ab\7\u0081\2\2\u05ab\u05ac")
        buf.write("\5\u0106\u0084\2\u05ac\u05ad\7\u0082\2\2\u05ad\u05ae\7")
        buf.write("\u0087\2\2\u05ae\u00fb\3\2\2\2\u05af\u05b0\7\20\2\2\u05b0")
        buf.write("\u05b2\7\u0081\2\2\u05b1\u05b3\5\u00fe\u0080\2\u05b2\u05b1")
        buf.write("\3\2\2\2\u05b2\u05b3\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4")
        buf.write("\u05b6\7\u0087\2\2\u05b5\u05b7\5\u0106\u0084\2\u05b6\u05b5")
        buf.write("\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05b8\3\2\2\2\u05b8")
        buf.write("\u05ba\7\u0087\2\2\u05b9\u05bb\5\u0104\u0083\2\u05ba\u05b9")
        buf.write("\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb\u05bc\3\2\2\2\u05bc")
        buf.write("\u05bd\7\u0082\2\2\u05bd\u05be\5\u00e4s\2\u05be\u00fd")
        buf.write("\3\2\2\2\u05bf\u05c0\5\u009cO\2\u05c0\u05c1\5\u00a0Q\2")
        buf.write("\u05c1\u05c4\3\2\2\2\u05c2\u05c4\5\u0104\u0083\2\u05c3")
        buf.write("\u05bf\3\2\2\2\u05c3\u05c2\3\2\2\2\u05c4\u00ff\3\2\2\2")
        buf.write("\u05c5\u05c6\7\20\2\2\u05c6\u05c7\7\u0081\2\2\u05c7\u05c8")
        buf.write("\5p9\2\u05c8\u05ca\7\60\2\2\u05c9\u05cb\5\u0106\u0084")
        buf.write("\2\u05ca\u05c9\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cc")
        buf.write("\3\2\2\2\u05cc\u05cd\7\u0082\2\2\u05cd\u05ce\5\u00e4s")
        buf.write("\2\u05ce\u0101\3\2\2\2\u05cf\u05d0\7\21\2\2\u05d0\u05d8")
        buf.write("\5\u0122\u0092\2\u05d1\u05d8\7\b\2\2\u05d2\u05d8\7\4\2")
        buf.write("\2\u05d3\u05d5\7\30\2\2\u05d4\u05d6\5\u0106\u0084\2\u05d5")
        buf.write("\u05d4\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\u05d8\3\2\2\2")
        buf.write("\u05d7\u05cf\3\2\2\2\u05d7\u05d1\3\2\2\2\u05d7\u05d2\3")
        buf.write("\2\2\2\u05d7\u05d3\3\2\2\2\u05d8\u0103\3\2\2\2\u05d9\u05de")
        buf.write("\5\u0106\u0084\2\u05da\u05db\7\u0088\2\2\u05db\u05dd\5")
        buf.write("\u0106\u0084\2\u05dc\u05da\3\2\2\2\u05dd\u05e0\3\2\2\2")
        buf.write("\u05de\u05dc\3\2\2\2\u05de\u05df\3\2\2\2\u05df\u0105\3")
        buf.write("\2\2\2\u05e0\u05de\3\2\2\2\u05e1\u05e2\b\u0084\1\2\u05e2")
        buf.write("\u05ec\5\u010a\u0086\2\u05e3\u05e4\7\u0081\2\2\u05e4\u05e5")
        buf.write("\5\u00eav\2\u05e5\u05e6\7\u0082\2\2\u05e6\u05ec\3\2\2")
        buf.write("\2\u05e7\u05e8\5\u0110\u0089\2\u05e8\u05e9\5\u0108\u0085")
        buf.write("\2\u05e9\u05ea\5\u0106\u0084\3\u05ea\u05ec\3\2\2\2\u05eb")
        buf.write("\u05e1\3\2\2\2\u05eb\u05e3\3\2\2\2\u05eb\u05e7\3\2\2\2")
        buf.write("\u05ec\u0619\3\2\2\2\u05ed\u05ee\f\17\2\2\u05ee\u05ef")
        buf.write("\t\f\2\2\u05ef\u0618\5\u0106\u0084\20\u05f0\u05f1\f\16")
        buf.write("\2\2\u05f1\u05f2\t\r\2\2\u05f2\u0618\5\u0106\u0084\17")
        buf.write("\u05f3\u05f8\f\r\2\2\u05f4\u05f5\7\u008e\2\2\u05f5\u05f9")
        buf.write("\7\u008e\2\2\u05f6\u05f7\7\u008d\2\2\u05f7\u05f9\7\u008d")
        buf.write("\2\2\u05f8\u05f4\3\2\2\2\u05f8\u05f6\3\2\2\2\u05f9\u05fa")
        buf.write("\3\2\2\2\u05fa\u0618\5\u0106\u0084\16\u05fb\u05fc\f\f")
        buf.write("\2\2\u05fc\u05fd\t\16\2\2\u05fd\u0618\5\u0106\u0084\r")
        buf.write("\u05fe\u05ff\f\13\2\2\u05ff\u0600\t\17\2\2\u0600\u0618")
        buf.write("\5\u0106\u0084\f\u0601\u0602\f\n\2\2\u0602\u0603\7\u009f")
        buf.write("\2\2\u0603\u0618\5\u0106\u0084\13\u0604\u0605\f\t\2\2")
        buf.write("\u0605\u0606\7\u00a1\2\2\u0606\u0618\5\u0106\u0084\n\u0607")
        buf.write("\u0608\f\b\2\2\u0608\u0609\7\u00a0\2\2\u0609\u0618\5\u0106")
        buf.write("\u0084\t\u060a\u060b\f\7\2\2\u060b\u060c\7\u0097\2\2\u060c")
        buf.write("\u0618\5\u0106\u0084\b\u060d\u060e\f\6\2\2\u060e\u060f")
        buf.write("\7\u0098\2\2\u060f\u0618\5\u0106\u0084\7\u0610\u0611\f")
        buf.write("\5\2\2\u0611\u0613\7\u0091\2\2\u0612\u0614\5\u0106\u0084")
        buf.write("\2\u0613\u0612\3\2\2\2\u0613\u0614\3\2\2\2\u0614\u0615")
        buf.write("\3\2\2\2\u0615\u0616\7\u0092\2\2\u0616\u0618\5\u0106\u0084")
        buf.write("\6\u0617\u05ed\3\2\2\2\u0617\u05f0\3\2\2\2\u0617\u05f3")
        buf.write("\3\2\2\2\u0617\u05fb\3\2\2\2\u0617\u05fe\3\2\2\2\u0617")
        buf.write("\u0601\3\2\2\2\u0617\u0604\3\2\2\2\u0617\u0607\3\2\2\2")
        buf.write("\u0617\u060a\3\2\2\2\u0617\u060d\3\2\2\2\u0617\u0610\3")
        buf.write("\2\2\2\u0618\u061b\3\2\2\2\u0619\u0617\3\2\2\2\u0619\u061a")
        buf.write("\3\2\2\2\u061a\u0107\3\2\2\2\u061b\u0619\3\2\2\2\u061c")
        buf.write("\u061d\t\20\2\2\u061d\u0109\3\2\2\2\u061e\u0628\5\u0110")
        buf.write("\u0089\2\u061f\u0620\7\u0081\2\2\u0620\u0621\5\u00d8m")
        buf.write("\2\u0621\u0622\7\u0082\2\2\u0622\u0625\3\2\2\2\u0623\u0626")
        buf.write("\5\u010a\u0086\2\u0624\u0626\5\u010c\u0087\2\u0625\u0623")
        buf.write("\3\2\2\2\u0625\u0624\3\2\2\2\u0626\u0628\3\2\2\2\u0627")
        buf.write("\u061e\3\2\2\2\u0627\u061f\3\2\2\2\u0628\u010b\3\2\2\2")
        buf.write("\u0629\u062d\5\u0106\u0084\2\u062a\u062d\5\u00d2j\2\u062b")
        buf.write("\u062d\5\u00d4k\2\u062c\u0629\3\2\2\2\u062c\u062a\3\2")
        buf.write("\2\2\u062c\u062b\3\2\2\2\u062d\u010d\3\2\2\2\u062e\u0631")
        buf.write("\5\u0122\u0092\2\u062f\u0631\5\u011e\u0090\2\u0630\u062e")
        buf.write("\3\2\2\2\u0630\u062f\3\2\2\2\u0631\u010f\3\2\2\2\u0632")
        buf.write("\u0641\5\u0114\u008b\2\u0633\u0639\7\33\2\2\u0634\u063a")
        buf.write("\5\u0110\u0089\2\u0635\u0636\7\u0081\2\2\u0636\u0637\5")
        buf.write("\u00b8]\2\u0637\u0638\7\u0082\2\2\u0638\u063a\3\2\2\2")
        buf.write("\u0639\u0634\3\2\2\2\u0639\u0635\3\2\2\2\u063a\u0641\3")
        buf.write("\2\2\2\u063b\u063c\t\21\2\2\u063c\u0641\5\u0110\u0089")
        buf.write("\2\u063d\u063e\5\u0112\u008a\2\u063e\u063f\5\u010a\u0086")
        buf.write("\2\u063f\u0641\3\2\2\2\u0640\u0632\3\2\2\2\u0640\u0633")
        buf.write("\3\2\2\2\u0640\u063b\3\2\2\2\u0640\u063d\3\2\2\2\u0641")
        buf.write("\u0111\3\2\2\2\u0642\u0643\t\22\2\2\u0643\u0113\3\2\2")
        buf.write("\2\u0644\u0645\b\u008b\1\2\u0645\u0649\5\u011c\u008f\2")
        buf.write("\u0646\u0648\5\u0116\u008c\2\u0647\u0646\3\2\2\2\u0648")
        buf.write("\u064b\3\2\2\2\u0649\u0647\3\2\2\2\u0649\u064a\3\2\2\2")
        buf.write("\u064a\u0657\3\2\2\2\u064b\u0649\3\2\2\2\u064c\u064d\f")
        buf.write("\3\2\2\u064d\u064e\t\23\2\2\u064e\u0652\5\u0122\u0092")
        buf.write("\2\u064f\u0651\5\u0116\u008c\2\u0650\u064f\3\2\2\2\u0651")
        buf.write("\u0654\3\2\2\2\u0652\u0650\3\2\2\2\u0652\u0653\3\2\2\2")
        buf.write("\u0653\u0656\3\2\2\2\u0654\u0652\3\2\2\2\u0655\u064c\3")
        buf.write("\2\2\2\u0656\u0659\3\2\2\2\u0657\u0655\3\2\2\2\u0657\u0658")
        buf.write("\3\2\2\2\u0658\u0115\3\2\2\2\u0659\u0657\3\2\2\2\u065a")
        buf.write("\u065b\7\u0085\2\2\u065b\u065c\5\u0106\u0084\2\u065c\u065d")
        buf.write("\7\u0086\2\2\u065d\u066d\3\2\2\2\u065e\u0660\7\u0081\2")
        buf.write("\2\u065f\u0661\5\u0118\u008d\2\u0660\u065f\3\2\2\2\u0660")
        buf.write("\u0661\3\2\2\2\u0661\u0662\3\2\2\2\u0662\u066d\7\u0082")
        buf.write("\2\2\u0663\u0666\7\u0081\2\2\u0664\u0667\7\u0088\2\2\u0665")
        buf.write("\u0667\n\24\2\2\u0666\u0664\3\2\2\2\u0666\u0665\3\2\2")
        buf.write("\2\u0667\u0668\3\2\2\2\u0668\u0666\3\2\2\2\u0668\u0669")
        buf.write("\3\2\2\2\u0669\u066a\3\2\2\2\u066a\u066d\7\u0082\2\2\u066b")
        buf.write("\u066d\t\21\2\2\u066c\u065a\3\2\2\2\u066c\u065e\3\2\2")
        buf.write("\2\u066c\u0663\3\2\2\2\u066c\u066b\3\2\2\2\u066d\u0117")
        buf.write("\3\2\2\2\u066e\u0673\5\u011a\u008e\2\u066f\u0670\7\u0088")
        buf.write("\2\2\u0670\u0672\5\u011a\u008e\2\u0671\u066f\3\2\2\2\u0672")
        buf.write("\u0675\3\2\2\2\u0673\u0671\3\2\2\2\u0673\u0674\3\2\2\2")
        buf.write("\u0674\u0119\3\2\2\2\u0675\u0673\3\2\2\2\u0676\u0679\5")
        buf.write("\u0106\u0084\2\u0677\u0679\5\u00b8]\2\u0678\u0676\3\2")
        buf.write("\2\2\u0678\u0677\3\2\2\2\u0679\u011b\3\2\2\2\u067a\u068a")
        buf.write("\5\u0122\u0092\2\u067b\u068a\5\u011e\u0090\2\u067c\u068a")
        buf.write("\5\u0120\u0091\2\u067d\u067e\7\u0081\2\2\u067e\u067f\5")
        buf.write("\u0106\u0084\2\u067f\u0680\7\u0082\2\2\u0680\u068a\3\2")
        buf.write("\2\2\u0681\u068a\5^\60\2\u0682\u068a\5h\65\2\u0683\u068a")
        buf.write("\5l\67\2\u0684\u068a\5n8\2\u0685\u068a\5P)\2\u0686\u068a")
        buf.write("\5T+\2\u0687\u068a\5V,\2\u0688\u068a\5\\/\2\u0689\u067a")
        buf.write("\3\2\2\2\u0689\u067b\3\2\2\2\u0689\u067c\3\2\2\2\u0689")
        buf.write("\u067d\3\2\2\2\u0689\u0681\3\2\2\2\u0689\u0682\3\2\2\2")
        buf.write("\u0689\u0683\3\2\2\2\u0689\u0684\3\2\2\2\u0689\u0685\3")
        buf.write("\2\2\2\u0689\u0686\3\2\2\2\u0689\u0687\3\2\2\2\u0689\u0688")
        buf.write("\3\2\2\2\u068a\u011d\3\2\2\2\u068b\u069e\7\u00b1\2\2\u068c")
        buf.write("\u069e\7\u00b2\2\2\u068d\u069e\7\u00b3\2\2\u068e\u0690")
        buf.write("\t\r\2\2\u068f\u068e\3\2\2\2\u068f\u0690\3\2\2\2\u0690")
        buf.write("\u0691\3\2\2\2\u0691\u069e\7\u00b4\2\2\u0692\u0694\t\r")
        buf.write("\2\2\u0693\u0692\3\2\2\2\u0693\u0694\3\2\2\2\u0694\u0695")
        buf.write("\3\2\2\2\u0695\u069e\7\u00b5\2\2\u0696\u069e\7\u00ae\2")
        buf.write("\2\u0697\u069e\7\62\2\2\u0698\u069e\7\64\2\2\u0699\u069e")
        buf.write("\7;\2\2\u069a\u069e\7\63\2\2\u069b\u069e\7(\2\2\u069c")
        buf.write("\u069e\7)\2\2\u069d\u068b\3\2\2\2\u069d\u068c\3\2\2\2")
        buf.write("\u069d\u068d\3\2\2\2\u069d\u068f\3\2\2\2\u069d\u0693\3")
        buf.write("\2\2\2\u069d\u0696\3\2\2\2\u069d\u0697\3\2\2\2\u069d\u0698")
        buf.write("\3\2\2\2\u069d\u0699\3\2\2\2\u069d\u069a\3\2\2\2\u069d")
        buf.write("\u069b\3\2\2\2\u069d\u069c\3\2\2\2\u069e\u011f\3\2\2\2")
        buf.write("\u069f\u06a3\7\u00af\2\2\u06a0\u06a2\t\25\2\2\u06a1\u06a0")
        buf.write("\3\2\2\2\u06a2\u06a5\3\2\2\2\u06a3\u06a1\3\2\2\2\u06a3")
        buf.write("\u06a4\3\2\2\2\u06a4\u06a6\3\2\2\2\u06a5\u06a3\3\2\2\2")
        buf.write("\u06a6\u06a8\7\u00be\2\2\u06a7\u069f\3\2\2\2\u06a8\u06a9")
        buf.write("\3\2\2\2\u06a9\u06a7\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa")
        buf.write("\u0121\3\2\2\2\u06ab\u06ac\t\26\2\2\u06ac\u0123\3\2\2")
        buf.write("\2\u06ad\u06ae\7\u00b0\2\2\u06ae\u06af\7\u00bc\2\2\u06af")
        buf.write("\u06b0\7\u00bb\2\2\u06b0\u0125\3\2\2\2\u00e0\u0129\u013b")
        buf.write("\u0145\u014b\u0151\u0154\u0157\u015f\u0166\u0169\u016c")
        buf.write("\u0174\u0177\u017a\u0184\u018e\u0196\u019b\u01a4\u01aa")
        buf.write("\u01ac\u01b8\u01c2\u01ca\u01cd\u01d0\u01d9\u01f0\u01f7")
        buf.write("\u01fa\u0200\u0209\u020f\u0211\u021a\u021c\u0225\u0229")
        buf.write("\u0232\u0234\u023d\u0241\u0244\u024c\u0250\u0252\u0255")
        buf.write("\u025b\u025f\u0265\u0273\u027a\u0280\u0283\u0287\u028d")
        buf.write("\u0291\u0299\u029c\u02a3\u02af\u02b3\u02b5\u02c1\u02c3")
        buf.write("\u02cf\u02d1\u02d6\u02dc\u02df\u02e5\u02e9\u02ec\u02ef")
        buf.write("\u02fa\u0300\u0302\u0305\u030d\u0312\u0318\u0321\u0326")
        buf.write("\u0328\u033e\u0345\u034a\u0362\u0367\u036c\u0370\u0374")
        buf.write("\u0378\u0381\u0388\u038f\u0395\u0398\u039c\u03a4\u03a7")
        buf.write("\u03ab\u03b3\u03b8\u03bf\u03c8\u03cc\u03d8\u03da\u03e4")
        buf.write("\u03ef\u03f5\u03fa\u0400\u0404\u0409\u0413\u0415\u041d")
        buf.write("\u042b\u043e\u0440\u044c\u0451\u0455\u0459\u045d\u0464")
        buf.write("\u046a\u0476\u047d\u0481\u0486\u048a\u0491\u0496\u049c")
        buf.write("\u049f\u04a3\u04a7\u04ae\u04b2\u04b5\u04be\u04c3\u04c8")
        buf.write("\u04ca\u04d6\u04da\u04dc\u04e5\u04e9\u04ed\u04f0\u04f4")
        buf.write("\u04f8\u04fe\u0502\u0507\u0509\u050d\u0512\u0515\u051c")
        buf.write("\u0523\u0526\u052c\u0530\u0534\u0538\u053c\u0540\u0544")
        buf.write("\u0548\u054c\u0550\u0553\u055c\u0561\u0563\u056f\u0572")
        buf.write("\u057e\u0586\u058b\u0593\u0599\u059f\u05b2\u05b6\u05ba")
        buf.write("\u05c3\u05ca\u05d5\u05d7\u05de\u05eb\u05f8\u0613\u0617")
        buf.write("\u0619\u0625\u0627\u062c\u0630\u0639\u0640\u0649\u0652")
        buf.write("\u0657\u0660\u0666\u0668\u066c\u0673\u0678\u0689\u068f")
        buf.write("\u0693\u069d\u06a3\u06a9")
        return buf.getvalue()


class ObjectiveCParser ( Parser ):

    grammarFileName = "ObjectiveCParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'auto'", "'break'", "'case'", "'char'", 
                     "'const'", "'continue'", "'default'", "'do'", "'double'", 
                     "<INVALID>", "'enum'", "'extern'", "'float'", "'for'", 
                     "'goto'", "<INVALID>", "'inline'", "'int'", "'long'", 
                     "'register'", "'restrict'", "'return'", "'short'", 
                     "'signed'", "'sizeof'", "'static'", "'struct'", "'switch'", 
                     "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", 
                     "'while'", "'_Bool'", "'_Complex'", "'_Imaginery'", 
                     "'true'", "'false'", "'BOOL'", "'Class'", "'bycopy'", 
                     "'byref'", "'id'", "'IMP'", "'in'", "'inout'", "'nil'", 
                     "'NO'", "'NULL'", "'oneway'", "'out'", "'Protocol'", 
                     "'SEL'", "'self'", "'super'", "'YES'", "'@autoreleasepool'", 
                     "'@catch'", "'@class'", "'@dynamic'", "'@encode'", 
                     "'@end'", "'@finally'", "'@implementation'", "'@interface'", 
                     "'@import'", "<INVALID>", "'@package'", "'@protocol'", 
                     "'@optional'", "'@private'", "'@property'", "'@protected'", 
                     "'@public'", "'@required'", "'@selector'", "'@synchronized'", 
                     "'@synthesize'", "'@throw'", "'@try'", "'atomic'", 
                     "'nonatomic'", "'retain'", "'__attribute__'", "'__autoreleasing'", 
                     "'__block'", "'__bridge'", "'__bridge_retained'", "'__bridge_transfer'", 
                     "'__covariant'", "'__contravariant'", "'__deprecated'", 
                     "'__kindof'", "'__strong'", "<INVALID>", "'__unsafe_unretained'", 
                     "'__unused'", "'__weak'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'null_resettable'", "'NS_INLINE'", "'NS_ENUM'", 
                     "'NS_OPTIONS'", "'assign'", "'copy'", "'getter'", "'setter'", 
                     "'strong'", "'readonly'", "'readwrite'", "'weak'", 
                     "'unsafe_unretained'", "'IBOutlet'", "'IBOutletCollection'", 
                     "'IBInspectable'", "'IB_DESIGNABLE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'__TVOS_PROHIBITED'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", "'->'", 
                     "'@'", "'='", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'~'", "'?'", "':'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'++'", "'--'", 
                     "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", 
                     "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
                     "'%='", "'<<='", "'>>='", "'...'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'\\'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'defined'", 
                     "<INVALID>", "'elif'", "<INVALID>", "'undef'", "'ifdef'", 
                     "'ifndef'", "'endif'" ]

    symbolicNames = [ "<INVALID>", "AUTO", "BREAK", "CASE", "CHAR", "CONST", 
                      "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", 
                      "EXTERN", "FLOAT", "FOR", "GOTO", "IF", "INLINE", 
                      "INT", "LONG", "REGISTER", "RESTRICT", "RETURN", "SHORT", 
                      "SIGNED", "SIZEOF", "STATIC", "STRUCT", "SWITCH", 
                      "TYPEDEF", "UNION", "UNSIGNED", "VOID", "VOLATILE", 
                      "WHILE", "BOOL_", "COMPLEX", "IMAGINERY", "TRUE", 
                      "FALSE", "BOOL", "Class", "BYCOPY", "BYREF", "ID", 
                      "IMP", "IN", "INOUT", "NIL", "NO", "NULL", "ONEWAY", 
                      "OUT", "PROTOCOL_", "SEL", "SELF", "SUPER", "YES", 
                      "AUTORELEASEPOOL", "CATCH", "CLASS", "DYNAMIC", "ENCODE", 
                      "END", "FINALLY", "IMPLEMENTATION", "INTERFACE", "IMPORT", 
                      "INCLUDE", "PACKAGE", "PROTOCOL", "OPTIONAL", "PRIVATE", 
                      "PROPERTY", "PROTECTED", "PUBLIC", "REQUIRED", "SELECTOR", 
                      "SYNCHRONIZED", "SYNTHESIZE", "THROW", "TRY", "ATOMIC", 
                      "NONATOMIC", "RETAIN", "ATTRIBUTE", "AUTORELEASING_QUALIFIER", 
                      "BLOCK", "BRIDGE", "BRIDGE_RETAINED", "BRIDGE_TRANSFER", 
                      "COVARIANT", "CONTRAVARIANT", "DEPRECATED", "KINDOF", 
                      "STRONG_QUALIFIER", "TYPEOF", "UNSAFE_UNRETAINED_QUALIFIER", 
                      "UNUSED", "WEAK_QUALIFIER", "NULL_UNSPECIFIED", "NULLABLE", 
                      "NONNULL", "NULL_RESETTABLE", "NS_INLINE", "NS_ENUM", 
                      "NS_OPTIONS", "ASSIGN", "COPY", "GETTER", "SETTER", 
                      "STRONG", "READONLY", "READWRITE", "WEAK", "UNSAFE_UNRETAINED", 
                      "IB_OUTLET", "IB_OUTLET_COLLECTION", "IB_INSPECTABLE", 
                      "IB_DESIGNABLE", "NS_ASSUME_NONNULL_BEGIN", "NS_ASSUME_NONNULL_END", 
                      "EXTERN_SUFFIX", "IOS_SUFFIX", "MAC_SUFFIX", "TVOS_PROHIBITED", 
                      "IDENTIFIER", "LP", "RP", "LBRACE", "RBRACE", "LBRACK", 
                      "RBRACK", "SEMI", "COMMA", "DOT", "STRUCTACCESS", 
                      "AT", "ASSIGNMENT", "GT", "LT", "BANG", "TILDE", "QUESTION", 
                      "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", 
                      "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", 
                      "BITOR", "BITXOR", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", 
                      "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
                      "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
                      "ELIPSIS", "CHARACTER_LITERAL", "STRING_START", "INCLUDE_START", 
                      "HEX_LITERAL", "OCTAL_LITERAL", "BINARY_LITERAL", 
                      "DECIMAL_LITERAL", "FLOATING_POINT_LITERAL", "WS", 
                      "MULTI_COMMENT", "SINGLE_COMMENT", "BACKSLASH", "SHARP", 
                      "INCLUDE_END", "INCLUDE_VALUE", "STRING_NEWLINE", 
                      "STRING_END", "STRING_VALUE", "DIRECTIVE_IMPORT", 
                      "DIRECTIVE_INCLUDE", "DIRECTIVE_PRAGMA", "DIRECTIVE_DEFINE", 
                      "DIRECTIVE_DEFINED", "DIRECTIVE_IF", "DIRECTIVE_ELIF", 
                      "DIRECTIVE_ELSE", "DIRECTIVE_UNDEF", "DIRECTIVE_IFDEF", 
                      "DIRECTIVE_IFNDEF", "DIRECTIVE_ENDIF", "DIRECTIVE_TRUE", 
                      "DIRECTIVE_FALSE", "DIRECTIVE_ERROR", "DIRECTIVE_WARNING", 
                      "DIRECTIVE_BANG", "DIRECTIVE_LP", "DIRECTIVE_RP", 
                      "DIRECTIVE_EQUAL", "DIRECTIVE_NOTEQUAL", "DIRECTIVE_AND", 
                      "DIRECTIVE_OR", "DIRECTIVE_LT", "DIRECTIVE_GT", "DIRECTIVE_LE", 
                      "DIRECTIVE_GE", "DIRECTIVE_STRING", "DIRECTIVE_ID", 
                      "DIRECTIVE_DECIMAL_LITERAL", "DIRECTIVE_FLOAT", "DIRECTIVE_NEWLINE", 
                      "DIRECTIVE_MULTI_COMMENT", "DIRECTIVE_SINGLE_COMMENT", 
                      "DIRECTIVE_BACKSLASH_NEWLINE", "DIRECTIVE_TEXT_NEWLINE", 
                      "DIRECTIVE_TEXT" ]

    RULE_translationUnit = 0
    RULE_topLevelDeclaration = 1
    RULE_importDeclaration = 2
    RULE_includeDeclaration = 3
    RULE_classInterface = 4
    RULE_categoryInterface = 5
    RULE_classImplementation = 6
    RULE_categoryImplementation = 7
    RULE_genericTypeSpecifier = 8
    RULE_protocolDeclaration = 9
    RULE_protocolDeclarationSection = 10
    RULE_protocolDeclarationList = 11
    RULE_classDeclarationList = 12
    RULE_protocolList = 13
    RULE_propertyDeclaration = 14
    RULE_propertyAttributesList = 15
    RULE_propertyAttribute = 16
    RULE_protocolName = 17
    RULE_instanceVariables = 18
    RULE_visibilitySection = 19
    RULE_accessModifier = 20
    RULE_interfaceDeclarationList = 21
    RULE_classMethodDeclaration = 22
    RULE_instanceMethodDeclaration = 23
    RULE_methodDeclaration = 24
    RULE_implementationDefinitionList = 25
    RULE_classMethodDefinition = 26
    RULE_instanceMethodDefinition = 27
    RULE_methodDefinition = 28
    RULE_methodSelector = 29
    RULE_keywordDeclarator = 30
    RULE_selector = 31
    RULE_methodType = 32
    RULE_propertyImplementation = 33
    RULE_propertySynthesizeList = 34
    RULE_propertySynthesizeItem = 35
    RULE_blockType = 36
    RULE_genericsSpecifier = 37
    RULE_typeSpecifierWithPrefixes = 38
    RULE_dictionaryExpression = 39
    RULE_dictionaryPair = 40
    RULE_arrayExpression = 41
    RULE_boxExpression = 42
    RULE_blockParameters = 43
    RULE_typeVariableDeclaratorOrName = 44
    RULE_blockExpression = 45
    RULE_messageExpression = 46
    RULE_receiver = 47
    RULE_messageSelector = 48
    RULE_keywordArgument = 49
    RULE_keywordArgumentType = 50
    RULE_selectorExpression = 51
    RULE_selectorName = 52
    RULE_protocolExpression = 53
    RULE_encodeExpression = 54
    RULE_typeVariableDeclarator = 55
    RULE_throwStatement = 56
    RULE_tryBlock = 57
    RULE_catchStatement = 58
    RULE_synchronizedStatement = 59
    RULE_autoreleaseStatement = 60
    RULE_functionDeclaration = 61
    RULE_functionDefinition = 62
    RULE_functionSignature = 63
    RULE_attribute = 64
    RULE_attributeName = 65
    RULE_attributeParameters = 66
    RULE_attributeParameterList = 67
    RULE_attributeParameter = 68
    RULE_attributeParameterAssignment = 69
    RULE_declaration = 70
    RULE_functionCallExpression = 71
    RULE_enumDeclaration = 72
    RULE_varDeclaration = 73
    RULE_typedefDeclaration = 74
    RULE_typeDeclaratorList = 75
    RULE_typeDeclarator = 76
    RULE_declarationSpecifiers = 77
    RULE_attributeSpecifier = 78
    RULE_initDeclaratorList = 79
    RULE_initDeclarator = 80
    RULE_structOrUnionSpecifier = 81
    RULE_fieldDeclaration = 82
    RULE_specifierQualifierList = 83
    RULE_ibOutletQualifier = 84
    RULE_arcBehaviourSpecifier = 85
    RULE_nullabilitySpecifier = 86
    RULE_storageClassSpecifier = 87
    RULE_typePrefix = 88
    RULE_typeQualifier = 89
    RULE_protocolQualifier = 90
    RULE_typeSpecifier = 91
    RULE_typeofExpression = 92
    RULE_fieldDeclaratorList = 93
    RULE_fieldDeclarator = 94
    RULE_enumSpecifier = 95
    RULE_enumeratorList = 96
    RULE_enumerator = 97
    RULE_enumeratorIdentifier = 98
    RULE_directDeclarator = 99
    RULE_declaratorSuffix = 100
    RULE_parameterList = 101
    RULE_pointer = 102
    RULE_macro = 103
    RULE_arrayInitializer = 104
    RULE_structInitializer = 105
    RULE_initializerList = 106
    RULE_typeName = 107
    RULE_abstractDeclarator = 108
    RULE_abstractDeclaratorSuffix = 109
    RULE_parameterDeclarationList = 110
    RULE_parameterDeclaration = 111
    RULE_declarator = 112
    RULE_statement = 113
    RULE_labeledStatement = 114
    RULE_rangeExpression = 115
    RULE_compoundStatement = 116
    RULE_selectionStatement = 117
    RULE_switchStatement = 118
    RULE_switchBlock = 119
    RULE_switchSection = 120
    RULE_switchLabel = 121
    RULE_iterationStatement = 122
    RULE_whileStatement = 123
    RULE_doStatement = 124
    RULE_forStatement = 125
    RULE_forLoopInitializer = 126
    RULE_forInStatement = 127
    RULE_jumpStatement = 128
    RULE_expressions = 129
    RULE_expression = 130
    RULE_assignmentOperator = 131
    RULE_castExpression = 132
    RULE_initializer = 133
    RULE_constantExpression = 134
    RULE_unaryExpression = 135
    RULE_unaryOperator = 136
    RULE_postfixExpression = 137
    RULE_postfix = 138
    RULE_argumentExpressionList = 139
    RULE_argumentExpression = 140
    RULE_primaryExpression = 141
    RULE_constant = 142
    RULE_stringLiteral = 143
    RULE_identifier = 144
    RULE_includeText = 145

    ruleNames =  [ "translationUnit", "topLevelDeclaration", "importDeclaration", 
                   "includeDeclaration", "classInterface", "categoryInterface", 
                   "classImplementation", "categoryImplementation", "genericTypeSpecifier", 
                   "protocolDeclaration", "protocolDeclarationSection", 
                   "protocolDeclarationList", "classDeclarationList", "protocolList", 
                   "propertyDeclaration", "propertyAttributesList", "propertyAttribute", 
                   "protocolName", "instanceVariables", "visibilitySection", 
                   "accessModifier", "interfaceDeclarationList", "classMethodDeclaration", 
                   "instanceMethodDeclaration", "methodDeclaration", "implementationDefinitionList", 
                   "classMethodDefinition", "instanceMethodDefinition", 
                   "methodDefinition", "methodSelector", "keywordDeclarator", 
                   "selector", "methodType", "propertyImplementation", "propertySynthesizeList", 
                   "propertySynthesizeItem", "blockType", "genericsSpecifier", 
                   "typeSpecifierWithPrefixes", "dictionaryExpression", 
                   "dictionaryPair", "arrayExpression", "boxExpression", 
                   "blockParameters", "typeVariableDeclaratorOrName", "blockExpression", 
                   "messageExpression", "receiver", "messageSelector", "keywordArgument", 
                   "keywordArgumentType", "selectorExpression", "selectorName", 
                   "protocolExpression", "encodeExpression", "typeVariableDeclarator", 
                   "throwStatement", "tryBlock", "catchStatement", "synchronizedStatement", 
                   "autoreleaseStatement", "functionDeclaration", "functionDefinition", 
                   "functionSignature", "attribute", "attributeName", "attributeParameters", 
                   "attributeParameterList", "attributeParameter", "attributeParameterAssignment", 
                   "declaration", "functionCallExpression", "enumDeclaration", 
                   "varDeclaration", "typedefDeclaration", "typeDeclaratorList", 
                   "typeDeclarator", "declarationSpecifiers", "attributeSpecifier", 
                   "initDeclaratorList", "initDeclarator", "structOrUnionSpecifier", 
                   "fieldDeclaration", "specifierQualifierList", "ibOutletQualifier", 
                   "arcBehaviourSpecifier", "nullabilitySpecifier", "storageClassSpecifier", 
                   "typePrefix", "typeQualifier", "protocolQualifier", "typeSpecifier", 
                   "typeofExpression", "fieldDeclaratorList", "fieldDeclarator", 
                   "enumSpecifier", "enumeratorList", "enumerator", "enumeratorIdentifier", 
                   "directDeclarator", "declaratorSuffix", "parameterList", 
                   "pointer", "macro", "arrayInitializer", "structInitializer", 
                   "initializerList", "typeName", "abstractDeclarator", 
                   "abstractDeclaratorSuffix", "parameterDeclarationList", 
                   "parameterDeclaration", "declarator", "statement", "labeledStatement", 
                   "rangeExpression", "compoundStatement", "selectionStatement", 
                   "switchStatement", "switchBlock", "switchSection", "switchLabel", 
                   "iterationStatement", "whileStatement", "doStatement", 
                   "forStatement", "forLoopInitializer", "forInStatement", 
                   "jumpStatement", "expressions", "expression", "assignmentOperator", 
                   "castExpression", "initializer", "constantExpression", 
                   "unaryExpression", "unaryOperator", "postfixExpression", 
                   "postfix", "argumentExpressionList", "argumentExpression", 
                   "primaryExpression", "constant", "stringLiteral", "identifier", 
                   "includeText" ]

    EOF = Token.EOF
    AUTO=1
    BREAK=2
    CASE=3
    CHAR=4
    CONST=5
    CONTINUE=6
    DEFAULT=7
    DO=8
    DOUBLE=9
    ELSE=10
    ENUM=11
    EXTERN=12
    FLOAT=13
    FOR=14
    GOTO=15
    IF=16
    INLINE=17
    INT=18
    LONG=19
    REGISTER=20
    RESTRICT=21
    RETURN=22
    SHORT=23
    SIGNED=24
    SIZEOF=25
    STATIC=26
    STRUCT=27
    SWITCH=28
    TYPEDEF=29
    UNION=30
    UNSIGNED=31
    VOID=32
    VOLATILE=33
    WHILE=34
    BOOL_=35
    COMPLEX=36
    IMAGINERY=37
    TRUE=38
    FALSE=39
    BOOL=40
    Class=41
    BYCOPY=42
    BYREF=43
    ID=44
    IMP=45
    IN=46
    INOUT=47
    NIL=48
    NO=49
    NULL=50
    ONEWAY=51
    OUT=52
    PROTOCOL_=53
    SEL=54
    SELF=55
    SUPER=56
    YES=57
    AUTORELEASEPOOL=58
    CATCH=59
    CLASS=60
    DYNAMIC=61
    ENCODE=62
    END=63
    FINALLY=64
    IMPLEMENTATION=65
    INTERFACE=66
    IMPORT=67
    INCLUDE=68
    PACKAGE=69
    PROTOCOL=70
    OPTIONAL=71
    PRIVATE=72
    PROPERTY=73
    PROTECTED=74
    PUBLIC=75
    REQUIRED=76
    SELECTOR=77
    SYNCHRONIZED=78
    SYNTHESIZE=79
    THROW=80
    TRY=81
    ATOMIC=82
    NONATOMIC=83
    RETAIN=84
    ATTRIBUTE=85
    AUTORELEASING_QUALIFIER=86
    BLOCK=87
    BRIDGE=88
    BRIDGE_RETAINED=89
    BRIDGE_TRANSFER=90
    COVARIANT=91
    CONTRAVARIANT=92
    DEPRECATED=93
    KINDOF=94
    STRONG_QUALIFIER=95
    TYPEOF=96
    UNSAFE_UNRETAINED_QUALIFIER=97
    UNUSED=98
    WEAK_QUALIFIER=99
    NULL_UNSPECIFIED=100
    NULLABLE=101
    NONNULL=102
    NULL_RESETTABLE=103
    NS_INLINE=104
    NS_ENUM=105
    NS_OPTIONS=106
    ASSIGN=107
    COPY=108
    GETTER=109
    SETTER=110
    STRONG=111
    READONLY=112
    READWRITE=113
    WEAK=114
    UNSAFE_UNRETAINED=115
    IB_OUTLET=116
    IB_OUTLET_COLLECTION=117
    IB_INSPECTABLE=118
    IB_DESIGNABLE=119
    NS_ASSUME_NONNULL_BEGIN=120
    NS_ASSUME_NONNULL_END=121
    EXTERN_SUFFIX=122
    IOS_SUFFIX=123
    MAC_SUFFIX=124
    TVOS_PROHIBITED=125
    IDENTIFIER=126
    LP=127
    RP=128
    LBRACE=129
    RBRACE=130
    LBRACK=131
    RBRACK=132
    SEMI=133
    COMMA=134
    DOT=135
    STRUCTACCESS=136
    AT=137
    ASSIGNMENT=138
    GT=139
    LT=140
    BANG=141
    TILDE=142
    QUESTION=143
    COLON=144
    EQUAL=145
    LE=146
    GE=147
    NOTEQUAL=148
    AND=149
    OR=150
    INC=151
    DEC=152
    ADD=153
    SUB=154
    MUL=155
    DIV=156
    BITAND=157
    BITOR=158
    BITXOR=159
    MOD=160
    ADD_ASSIGN=161
    SUB_ASSIGN=162
    MUL_ASSIGN=163
    DIV_ASSIGN=164
    AND_ASSIGN=165
    OR_ASSIGN=166
    XOR_ASSIGN=167
    MOD_ASSIGN=168
    LSHIFT_ASSIGN=169
    RSHIFT_ASSIGN=170
    ELIPSIS=171
    CHARACTER_LITERAL=172
    STRING_START=173
    INCLUDE_START=174
    HEX_LITERAL=175
    OCTAL_LITERAL=176
    BINARY_LITERAL=177
    DECIMAL_LITERAL=178
    FLOATING_POINT_LITERAL=179
    WS=180
    MULTI_COMMENT=181
    SINGLE_COMMENT=182
    BACKSLASH=183
    SHARP=184
    INCLUDE_END=185
    INCLUDE_VALUE=186
    STRING_NEWLINE=187
    STRING_END=188
    STRING_VALUE=189
    DIRECTIVE_IMPORT=190
    DIRECTIVE_INCLUDE=191
    DIRECTIVE_PRAGMA=192
    DIRECTIVE_DEFINE=193
    DIRECTIVE_DEFINED=194
    DIRECTIVE_IF=195
    DIRECTIVE_ELIF=196
    DIRECTIVE_ELSE=197
    DIRECTIVE_UNDEF=198
    DIRECTIVE_IFDEF=199
    DIRECTIVE_IFNDEF=200
    DIRECTIVE_ENDIF=201
    DIRECTIVE_TRUE=202
    DIRECTIVE_FALSE=203
    DIRECTIVE_ERROR=204
    DIRECTIVE_WARNING=205
    DIRECTIVE_BANG=206
    DIRECTIVE_LP=207
    DIRECTIVE_RP=208
    DIRECTIVE_EQUAL=209
    DIRECTIVE_NOTEQUAL=210
    DIRECTIVE_AND=211
    DIRECTIVE_OR=212
    DIRECTIVE_LT=213
    DIRECTIVE_GT=214
    DIRECTIVE_LE=215
    DIRECTIVE_GE=216
    DIRECTIVE_STRING=217
    DIRECTIVE_ID=218
    DIRECTIVE_DECIMAL_LITERAL=219
    DIRECTIVE_FLOAT=220
    DIRECTIVE_NEWLINE=221
    DIRECTIVE_MULTI_COMMENT=222
    DIRECTIVE_SINGLE_COMMENT=223
    DIRECTIVE_BACKSLASH_NEWLINE=224
    DIRECTIVE_TEXT_NEWLINE=225
    DIRECTIVE_TEXT=226

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class TranslationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ObjectiveCParser.EOF, 0)

        def topLevelDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TopLevelDeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TopLevelDeclarationContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)




    def translationUnit(self):

        localctx = ObjectiveCParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.BREAK) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.CONTINUE) | (1 << ObjectiveCParser.DO) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.FOR) | (1 << ObjectiveCParser.GOTO) | (1 << ObjectiveCParser.IF) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.RETURN) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.SWITCH) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED) | (1 << ObjectiveCParser.VOID) | (1 << ObjectiveCParser.VOLATILE) | (1 << ObjectiveCParser.WHILE) | (1 << ObjectiveCParser.TRUE) | (1 << ObjectiveCParser.FALSE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.NIL) | (1 << ObjectiveCParser.NO) | (1 << ObjectiveCParser.NULL) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.YES) | (1 << ObjectiveCParser.AUTORELEASEPOOL) | (1 << ObjectiveCParser.CLASS) | (1 << ObjectiveCParser.ENCODE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ObjectiveCParser.IMPLEMENTATION - 65)) | (1 << (ObjectiveCParser.INTERFACE - 65)) | (1 << (ObjectiveCParser.IMPORT - 65)) | (1 << (ObjectiveCParser.INCLUDE - 65)) | (1 << (ObjectiveCParser.PROTOCOL - 65)) | (1 << (ObjectiveCParser.SELECTOR - 65)) | (1 << (ObjectiveCParser.SYNCHRONIZED - 65)) | (1 << (ObjectiveCParser.THROW - 65)) | (1 << (ObjectiveCParser.TRY - 65)) | (1 << (ObjectiveCParser.ATOMIC - 65)) | (1 << (ObjectiveCParser.NONATOMIC - 65)) | (1 << (ObjectiveCParser.RETAIN - 65)) | (1 << (ObjectiveCParser.ATTRIBUTE - 65)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 65)) | (1 << (ObjectiveCParser.BLOCK - 65)) | (1 << (ObjectiveCParser.BRIDGE - 65)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 65)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 65)) | (1 << (ObjectiveCParser.COVARIANT - 65)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 65)) | (1 << (ObjectiveCParser.DEPRECATED - 65)) | (1 << (ObjectiveCParser.KINDOF - 65)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 65)) | (1 << (ObjectiveCParser.TYPEOF - 65)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 65)) | (1 << (ObjectiveCParser.UNUSED - 65)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 65)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 65)) | (1 << (ObjectiveCParser.NULLABLE - 65)) | (1 << (ObjectiveCParser.NONNULL - 65)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 65)) | (1 << (ObjectiveCParser.NS_INLINE - 65)) | (1 << (ObjectiveCParser.NS_ENUM - 65)) | (1 << (ObjectiveCParser.NS_OPTIONS - 65)) | (1 << (ObjectiveCParser.ASSIGN - 65)) | (1 << (ObjectiveCParser.COPY - 65)) | (1 << (ObjectiveCParser.GETTER - 65)) | (1 << (ObjectiveCParser.SETTER - 65)) | (1 << (ObjectiveCParser.STRONG - 65)) | (1 << (ObjectiveCParser.READONLY - 65)) | (1 << (ObjectiveCParser.READWRITE - 65)) | (1 << (ObjectiveCParser.WEAK - 65)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 65)) | (1 << (ObjectiveCParser.IB_OUTLET - 65)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 65)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 65)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 65)) | (1 << (ObjectiveCParser.IDENTIFIER - 65)) | (1 << (ObjectiveCParser.LP - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.LBRACE - 129)) | (1 << (ObjectiveCParser.LBRACK - 129)) | (1 << (ObjectiveCParser.SEMI - 129)) | (1 << (ObjectiveCParser.AT - 129)) | (1 << (ObjectiveCParser.BANG - 129)) | (1 << (ObjectiveCParser.TILDE - 129)) | (1 << (ObjectiveCParser.INC - 129)) | (1 << (ObjectiveCParser.DEC - 129)) | (1 << (ObjectiveCParser.ADD - 129)) | (1 << (ObjectiveCParser.SUB - 129)) | (1 << (ObjectiveCParser.MUL - 129)) | (1 << (ObjectiveCParser.BITAND - 129)) | (1 << (ObjectiveCParser.BITXOR - 129)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 129)) | (1 << (ObjectiveCParser.STRING_START - 129)) | (1 << (ObjectiveCParser.HEX_LITERAL - 129)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 129)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 129)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 129)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 129)))) != 0):
                self.state = 292
                self.topLevelDeclaration()
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 298
            self.match(ObjectiveCParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.ImportDeclarationContext,0)


        def includeDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.IncludeDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.FunctionDeclarationContext,0)


        def declaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclarationContext,0)


        def classInterface(self):
            return self.getTypedRuleContext(ObjectiveCParser.ClassInterfaceContext,0)


        def classImplementation(self):
            return self.getTypedRuleContext(ObjectiveCParser.ClassImplementationContext,0)


        def categoryInterface(self):
            return self.getTypedRuleContext(ObjectiveCParser.CategoryInterfaceContext,0)


        def categoryImplementation(self):
            return self.getTypedRuleContext(ObjectiveCParser.CategoryImplementationContext,0)


        def protocolDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolDeclarationContext,0)


        def protocolDeclarationList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolDeclarationListContext,0)


        def classDeclarationList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ClassDeclarationListContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(ObjectiveCParser.FunctionDefinitionContext,0)


        def statement(self):
            return self.getTypedRuleContext(ObjectiveCParser.StatementContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_topLevelDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelDeclaration" ):
                listener.enterTopLevelDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelDeclaration" ):
                listener.exitTopLevelDeclaration(self)




    def topLevelDeclaration(self):

        localctx = ObjectiveCParser.TopLevelDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelDeclaration)
        try:
            self.state = 313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 300
                self.importDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 301
                self.includeDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 302
                self.functionDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 303
                self.declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 304
                self.classInterface()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 305
                self.classImplementation()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 306
                self.categoryInterface()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 307
                self.categoryImplementation()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 308
                self.protocolDeclaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 309
                self.protocolDeclarationList()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 310
                self.classDeclarationList()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 311
                self.functionDefinition()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 312
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(ObjectiveCParser.IMPORT, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = ObjectiveCParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.match(ObjectiveCParser.IMPORT)
            self.state = 316
            self.identifier()
            self.state = 317
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE(self):
            return self.getToken(ObjectiveCParser.INCLUDE, 0)

        def includeText(self):
            return self.getTypedRuleContext(ObjectiveCParser.IncludeTextContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_includeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeDeclaration" ):
                listener.enterIncludeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeDeclaration" ):
                listener.exitIncludeDeclaration(self)




    def includeDeclaration(self):

        localctx = ObjectiveCParser.IncludeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_includeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.match(ObjectiveCParser.INCLUDE)
            self.state = 320
            self.includeText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassInterfaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.className = None # GenericTypeSpecifierContext
            self.superclassName = None # IdentifierContext

        def INTERFACE(self):
            return self.getToken(ObjectiveCParser.INTERFACE, 0)

        def END(self):
            return self.getToken(ObjectiveCParser.END, 0)

        def genericTypeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.GenericTypeSpecifierContext,0)


        def IB_DESIGNABLE(self):
            return self.getToken(ObjectiveCParser.IB_DESIGNABLE, 0)

        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def LT(self):
            return self.getToken(ObjectiveCParser.LT, 0)

        def protocolList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolListContext,0)


        def GT(self):
            return self.getToken(ObjectiveCParser.GT, 0)

        def instanceVariables(self):
            return self.getTypedRuleContext(ObjectiveCParser.InstanceVariablesContext,0)


        def interfaceDeclarationList(self):
            return self.getTypedRuleContext(ObjectiveCParser.InterfaceDeclarationListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_classInterface

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassInterface" ):
                listener.enterClassInterface(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassInterface" ):
                listener.exitClassInterface(self)




    def classInterface(self):

        localctx = ObjectiveCParser.ClassInterfaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_classInterface)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.IB_DESIGNABLE:
                self.state = 322
                self.match(ObjectiveCParser.IB_DESIGNABLE)


            self.state = 325
            self.match(ObjectiveCParser.INTERFACE)
            self.state = 326
            localctx.className = self.genericTypeSpecifier()
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.COLON:
                self.state = 327
                self.match(ObjectiveCParser.COLON)
                self.state = 328
                localctx.superclassName = self.identifier()


            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.LT:
                self.state = 331
                self.match(ObjectiveCParser.LT)
                self.state = 332
                self.protocolList()
                self.state = 333
                self.match(ObjectiveCParser.GT)


            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.LBRACE:
                self.state = 337
                self.instanceVariables()


            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED) | (1 << ObjectiveCParser.VOID) | (1 << ObjectiveCParser.VOLATILE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ObjectiveCParser.PROPERTY - 73)) | (1 << (ObjectiveCParser.ATOMIC - 73)) | (1 << (ObjectiveCParser.NONATOMIC - 73)) | (1 << (ObjectiveCParser.RETAIN - 73)) | (1 << (ObjectiveCParser.ATTRIBUTE - 73)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 73)) | (1 << (ObjectiveCParser.BLOCK - 73)) | (1 << (ObjectiveCParser.BRIDGE - 73)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 73)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 73)) | (1 << (ObjectiveCParser.COVARIANT - 73)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 73)) | (1 << (ObjectiveCParser.DEPRECATED - 73)) | (1 << (ObjectiveCParser.KINDOF - 73)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 73)) | (1 << (ObjectiveCParser.TYPEOF - 73)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 73)) | (1 << (ObjectiveCParser.UNUSED - 73)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 73)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 73)) | (1 << (ObjectiveCParser.NULLABLE - 73)) | (1 << (ObjectiveCParser.NONNULL - 73)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 73)) | (1 << (ObjectiveCParser.NS_INLINE - 73)) | (1 << (ObjectiveCParser.NS_ENUM - 73)) | (1 << (ObjectiveCParser.NS_OPTIONS - 73)) | (1 << (ObjectiveCParser.ASSIGN - 73)) | (1 << (ObjectiveCParser.COPY - 73)) | (1 << (ObjectiveCParser.GETTER - 73)) | (1 << (ObjectiveCParser.SETTER - 73)) | (1 << (ObjectiveCParser.STRONG - 73)) | (1 << (ObjectiveCParser.READONLY - 73)) | (1 << (ObjectiveCParser.READWRITE - 73)) | (1 << (ObjectiveCParser.WEAK - 73)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 73)) | (1 << (ObjectiveCParser.IB_OUTLET - 73)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 73)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 73)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 73)) | (1 << (ObjectiveCParser.IDENTIFIER - 73)))) != 0) or _la==ObjectiveCParser.ADD or _la==ObjectiveCParser.SUB:
                self.state = 340
                self.interfaceDeclarationList()


            self.state = 343
            self.match(ObjectiveCParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CategoryInterfaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.categoryName = None # GenericTypeSpecifierContext
            self.className = None # IdentifierContext

        def INTERFACE(self):
            return self.getToken(ObjectiveCParser.INTERFACE, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def END(self):
            return self.getToken(ObjectiveCParser.END, 0)

        def genericTypeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.GenericTypeSpecifierContext,0)


        def LT(self):
            return self.getToken(ObjectiveCParser.LT, 0)

        def protocolList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolListContext,0)


        def GT(self):
            return self.getToken(ObjectiveCParser.GT, 0)

        def instanceVariables(self):
            return self.getTypedRuleContext(ObjectiveCParser.InstanceVariablesContext,0)


        def interfaceDeclarationList(self):
            return self.getTypedRuleContext(ObjectiveCParser.InterfaceDeclarationListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_categoryInterface

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategoryInterface" ):
                listener.enterCategoryInterface(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategoryInterface" ):
                listener.exitCategoryInterface(self)




    def categoryInterface(self):

        localctx = ObjectiveCParser.CategoryInterfaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_categoryInterface)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(ObjectiveCParser.INTERFACE)
            self.state = 346
            localctx.categoryName = self.genericTypeSpecifier()
            self.state = 347
            self.match(ObjectiveCParser.LP)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0):
                self.state = 348
                localctx.className = self.identifier()


            self.state = 351
            self.match(ObjectiveCParser.RP)
            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.LT:
                self.state = 352
                self.match(ObjectiveCParser.LT)
                self.state = 353
                self.protocolList()
                self.state = 354
                self.match(ObjectiveCParser.GT)


            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.LBRACE:
                self.state = 358
                self.instanceVariables()


            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED) | (1 << ObjectiveCParser.VOID) | (1 << ObjectiveCParser.VOLATILE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ObjectiveCParser.PROPERTY - 73)) | (1 << (ObjectiveCParser.ATOMIC - 73)) | (1 << (ObjectiveCParser.NONATOMIC - 73)) | (1 << (ObjectiveCParser.RETAIN - 73)) | (1 << (ObjectiveCParser.ATTRIBUTE - 73)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 73)) | (1 << (ObjectiveCParser.BLOCK - 73)) | (1 << (ObjectiveCParser.BRIDGE - 73)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 73)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 73)) | (1 << (ObjectiveCParser.COVARIANT - 73)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 73)) | (1 << (ObjectiveCParser.DEPRECATED - 73)) | (1 << (ObjectiveCParser.KINDOF - 73)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 73)) | (1 << (ObjectiveCParser.TYPEOF - 73)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 73)) | (1 << (ObjectiveCParser.UNUSED - 73)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 73)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 73)) | (1 << (ObjectiveCParser.NULLABLE - 73)) | (1 << (ObjectiveCParser.NONNULL - 73)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 73)) | (1 << (ObjectiveCParser.NS_INLINE - 73)) | (1 << (ObjectiveCParser.NS_ENUM - 73)) | (1 << (ObjectiveCParser.NS_OPTIONS - 73)) | (1 << (ObjectiveCParser.ASSIGN - 73)) | (1 << (ObjectiveCParser.COPY - 73)) | (1 << (ObjectiveCParser.GETTER - 73)) | (1 << (ObjectiveCParser.SETTER - 73)) | (1 << (ObjectiveCParser.STRONG - 73)) | (1 << (ObjectiveCParser.READONLY - 73)) | (1 << (ObjectiveCParser.READWRITE - 73)) | (1 << (ObjectiveCParser.WEAK - 73)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 73)) | (1 << (ObjectiveCParser.IB_OUTLET - 73)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 73)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 73)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 73)) | (1 << (ObjectiveCParser.IDENTIFIER - 73)))) != 0) or _la==ObjectiveCParser.ADD or _la==ObjectiveCParser.SUB:
                self.state = 361
                self.interfaceDeclarationList()


            self.state = 364
            self.match(ObjectiveCParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassImplementationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.className = None # GenericTypeSpecifierContext
            self.superclassName = None # IdentifierContext

        def IMPLEMENTATION(self):
            return self.getToken(ObjectiveCParser.IMPLEMENTATION, 0)

        def END(self):
            return self.getToken(ObjectiveCParser.END, 0)

        def genericTypeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.GenericTypeSpecifierContext,0)


        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def instanceVariables(self):
            return self.getTypedRuleContext(ObjectiveCParser.InstanceVariablesContext,0)


        def implementationDefinitionList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ImplementationDefinitionListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_classImplementation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassImplementation" ):
                listener.enterClassImplementation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassImplementation" ):
                listener.exitClassImplementation(self)




    def classImplementation(self):

        localctx = ObjectiveCParser.ClassImplementationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_classImplementation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.match(ObjectiveCParser.IMPLEMENTATION)
            self.state = 367
            localctx.className = self.genericTypeSpecifier()
            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.COLON:
                self.state = 368
                self.match(ObjectiveCParser.COLON)
                self.state = 369
                localctx.superclassName = self.identifier()


            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.LBRACE:
                self.state = 372
                self.instanceVariables()


            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED) | (1 << ObjectiveCParser.VOID) | (1 << ObjectiveCParser.VOLATILE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.DYNAMIC))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (ObjectiveCParser.SYNTHESIZE - 79)) | (1 << (ObjectiveCParser.ATOMIC - 79)) | (1 << (ObjectiveCParser.NONATOMIC - 79)) | (1 << (ObjectiveCParser.RETAIN - 79)) | (1 << (ObjectiveCParser.ATTRIBUTE - 79)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 79)) | (1 << (ObjectiveCParser.BLOCK - 79)) | (1 << (ObjectiveCParser.BRIDGE - 79)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 79)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 79)) | (1 << (ObjectiveCParser.COVARIANT - 79)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 79)) | (1 << (ObjectiveCParser.DEPRECATED - 79)) | (1 << (ObjectiveCParser.KINDOF - 79)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 79)) | (1 << (ObjectiveCParser.TYPEOF - 79)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 79)) | (1 << (ObjectiveCParser.UNUSED - 79)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 79)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 79)) | (1 << (ObjectiveCParser.NULLABLE - 79)) | (1 << (ObjectiveCParser.NONNULL - 79)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 79)) | (1 << (ObjectiveCParser.NS_INLINE - 79)) | (1 << (ObjectiveCParser.NS_ENUM - 79)) | (1 << (ObjectiveCParser.NS_OPTIONS - 79)) | (1 << (ObjectiveCParser.ASSIGN - 79)) | (1 << (ObjectiveCParser.COPY - 79)) | (1 << (ObjectiveCParser.GETTER - 79)) | (1 << (ObjectiveCParser.SETTER - 79)) | (1 << (ObjectiveCParser.STRONG - 79)) | (1 << (ObjectiveCParser.READONLY - 79)) | (1 << (ObjectiveCParser.READWRITE - 79)) | (1 << (ObjectiveCParser.WEAK - 79)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 79)) | (1 << (ObjectiveCParser.IB_OUTLET - 79)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 79)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 79)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 79)) | (1 << (ObjectiveCParser.IDENTIFIER - 79)))) != 0) or _la==ObjectiveCParser.ADD or _la==ObjectiveCParser.SUB:
                self.state = 375
                self.implementationDefinitionList()


            self.state = 378
            self.match(ObjectiveCParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CategoryImplementationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.categoryName = None # GenericTypeSpecifierContext
            self.className = None # IdentifierContext

        def IMPLEMENTATION(self):
            return self.getToken(ObjectiveCParser.IMPLEMENTATION, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def END(self):
            return self.getToken(ObjectiveCParser.END, 0)

        def genericTypeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.GenericTypeSpecifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def implementationDefinitionList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ImplementationDefinitionListContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_categoryImplementation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategoryImplementation" ):
                listener.enterCategoryImplementation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategoryImplementation" ):
                listener.exitCategoryImplementation(self)




    def categoryImplementation(self):

        localctx = ObjectiveCParser.CategoryImplementationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_categoryImplementation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.match(ObjectiveCParser.IMPLEMENTATION)
            self.state = 381
            localctx.categoryName = self.genericTypeSpecifier()
            self.state = 382
            self.match(ObjectiveCParser.LP)
            self.state = 383
            localctx.className = self.identifier()
            self.state = 384
            self.match(ObjectiveCParser.RP)
            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED) | (1 << ObjectiveCParser.VOID) | (1 << ObjectiveCParser.VOLATILE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.DYNAMIC))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (ObjectiveCParser.SYNTHESIZE - 79)) | (1 << (ObjectiveCParser.ATOMIC - 79)) | (1 << (ObjectiveCParser.NONATOMIC - 79)) | (1 << (ObjectiveCParser.RETAIN - 79)) | (1 << (ObjectiveCParser.ATTRIBUTE - 79)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 79)) | (1 << (ObjectiveCParser.BLOCK - 79)) | (1 << (ObjectiveCParser.BRIDGE - 79)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 79)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 79)) | (1 << (ObjectiveCParser.COVARIANT - 79)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 79)) | (1 << (ObjectiveCParser.DEPRECATED - 79)) | (1 << (ObjectiveCParser.KINDOF - 79)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 79)) | (1 << (ObjectiveCParser.TYPEOF - 79)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 79)) | (1 << (ObjectiveCParser.UNUSED - 79)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 79)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 79)) | (1 << (ObjectiveCParser.NULLABLE - 79)) | (1 << (ObjectiveCParser.NONNULL - 79)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 79)) | (1 << (ObjectiveCParser.NS_INLINE - 79)) | (1 << (ObjectiveCParser.NS_ENUM - 79)) | (1 << (ObjectiveCParser.NS_OPTIONS - 79)) | (1 << (ObjectiveCParser.ASSIGN - 79)) | (1 << (ObjectiveCParser.COPY - 79)) | (1 << (ObjectiveCParser.GETTER - 79)) | (1 << (ObjectiveCParser.SETTER - 79)) | (1 << (ObjectiveCParser.STRONG - 79)) | (1 << (ObjectiveCParser.READONLY - 79)) | (1 << (ObjectiveCParser.READWRITE - 79)) | (1 << (ObjectiveCParser.WEAK - 79)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 79)) | (1 << (ObjectiveCParser.IB_OUTLET - 79)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 79)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 79)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 79)) | (1 << (ObjectiveCParser.IDENTIFIER - 79)))) != 0) or _la==ObjectiveCParser.ADD or _la==ObjectiveCParser.SUB:
                self.state = 385
                self.implementationDefinitionList()


            self.state = 388
            self.match(ObjectiveCParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def genericsSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.GenericsSpecifierContext,0)


        def LT(self):
            return self.getToken(ObjectiveCParser.LT, 0)

        def protocolList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolListContext,0)


        def GT(self):
            return self.getToken(ObjectiveCParser.GT, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_genericTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericTypeSpecifier" ):
                listener.enterGenericTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericTypeSpecifier" ):
                listener.exitGenericTypeSpecifier(self)




    def genericTypeSpecifier(self):

        localctx = ObjectiveCParser.GenericTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_genericTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.identifier()
            self.state = 396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 391
                self.match(ObjectiveCParser.LT)
                self.state = 392
                self.protocolList()
                self.state = 393
                self.match(ObjectiveCParser.GT)

            elif la_ == 2:
                self.state = 395
                self.genericsSpecifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProtocolDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL(self):
            return self.getToken(ObjectiveCParser.PROTOCOL, 0)

        def protocolName(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolNameContext,0)


        def END(self):
            return self.getToken(ObjectiveCParser.END, 0)

        def LT(self):
            return self.getToken(ObjectiveCParser.LT, 0)

        def protocolList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolListContext,0)


        def GT(self):
            return self.getToken(ObjectiveCParser.GT, 0)

        def protocolDeclarationSection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ProtocolDeclarationSectionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ProtocolDeclarationSectionContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_protocolDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocolDeclaration" ):
                listener.enterProtocolDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocolDeclaration" ):
                listener.exitProtocolDeclaration(self)




    def protocolDeclaration(self):

        localctx = ObjectiveCParser.ProtocolDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_protocolDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(ObjectiveCParser.PROTOCOL)
            self.state = 399
            self.protocolName()
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.LT:
                self.state = 400
                self.match(ObjectiveCParser.LT)
                self.state = 401
                self.protocolList()
                self.state = 402
                self.match(ObjectiveCParser.GT)


            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED) | (1 << ObjectiveCParser.VOID) | (1 << ObjectiveCParser.VOLATILE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.OPTIONAL - 71)) | (1 << (ObjectiveCParser.PROPERTY - 71)) | (1 << (ObjectiveCParser.REQUIRED - 71)) | (1 << (ObjectiveCParser.ATOMIC - 71)) | (1 << (ObjectiveCParser.NONATOMIC - 71)) | (1 << (ObjectiveCParser.RETAIN - 71)) | (1 << (ObjectiveCParser.ATTRIBUTE - 71)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 71)) | (1 << (ObjectiveCParser.BLOCK - 71)) | (1 << (ObjectiveCParser.BRIDGE - 71)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 71)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.DEPRECATED - 71)) | (1 << (ObjectiveCParser.KINDOF - 71)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 71)) | (1 << (ObjectiveCParser.UNUSED - 71)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 71)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.NONNULL - 71)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 71)) | (1 << (ObjectiveCParser.NS_INLINE - 71)) | (1 << (ObjectiveCParser.NS_ENUM - 71)) | (1 << (ObjectiveCParser.NS_OPTIONS - 71)) | (1 << (ObjectiveCParser.ASSIGN - 71)) | (1 << (ObjectiveCParser.COPY - 71)) | (1 << (ObjectiveCParser.GETTER - 71)) | (1 << (ObjectiveCParser.SETTER - 71)) | (1 << (ObjectiveCParser.STRONG - 71)) | (1 << (ObjectiveCParser.READONLY - 71)) | (1 << (ObjectiveCParser.READWRITE - 71)) | (1 << (ObjectiveCParser.WEAK - 71)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 71)) | (1 << (ObjectiveCParser.IB_OUTLET - 71)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 71)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 71)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 71)) | (1 << (ObjectiveCParser.IDENTIFIER - 71)))) != 0) or _la==ObjectiveCParser.ADD or _la==ObjectiveCParser.SUB:
                self.state = 406
                self.protocolDeclarationSection()
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 412
            self.match(ObjectiveCParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProtocolDeclarationSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.modifier = None # Token

        def REQUIRED(self):
            return self.getToken(ObjectiveCParser.REQUIRED, 0)

        def OPTIONAL(self):
            return self.getToken(ObjectiveCParser.OPTIONAL, 0)

        def interfaceDeclarationList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.InterfaceDeclarationListContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.InterfaceDeclarationListContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_protocolDeclarationSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocolDeclarationSection" ):
                listener.enterProtocolDeclarationSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocolDeclarationSection" ):
                listener.exitProtocolDeclarationSection(self)




    def protocolDeclarationSection(self):

        localctx = ObjectiveCParser.ProtocolDeclarationSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_protocolDeclarationSection)
        self._la = 0 # Token type
        try:
            self.state = 426
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ObjectiveCParser.OPTIONAL, ObjectiveCParser.REQUIRED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 414
                localctx.modifier = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==ObjectiveCParser.OPTIONAL or _la==ObjectiveCParser.REQUIRED):
                    localctx.modifier = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 418
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 415
                        self.interfaceDeclarationList() 
                    self.state = 420
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

                pass
            elif token in [ObjectiveCParser.AUTO, ObjectiveCParser.CHAR, ObjectiveCParser.CONST, ObjectiveCParser.DOUBLE, ObjectiveCParser.ENUM, ObjectiveCParser.EXTERN, ObjectiveCParser.FLOAT, ObjectiveCParser.INLINE, ObjectiveCParser.INT, ObjectiveCParser.LONG, ObjectiveCParser.REGISTER, ObjectiveCParser.RESTRICT, ObjectiveCParser.SHORT, ObjectiveCParser.SIGNED, ObjectiveCParser.STATIC, ObjectiveCParser.STRUCT, ObjectiveCParser.TYPEDEF, ObjectiveCParser.UNION, ObjectiveCParser.UNSIGNED, ObjectiveCParser.VOID, ObjectiveCParser.VOLATILE, ObjectiveCParser.BOOL, ObjectiveCParser.Class, ObjectiveCParser.BYCOPY, ObjectiveCParser.BYREF, ObjectiveCParser.ID, ObjectiveCParser.IMP, ObjectiveCParser.IN, ObjectiveCParser.INOUT, ObjectiveCParser.ONEWAY, ObjectiveCParser.OUT, ObjectiveCParser.PROTOCOL_, ObjectiveCParser.SEL, ObjectiveCParser.SELF, ObjectiveCParser.SUPER, ObjectiveCParser.PROPERTY, ObjectiveCParser.ATOMIC, ObjectiveCParser.NONATOMIC, ObjectiveCParser.RETAIN, ObjectiveCParser.ATTRIBUTE, ObjectiveCParser.AUTORELEASING_QUALIFIER, ObjectiveCParser.BLOCK, ObjectiveCParser.BRIDGE, ObjectiveCParser.BRIDGE_RETAINED, ObjectiveCParser.BRIDGE_TRANSFER, ObjectiveCParser.COVARIANT, ObjectiveCParser.CONTRAVARIANT, ObjectiveCParser.DEPRECATED, ObjectiveCParser.KINDOF, ObjectiveCParser.STRONG_QUALIFIER, ObjectiveCParser.TYPEOF, ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER, ObjectiveCParser.UNUSED, ObjectiveCParser.WEAK_QUALIFIER, ObjectiveCParser.NULL_UNSPECIFIED, ObjectiveCParser.NULLABLE, ObjectiveCParser.NONNULL, ObjectiveCParser.NULL_RESETTABLE, ObjectiveCParser.NS_INLINE, ObjectiveCParser.NS_ENUM, ObjectiveCParser.NS_OPTIONS, ObjectiveCParser.ASSIGN, ObjectiveCParser.COPY, ObjectiveCParser.GETTER, ObjectiveCParser.SETTER, ObjectiveCParser.STRONG, ObjectiveCParser.READONLY, ObjectiveCParser.READWRITE, ObjectiveCParser.WEAK, ObjectiveCParser.UNSAFE_UNRETAINED, ObjectiveCParser.IB_OUTLET, ObjectiveCParser.IB_OUTLET_COLLECTION, ObjectiveCParser.IB_INSPECTABLE, ObjectiveCParser.IB_DESIGNABLE, ObjectiveCParser.IDENTIFIER, ObjectiveCParser.ADD, ObjectiveCParser.SUB]:
                self.enterOuterAlt(localctx, 2)
                self.state = 422 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 421
                        self.interfaceDeclarationList()

                    else:
                        raise NoViableAltException(self)
                    self.state = 424 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProtocolDeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL(self):
            return self.getToken(ObjectiveCParser.PROTOCOL, 0)

        def protocolList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolListContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_protocolDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocolDeclarationList" ):
                listener.enterProtocolDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocolDeclarationList" ):
                listener.exitProtocolDeclarationList(self)




    def protocolDeclarationList(self):

        localctx = ObjectiveCParser.ProtocolDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_protocolDeclarationList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(ObjectiveCParser.PROTOCOL)
            self.state = 429
            self.protocolList()
            self.state = 430
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(ObjectiveCParser.CLASS, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,i)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_classDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclarationList" ):
                listener.enterClassDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclarationList" ):
                listener.exitClassDeclarationList(self)




    def classDeclarationList(self):

        localctx = ObjectiveCParser.ClassDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_classDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.match(ObjectiveCParser.CLASS)
            self.state = 433
            self.identifier()
            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ObjectiveCParser.COMMA:
                self.state = 434
                self.match(ObjectiveCParser.COMMA)
                self.state = 435
                self.identifier()
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 441
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProtocolListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def protocolName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ProtocolNameContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ProtocolNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_protocolList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocolList" ):
                listener.enterProtocolList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocolList" ):
                listener.exitProtocolList(self)




    def protocolList(self):

        localctx = ObjectiveCParser.ProtocolListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_protocolList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.protocolName()
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ObjectiveCParser.COMMA:
                self.state = 444
                self.match(ObjectiveCParser.COMMA)
                self.state = 445
                self.protocolName()
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY(self):
            return self.getToken(ObjectiveCParser.PROPERTY, 0)

        def fieldDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.FieldDeclarationContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def propertyAttributesList(self):
            return self.getTypedRuleContext(ObjectiveCParser.PropertyAttributesListContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def ibOutletQualifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IbOutletQualifierContext,0)


        def IB_INSPECTABLE(self):
            return self.getToken(ObjectiveCParser.IB_INSPECTABLE, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_propertyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyDeclaration" ):
                listener.enterPropertyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyDeclaration" ):
                listener.exitPropertyDeclaration(self)




    def propertyDeclaration(self):

        localctx = ObjectiveCParser.PropertyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_propertyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.match(ObjectiveCParser.PROPERTY)
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.LP:
                self.state = 452
                self.match(ObjectiveCParser.LP)
                self.state = 453
                self.propertyAttributesList()
                self.state = 454
                self.match(ObjectiveCParser.RP)


            self.state = 459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 458
                self.ibOutletQualifier()


            self.state = 462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 461
                self.match(ObjectiveCParser.IB_INSPECTABLE)


            self.state = 464
            self.fieldDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyAttributesListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.PropertyAttributeContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.PropertyAttributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_propertyAttributesList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyAttributesList" ):
                listener.enterPropertyAttributesList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyAttributesList" ):
                listener.exitPropertyAttributesList(self)




    def propertyAttributesList(self):

        localctx = ObjectiveCParser.PropertyAttributesListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_propertyAttributesList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.propertyAttribute()
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ObjectiveCParser.COMMA:
                self.state = 467
                self.match(ObjectiveCParser.COMMA)
                self.state = 468
                self.propertyAttribute()
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyAttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATOMIC(self):
            return self.getToken(ObjectiveCParser.ATOMIC, 0)

        def NONATOMIC(self):
            return self.getToken(ObjectiveCParser.NONATOMIC, 0)

        def STRONG(self):
            return self.getToken(ObjectiveCParser.STRONG, 0)

        def WEAK(self):
            return self.getToken(ObjectiveCParser.WEAK, 0)

        def RETAIN(self):
            return self.getToken(ObjectiveCParser.RETAIN, 0)

        def ASSIGN(self):
            return self.getToken(ObjectiveCParser.ASSIGN, 0)

        def UNSAFE_UNRETAINED(self):
            return self.getToken(ObjectiveCParser.UNSAFE_UNRETAINED, 0)

        def COPY(self):
            return self.getToken(ObjectiveCParser.COPY, 0)

        def READONLY(self):
            return self.getToken(ObjectiveCParser.READONLY, 0)

        def READWRITE(self):
            return self.getToken(ObjectiveCParser.READWRITE, 0)

        def GETTER(self):
            return self.getToken(ObjectiveCParser.GETTER, 0)

        def ASSIGNMENT(self):
            return self.getToken(ObjectiveCParser.ASSIGNMENT, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def SETTER(self):
            return self.getToken(ObjectiveCParser.SETTER, 0)

        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def nullabilitySpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.NullabilitySpecifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_propertyAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyAttribute" ):
                listener.enterPropertyAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyAttribute" ):
                listener.exitPropertyAttribute(self)




    def propertyAttribute(self):

        localctx = ObjectiveCParser.PropertyAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_propertyAttribute)
        try:
            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 474
                self.match(ObjectiveCParser.ATOMIC)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                self.match(ObjectiveCParser.NONATOMIC)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 476
                self.match(ObjectiveCParser.STRONG)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 477
                self.match(ObjectiveCParser.WEAK)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 478
                self.match(ObjectiveCParser.RETAIN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 479
                self.match(ObjectiveCParser.ASSIGN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 480
                self.match(ObjectiveCParser.UNSAFE_UNRETAINED)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 481
                self.match(ObjectiveCParser.COPY)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 482
                self.match(ObjectiveCParser.READONLY)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 483
                self.match(ObjectiveCParser.READWRITE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 484
                self.match(ObjectiveCParser.GETTER)
                self.state = 485
                self.match(ObjectiveCParser.ASSIGNMENT)
                self.state = 486
                self.identifier()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 487
                self.match(ObjectiveCParser.SETTER)
                self.state = 488
                self.match(ObjectiveCParser.ASSIGNMENT)
                self.state = 489
                self.identifier()
                self.state = 490
                self.match(ObjectiveCParser.COLON)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 492
                self.nullabilitySpecifier()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 493
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProtocolNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(ObjectiveCParser.LT, 0)

        def protocolList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolListContext,0)


        def GT(self):
            return self.getToken(ObjectiveCParser.GT, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def COVARIANT(self):
            return self.getToken(ObjectiveCParser.COVARIANT, 0)

        def CONTRAVARIANT(self):
            return self.getToken(ObjectiveCParser.CONTRAVARIANT, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_protocolName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocolName" ):
                listener.enterProtocolName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocolName" ):
                listener.exitProtocolName(self)




    def protocolName(self):

        localctx = ObjectiveCParser.ProtocolNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_protocolName)
        self._la = 0 # Token type
        try:
            self.state = 504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ObjectiveCParser.LT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 496
                self.match(ObjectiveCParser.LT)
                self.state = 497
                self.protocolList()
                self.state = 498
                self.match(ObjectiveCParser.GT)
                pass
            elif token in [ObjectiveCParser.BOOL, ObjectiveCParser.Class, ObjectiveCParser.BYCOPY, ObjectiveCParser.BYREF, ObjectiveCParser.ID, ObjectiveCParser.IMP, ObjectiveCParser.IN, ObjectiveCParser.INOUT, ObjectiveCParser.ONEWAY, ObjectiveCParser.OUT, ObjectiveCParser.PROTOCOL_, ObjectiveCParser.SEL, ObjectiveCParser.SELF, ObjectiveCParser.SUPER, ObjectiveCParser.ATOMIC, ObjectiveCParser.NONATOMIC, ObjectiveCParser.RETAIN, ObjectiveCParser.AUTORELEASING_QUALIFIER, ObjectiveCParser.BLOCK, ObjectiveCParser.BRIDGE_RETAINED, ObjectiveCParser.BRIDGE_TRANSFER, ObjectiveCParser.COVARIANT, ObjectiveCParser.CONTRAVARIANT, ObjectiveCParser.DEPRECATED, ObjectiveCParser.KINDOF, ObjectiveCParser.UNUSED, ObjectiveCParser.NULL_UNSPECIFIED, ObjectiveCParser.NULLABLE, ObjectiveCParser.NONNULL, ObjectiveCParser.NULL_RESETTABLE, ObjectiveCParser.NS_INLINE, ObjectiveCParser.NS_ENUM, ObjectiveCParser.NS_OPTIONS, ObjectiveCParser.ASSIGN, ObjectiveCParser.COPY, ObjectiveCParser.GETTER, ObjectiveCParser.SETTER, ObjectiveCParser.STRONG, ObjectiveCParser.READONLY, ObjectiveCParser.READWRITE, ObjectiveCParser.WEAK, ObjectiveCParser.UNSAFE_UNRETAINED, ObjectiveCParser.IB_OUTLET, ObjectiveCParser.IB_OUTLET_COLLECTION, ObjectiveCParser.IB_INSPECTABLE, ObjectiveCParser.IB_DESIGNABLE, ObjectiveCParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 501
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 500
                    _la = self._input.LA(1)
                    if not(_la==ObjectiveCParser.COVARIANT or _la==ObjectiveCParser.CONTRAVARIANT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 503
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceVariablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def visibilitySection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.VisibilitySectionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.VisibilitySectionContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_instanceVariables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceVariables" ):
                listener.enterInstanceVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceVariables" ):
                listener.exitInstanceVariables(self)




    def instanceVariables(self):

        localctx = ObjectiveCParser.InstanceVariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_instanceVariables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(ObjectiveCParser.LBRACE)
            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED) | (1 << ObjectiveCParser.VOID) | (1 << ObjectiveCParser.VOLATILE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (ObjectiveCParser.PACKAGE - 69)) | (1 << (ObjectiveCParser.PRIVATE - 69)) | (1 << (ObjectiveCParser.PROTECTED - 69)) | (1 << (ObjectiveCParser.PUBLIC - 69)) | (1 << (ObjectiveCParser.ATOMIC - 69)) | (1 << (ObjectiveCParser.NONATOMIC - 69)) | (1 << (ObjectiveCParser.RETAIN - 69)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 69)) | (1 << (ObjectiveCParser.BLOCK - 69)) | (1 << (ObjectiveCParser.BRIDGE - 69)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 69)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 69)) | (1 << (ObjectiveCParser.COVARIANT - 69)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 69)) | (1 << (ObjectiveCParser.DEPRECATED - 69)) | (1 << (ObjectiveCParser.KINDOF - 69)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 69)) | (1 << (ObjectiveCParser.TYPEOF - 69)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 69)) | (1 << (ObjectiveCParser.UNUSED - 69)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 69)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 69)) | (1 << (ObjectiveCParser.NULLABLE - 69)) | (1 << (ObjectiveCParser.NONNULL - 69)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 69)) | (1 << (ObjectiveCParser.NS_INLINE - 69)) | (1 << (ObjectiveCParser.NS_ENUM - 69)) | (1 << (ObjectiveCParser.NS_OPTIONS - 69)) | (1 << (ObjectiveCParser.ASSIGN - 69)) | (1 << (ObjectiveCParser.COPY - 69)) | (1 << (ObjectiveCParser.GETTER - 69)) | (1 << (ObjectiveCParser.SETTER - 69)) | (1 << (ObjectiveCParser.STRONG - 69)) | (1 << (ObjectiveCParser.READONLY - 69)) | (1 << (ObjectiveCParser.READWRITE - 69)) | (1 << (ObjectiveCParser.WEAK - 69)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 69)) | (1 << (ObjectiveCParser.IB_OUTLET - 69)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 69)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 69)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 69)) | (1 << (ObjectiveCParser.IDENTIFIER - 69)))) != 0):
                self.state = 507
                self.visibilitySection()
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 513
            self.match(ObjectiveCParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilitySectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def accessModifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.AccessModifierContext,0)


        def fieldDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.FieldDeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.FieldDeclarationContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_visibilitySection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibilitySection" ):
                listener.enterVisibilitySection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibilitySection" ):
                listener.exitVisibilitySection(self)




    def visibilitySection(self):

        localctx = ObjectiveCParser.VisibilitySectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_visibilitySection)
        try:
            self.state = 527
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ObjectiveCParser.PACKAGE, ObjectiveCParser.PRIVATE, ObjectiveCParser.PROTECTED, ObjectiveCParser.PUBLIC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 515
                self.accessModifier()
                self.state = 519
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 516
                        self.fieldDeclaration() 
                    self.state = 521
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

                pass
            elif token in [ObjectiveCParser.CHAR, ObjectiveCParser.CONST, ObjectiveCParser.DOUBLE, ObjectiveCParser.ENUM, ObjectiveCParser.FLOAT, ObjectiveCParser.INLINE, ObjectiveCParser.INT, ObjectiveCParser.LONG, ObjectiveCParser.RESTRICT, ObjectiveCParser.SHORT, ObjectiveCParser.SIGNED, ObjectiveCParser.STRUCT, ObjectiveCParser.UNION, ObjectiveCParser.UNSIGNED, ObjectiveCParser.VOID, ObjectiveCParser.VOLATILE, ObjectiveCParser.BOOL, ObjectiveCParser.Class, ObjectiveCParser.BYCOPY, ObjectiveCParser.BYREF, ObjectiveCParser.ID, ObjectiveCParser.IMP, ObjectiveCParser.IN, ObjectiveCParser.INOUT, ObjectiveCParser.ONEWAY, ObjectiveCParser.OUT, ObjectiveCParser.PROTOCOL_, ObjectiveCParser.SEL, ObjectiveCParser.SELF, ObjectiveCParser.SUPER, ObjectiveCParser.ATOMIC, ObjectiveCParser.NONATOMIC, ObjectiveCParser.RETAIN, ObjectiveCParser.AUTORELEASING_QUALIFIER, ObjectiveCParser.BLOCK, ObjectiveCParser.BRIDGE, ObjectiveCParser.BRIDGE_RETAINED, ObjectiveCParser.BRIDGE_TRANSFER, ObjectiveCParser.COVARIANT, ObjectiveCParser.CONTRAVARIANT, ObjectiveCParser.DEPRECATED, ObjectiveCParser.KINDOF, ObjectiveCParser.STRONG_QUALIFIER, ObjectiveCParser.TYPEOF, ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER, ObjectiveCParser.UNUSED, ObjectiveCParser.WEAK_QUALIFIER, ObjectiveCParser.NULL_UNSPECIFIED, ObjectiveCParser.NULLABLE, ObjectiveCParser.NONNULL, ObjectiveCParser.NULL_RESETTABLE, ObjectiveCParser.NS_INLINE, ObjectiveCParser.NS_ENUM, ObjectiveCParser.NS_OPTIONS, ObjectiveCParser.ASSIGN, ObjectiveCParser.COPY, ObjectiveCParser.GETTER, ObjectiveCParser.SETTER, ObjectiveCParser.STRONG, ObjectiveCParser.READONLY, ObjectiveCParser.READWRITE, ObjectiveCParser.WEAK, ObjectiveCParser.UNSAFE_UNRETAINED, ObjectiveCParser.IB_OUTLET, ObjectiveCParser.IB_OUTLET_COLLECTION, ObjectiveCParser.IB_INSPECTABLE, ObjectiveCParser.IB_DESIGNABLE, ObjectiveCParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 523 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 522
                        self.fieldDeclaration()

                    else:
                        raise NoViableAltException(self)
                    self.state = 525 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(ObjectiveCParser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(ObjectiveCParser.PROTECTED, 0)

        def PACKAGE(self):
            return self.getToken(ObjectiveCParser.PACKAGE, 0)

        def PUBLIC(self):
            return self.getToken(ObjectiveCParser.PUBLIC, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_accessModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessModifier" ):
                listener.enterAccessModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessModifier" ):
                listener.exitAccessModifier(self)




    def accessModifier(self):

        localctx = ObjectiveCParser.AccessModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_accessModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            _la = self._input.LA(1)
            if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (ObjectiveCParser.PACKAGE - 69)) | (1 << (ObjectiveCParser.PRIVATE - 69)) | (1 << (ObjectiveCParser.PROTECTED - 69)) | (1 << (ObjectiveCParser.PUBLIC - 69)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.DeclarationContext,i)


        def classMethodDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ClassMethodDeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ClassMethodDeclarationContext,i)


        def instanceMethodDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.InstanceMethodDeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.InstanceMethodDeclarationContext,i)


        def propertyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.PropertyDeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.PropertyDeclarationContext,i)


        def functionDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.FunctionDeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.FunctionDeclarationContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_interfaceDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclarationList" ):
                listener.enterInterfaceDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclarationList" ):
                listener.exitInterfaceDeclarationList(self)




    def interfaceDeclarationList(self):

        localctx = ObjectiveCParser.InterfaceDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_interfaceDeclarationList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 536
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                    if la_ == 1:
                        self.state = 531
                        self.declaration()
                        pass

                    elif la_ == 2:
                        self.state = 532
                        self.classMethodDeclaration()
                        pass

                    elif la_ == 3:
                        self.state = 533
                        self.instanceMethodDeclaration()
                        pass

                    elif la_ == 4:
                        self.state = 534
                        self.propertyDeclaration()
                        pass

                    elif la_ == 5:
                        self.state = 535
                        self.functionDeclaration()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 538 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMethodDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(ObjectiveCParser.ADD, 0)

        def methodDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.MethodDeclarationContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_classMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMethodDeclaration" ):
                listener.enterClassMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMethodDeclaration" ):
                listener.exitClassMethodDeclaration(self)




    def classMethodDeclaration(self):

        localctx = ObjectiveCParser.ClassMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_classMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.match(ObjectiveCParser.ADD)
            self.state = 541
            self.methodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceMethodDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(ObjectiveCParser.SUB, 0)

        def methodDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.MethodDeclarationContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_instanceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceMethodDeclaration" ):
                listener.enterInstanceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceMethodDeclaration" ):
                listener.exitInstanceMethodDeclaration(self)




    def instanceMethodDeclaration(self):

        localctx = ObjectiveCParser.InstanceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_instanceMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self.match(ObjectiveCParser.SUB)
            self.state = 544
            self.methodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodSelector(self):
            return self.getTypedRuleContext(ObjectiveCParser.MethodSelectorContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def methodType(self):
            return self.getTypedRuleContext(ObjectiveCParser.MethodTypeContext,0)


        def macro(self):
            return self.getTypedRuleContext(ObjectiveCParser.MacroContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)




    def methodDeclaration(self):

        localctx = ObjectiveCParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.LP:
                self.state = 546
                self.methodType()


            self.state = 549
            self.methodSelector()
            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0):
                self.state = 550
                self.macro()


            self.state = 553
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplementationDefinitionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.FunctionDefinitionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.FunctionDefinitionContext,i)


        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.DeclarationContext,i)


        def classMethodDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ClassMethodDefinitionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ClassMethodDefinitionContext,i)


        def instanceMethodDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.InstanceMethodDefinitionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.InstanceMethodDefinitionContext,i)


        def propertyImplementation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.PropertyImplementationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.PropertyImplementationContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_implementationDefinitionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementationDefinitionList" ):
                listener.enterImplementationDefinitionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementationDefinitionList" ):
                listener.exitImplementationDefinitionList(self)




    def implementationDefinitionList(self):

        localctx = ObjectiveCParser.ImplementationDefinitionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_implementationDefinitionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 560
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 555
                    self.functionDefinition()
                    pass

                elif la_ == 2:
                    self.state = 556
                    self.declaration()
                    pass

                elif la_ == 3:
                    self.state = 557
                    self.classMethodDefinition()
                    pass

                elif la_ == 4:
                    self.state = 558
                    self.instanceMethodDefinition()
                    pass

                elif la_ == 5:
                    self.state = 559
                    self.propertyImplementation()
                    pass


                self.state = 562 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED) | (1 << ObjectiveCParser.VOID) | (1 << ObjectiveCParser.VOLATILE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.DYNAMIC))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (ObjectiveCParser.SYNTHESIZE - 79)) | (1 << (ObjectiveCParser.ATOMIC - 79)) | (1 << (ObjectiveCParser.NONATOMIC - 79)) | (1 << (ObjectiveCParser.RETAIN - 79)) | (1 << (ObjectiveCParser.ATTRIBUTE - 79)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 79)) | (1 << (ObjectiveCParser.BLOCK - 79)) | (1 << (ObjectiveCParser.BRIDGE - 79)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 79)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 79)) | (1 << (ObjectiveCParser.COVARIANT - 79)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 79)) | (1 << (ObjectiveCParser.DEPRECATED - 79)) | (1 << (ObjectiveCParser.KINDOF - 79)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 79)) | (1 << (ObjectiveCParser.TYPEOF - 79)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 79)) | (1 << (ObjectiveCParser.UNUSED - 79)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 79)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 79)) | (1 << (ObjectiveCParser.NULLABLE - 79)) | (1 << (ObjectiveCParser.NONNULL - 79)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 79)) | (1 << (ObjectiveCParser.NS_INLINE - 79)) | (1 << (ObjectiveCParser.NS_ENUM - 79)) | (1 << (ObjectiveCParser.NS_OPTIONS - 79)) | (1 << (ObjectiveCParser.ASSIGN - 79)) | (1 << (ObjectiveCParser.COPY - 79)) | (1 << (ObjectiveCParser.GETTER - 79)) | (1 << (ObjectiveCParser.SETTER - 79)) | (1 << (ObjectiveCParser.STRONG - 79)) | (1 << (ObjectiveCParser.READONLY - 79)) | (1 << (ObjectiveCParser.READWRITE - 79)) | (1 << (ObjectiveCParser.WEAK - 79)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 79)) | (1 << (ObjectiveCParser.IB_OUTLET - 79)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 79)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 79)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 79)) | (1 << (ObjectiveCParser.IDENTIFIER - 79)))) != 0) or _la==ObjectiveCParser.ADD or _la==ObjectiveCParser.SUB):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMethodDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(ObjectiveCParser.ADD, 0)

        def methodDefinition(self):
            return self.getTypedRuleContext(ObjectiveCParser.MethodDefinitionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_classMethodDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMethodDefinition" ):
                listener.enterClassMethodDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMethodDefinition" ):
                listener.exitClassMethodDefinition(self)




    def classMethodDefinition(self):

        localctx = ObjectiveCParser.ClassMethodDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_classMethodDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(ObjectiveCParser.ADD)
            self.state = 565
            self.methodDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceMethodDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(ObjectiveCParser.SUB, 0)

        def methodDefinition(self):
            return self.getTypedRuleContext(ObjectiveCParser.MethodDefinitionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_instanceMethodDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceMethodDefinition" ):
                listener.enterInstanceMethodDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceMethodDefinition" ):
                listener.exitInstanceMethodDefinition(self)




    def instanceMethodDefinition(self):

        localctx = ObjectiveCParser.InstanceMethodDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_instanceMethodDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(ObjectiveCParser.SUB)
            self.state = 568
            self.methodDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodSelector(self):
            return self.getTypedRuleContext(ObjectiveCParser.MethodSelectorContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,0)


        def methodType(self):
            return self.getTypedRuleContext(ObjectiveCParser.MethodTypeContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(ObjectiveCParser.InitDeclaratorListContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_methodDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDefinition" ):
                listener.enterMethodDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDefinition" ):
                listener.exitMethodDefinition(self)




    def methodDefinition(self):

        localctx = ObjectiveCParser.MethodDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_methodDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.LP:
                self.state = 570
                self.methodType()


            self.state = 573
            self.methodSelector()
            self.state = 575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)) | (1 << (ObjectiveCParser.ATOMIC - 40)) | (1 << (ObjectiveCParser.NONATOMIC - 40)) | (1 << (ObjectiveCParser.RETAIN - 40)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 40)) | (1 << (ObjectiveCParser.BLOCK - 40)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 40)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 40)) | (1 << (ObjectiveCParser.COVARIANT - 40)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 40)) | (1 << (ObjectiveCParser.DEPRECATED - 40)) | (1 << (ObjectiveCParser.KINDOF - 40)) | (1 << (ObjectiveCParser.UNUSED - 40)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 40)) | (1 << (ObjectiveCParser.NULLABLE - 40)) | (1 << (ObjectiveCParser.NONNULL - 40)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (ObjectiveCParser.NS_INLINE - 104)) | (1 << (ObjectiveCParser.NS_ENUM - 104)) | (1 << (ObjectiveCParser.NS_OPTIONS - 104)) | (1 << (ObjectiveCParser.ASSIGN - 104)) | (1 << (ObjectiveCParser.COPY - 104)) | (1 << (ObjectiveCParser.GETTER - 104)) | (1 << (ObjectiveCParser.SETTER - 104)) | (1 << (ObjectiveCParser.STRONG - 104)) | (1 << (ObjectiveCParser.READONLY - 104)) | (1 << (ObjectiveCParser.READWRITE - 104)) | (1 << (ObjectiveCParser.WEAK - 104)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 104)) | (1 << (ObjectiveCParser.IB_OUTLET - 104)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 104)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 104)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 104)) | (1 << (ObjectiveCParser.IDENTIFIER - 104)) | (1 << (ObjectiveCParser.LP - 104)) | (1 << (ObjectiveCParser.MUL - 104)))) != 0):
                self.state = 574
                self.initDeclaratorList()


            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.SEMI:
                self.state = 577
                self.match(ObjectiveCParser.SEMI)


            self.state = 580
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodSelectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector(self):
            return self.getTypedRuleContext(ObjectiveCParser.SelectorContext,0)


        def keywordDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.KeywordDeclaratorContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.KeywordDeclaratorContext,i)


        def COMMA(self):
            return self.getToken(ObjectiveCParser.COMMA, 0)

        def ELIPSIS(self):
            return self.getToken(ObjectiveCParser.ELIPSIS, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_methodSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodSelector" ):
                listener.enterMethodSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodSelector" ):
                listener.exitMethodSelector(self)




    def methodSelector(self):

        localctx = ObjectiveCParser.MethodSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_methodSelector)
        self._la = 0 # Token type
        try:
            self.state = 592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 582
                self.selector()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 584 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 583
                        self.keywordDeclarator()

                    else:
                        raise NoViableAltException(self)
                    self.state = 586 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ObjectiveCParser.COMMA:
                    self.state = 588
                    self.match(ObjectiveCParser.COMMA)
                    self.state = 589
                    self.match(ObjectiveCParser.ELIPSIS)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def selector(self):
            return self.getTypedRuleContext(ObjectiveCParser.SelectorContext,0)


        def methodType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.MethodTypeContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.MethodTypeContext,i)


        def arcBehaviourSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.ArcBehaviourSpecifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_keywordDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordDeclarator" ):
                listener.enterKeywordDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordDeclarator" ):
                listener.exitKeywordDeclarator(self)




    def keywordDeclarator(self):

        localctx = ObjectiveCParser.KeywordDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_keywordDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.RETURN) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0):
                self.state = 594
                self.selector()


            self.state = 597
            self.match(ObjectiveCParser.COLON)
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ObjectiveCParser.LP:
                self.state = 598
                self.methodType()
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 604
                self.arcBehaviourSpecifier()


            self.state = 607
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def RETURN(self):
            return self.getToken(ObjectiveCParser.RETURN, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_selector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelector" ):
                listener.enterSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelector" ):
                listener.exitSelector(self)




    def selector(self):

        localctx = ObjectiveCParser.SelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_selector)
        try:
            self.state = 611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ObjectiveCParser.BOOL, ObjectiveCParser.Class, ObjectiveCParser.BYCOPY, ObjectiveCParser.BYREF, ObjectiveCParser.ID, ObjectiveCParser.IMP, ObjectiveCParser.IN, ObjectiveCParser.INOUT, ObjectiveCParser.ONEWAY, ObjectiveCParser.OUT, ObjectiveCParser.PROTOCOL_, ObjectiveCParser.SEL, ObjectiveCParser.SELF, ObjectiveCParser.SUPER, ObjectiveCParser.ATOMIC, ObjectiveCParser.NONATOMIC, ObjectiveCParser.RETAIN, ObjectiveCParser.AUTORELEASING_QUALIFIER, ObjectiveCParser.BLOCK, ObjectiveCParser.BRIDGE_RETAINED, ObjectiveCParser.BRIDGE_TRANSFER, ObjectiveCParser.COVARIANT, ObjectiveCParser.CONTRAVARIANT, ObjectiveCParser.DEPRECATED, ObjectiveCParser.KINDOF, ObjectiveCParser.UNUSED, ObjectiveCParser.NULL_UNSPECIFIED, ObjectiveCParser.NULLABLE, ObjectiveCParser.NONNULL, ObjectiveCParser.NULL_RESETTABLE, ObjectiveCParser.NS_INLINE, ObjectiveCParser.NS_ENUM, ObjectiveCParser.NS_OPTIONS, ObjectiveCParser.ASSIGN, ObjectiveCParser.COPY, ObjectiveCParser.GETTER, ObjectiveCParser.SETTER, ObjectiveCParser.STRONG, ObjectiveCParser.READONLY, ObjectiveCParser.READWRITE, ObjectiveCParser.WEAK, ObjectiveCParser.UNSAFE_UNRETAINED, ObjectiveCParser.IB_OUTLET, ObjectiveCParser.IB_OUTLET_COLLECTION, ObjectiveCParser.IB_INSPECTABLE, ObjectiveCParser.IB_DESIGNABLE, ObjectiveCParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.identifier()
                pass
            elif token in [ObjectiveCParser.RETURN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self.match(ObjectiveCParser.RETURN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def typeName(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeNameContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_methodType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodType" ):
                listener.enterMethodType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodType" ):
                listener.exitMethodType(self)




    def methodType(self):

        localctx = ObjectiveCParser.MethodTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_methodType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(ObjectiveCParser.LP)
            self.state = 614
            self.typeName()
            self.state = 615
            self.match(ObjectiveCParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyImplementationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYNTHESIZE(self):
            return self.getToken(ObjectiveCParser.SYNTHESIZE, 0)

        def propertySynthesizeList(self):
            return self.getTypedRuleContext(ObjectiveCParser.PropertySynthesizeListContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def DYNAMIC(self):
            return self.getToken(ObjectiveCParser.DYNAMIC, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_propertyImplementation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyImplementation" ):
                listener.enterPropertyImplementation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyImplementation" ):
                listener.exitPropertyImplementation(self)




    def propertyImplementation(self):

        localctx = ObjectiveCParser.PropertyImplementationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_propertyImplementation)
        try:
            self.state = 625
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ObjectiveCParser.SYNTHESIZE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 617
                self.match(ObjectiveCParser.SYNTHESIZE)
                self.state = 618
                self.propertySynthesizeList()
                self.state = 619
                self.match(ObjectiveCParser.SEMI)
                pass
            elif token in [ObjectiveCParser.DYNAMIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 621
                self.match(ObjectiveCParser.DYNAMIC)
                self.state = 622
                self.propertySynthesizeList()
                self.state = 623
                self.match(ObjectiveCParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertySynthesizeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertySynthesizeItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.PropertySynthesizeItemContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.PropertySynthesizeItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_propertySynthesizeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertySynthesizeList" ):
                listener.enterPropertySynthesizeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertySynthesizeList" ):
                listener.exitPropertySynthesizeList(self)




    def propertySynthesizeList(self):

        localctx = ObjectiveCParser.PropertySynthesizeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_propertySynthesizeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.propertySynthesizeItem()
            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ObjectiveCParser.COMMA:
                self.state = 628
                self.match(ObjectiveCParser.COMMA)
                self.state = 629
                self.propertySynthesizeItem()
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertySynthesizeItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,i)


        def ASSIGNMENT(self):
            return self.getToken(ObjectiveCParser.ASSIGNMENT, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_propertySynthesizeItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertySynthesizeItem" ):
                listener.enterPropertySynthesizeItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertySynthesizeItem" ):
                listener.exitPropertySynthesizeItem(self)




    def propertySynthesizeItem(self):

        localctx = ObjectiveCParser.PropertySynthesizeItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_propertySynthesizeItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self.identifier()
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.ASSIGNMENT:
                self.state = 636
                self.match(ObjectiveCParser.ASSIGNMENT)
                self.state = 637
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypeSpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierContext,i)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def BITXOR(self):
            return self.getToken(ObjectiveCParser.BITXOR, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def nullabilitySpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.NullabilitySpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.NullabilitySpecifierContext,i)


        def blockParameters(self):
            return self.getTypedRuleContext(ObjectiveCParser.BlockParametersContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_blockType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockType" ):
                listener.enterBlockType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockType" ):
                listener.exitBlockType(self)




    def blockType(self):

        localctx = ObjectiveCParser.BlockTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_blockType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 640
                self.nullabilitySpecifier()


            self.state = 643
            self.typeSpecifier()
            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (ObjectiveCParser.NULL_UNSPECIFIED - 100)) | (1 << (ObjectiveCParser.NULLABLE - 100)) | (1 << (ObjectiveCParser.NONNULL - 100)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 100)))) != 0):
                self.state = 644
                self.nullabilitySpecifier()


            self.state = 647
            self.match(ObjectiveCParser.LP)
            self.state = 648
            self.match(ObjectiveCParser.BITXOR)
            self.state = 651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 649
                self.nullabilitySpecifier()

            elif la_ == 2:
                self.state = 650
                self.typeSpecifier()


            self.state = 653
            self.match(ObjectiveCParser.RP)
            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.LP:
                self.state = 654
                self.blockParameters()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericsSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(ObjectiveCParser.LT, 0)

        def GT(self):
            return self.getToken(ObjectiveCParser.GT, 0)

        def typeSpecifierWithPrefixes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypeSpecifierWithPrefixesContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierWithPrefixesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_genericsSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericsSpecifier" ):
                listener.enterGenericsSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericsSpecifier" ):
                listener.exitGenericsSpecifier(self)




    def genericsSpecifier(self):

        localctx = ObjectiveCParser.GenericsSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_genericsSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(ObjectiveCParser.LT)
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED) | (1 << ObjectiveCParser.VOID) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.TYPEOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0):
                self.state = 658
                self.typeSpecifierWithPrefixes()
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ObjectiveCParser.COMMA:
                    self.state = 659
                    self.match(ObjectiveCParser.COMMA)
                    self.state = 660
                    self.typeSpecifierWithPrefixes()
                    self.state = 665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 668
            self.match(ObjectiveCParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierWithPrefixesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierContext,0)


        def typePrefix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypePrefixContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypePrefixContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeSpecifierWithPrefixes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifierWithPrefixes" ):
                listener.enterTypeSpecifierWithPrefixes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifierWithPrefixes" ):
                listener.exitTypeSpecifierWithPrefixes(self)




    def typeSpecifierWithPrefixes(self):

        localctx = ObjectiveCParser.TypeSpecifierWithPrefixesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_typeSpecifierWithPrefixes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 670
                    self.typePrefix() 
                self.state = 675
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 676
            self.typeSpecifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(ObjectiveCParser.AT, 0)

        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def dictionaryPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.DictionaryPairContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.DictionaryPairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_dictionaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryExpression" ):
                listener.enterDictionaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryExpression" ):
                listener.exitDictionaryExpression(self)




    def dictionaryExpression(self):

        localctx = ObjectiveCParser.DictionaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_dictionaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(ObjectiveCParser.AT)
            self.state = 679
            self.match(ObjectiveCParser.LBRACE)
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.TRUE) | (1 << ObjectiveCParser.FALSE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.NIL) | (1 << ObjectiveCParser.NO) | (1 << ObjectiveCParser.NULL) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.YES) | (1 << ObjectiveCParser.ENCODE))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ObjectiveCParser.PROTOCOL - 70)) | (1 << (ObjectiveCParser.SELECTOR - 70)) | (1 << (ObjectiveCParser.ATOMIC - 70)) | (1 << (ObjectiveCParser.NONATOMIC - 70)) | (1 << (ObjectiveCParser.RETAIN - 70)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 70)) | (1 << (ObjectiveCParser.BLOCK - 70)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 70)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 70)) | (1 << (ObjectiveCParser.COVARIANT - 70)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 70)) | (1 << (ObjectiveCParser.DEPRECATED - 70)) | (1 << (ObjectiveCParser.KINDOF - 70)) | (1 << (ObjectiveCParser.UNUSED - 70)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 70)) | (1 << (ObjectiveCParser.NULLABLE - 70)) | (1 << (ObjectiveCParser.NONNULL - 70)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 70)) | (1 << (ObjectiveCParser.NS_INLINE - 70)) | (1 << (ObjectiveCParser.NS_ENUM - 70)) | (1 << (ObjectiveCParser.NS_OPTIONS - 70)) | (1 << (ObjectiveCParser.ASSIGN - 70)) | (1 << (ObjectiveCParser.COPY - 70)) | (1 << (ObjectiveCParser.GETTER - 70)) | (1 << (ObjectiveCParser.SETTER - 70)) | (1 << (ObjectiveCParser.STRONG - 70)) | (1 << (ObjectiveCParser.READONLY - 70)) | (1 << (ObjectiveCParser.READWRITE - 70)) | (1 << (ObjectiveCParser.WEAK - 70)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 70)) | (1 << (ObjectiveCParser.IB_OUTLET - 70)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 70)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 70)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 70)) | (1 << (ObjectiveCParser.IDENTIFIER - 70)) | (1 << (ObjectiveCParser.LP - 70)) | (1 << (ObjectiveCParser.LBRACK - 70)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (ObjectiveCParser.AT - 137)) | (1 << (ObjectiveCParser.BANG - 137)) | (1 << (ObjectiveCParser.TILDE - 137)) | (1 << (ObjectiveCParser.INC - 137)) | (1 << (ObjectiveCParser.DEC - 137)) | (1 << (ObjectiveCParser.ADD - 137)) | (1 << (ObjectiveCParser.SUB - 137)) | (1 << (ObjectiveCParser.MUL - 137)) | (1 << (ObjectiveCParser.BITAND - 137)) | (1 << (ObjectiveCParser.BITXOR - 137)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 137)) | (1 << (ObjectiveCParser.STRING_START - 137)) | (1 << (ObjectiveCParser.HEX_LITERAL - 137)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 137)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 137)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 137)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 137)))) != 0):
                self.state = 680
                self.dictionaryPair()
                self.state = 685
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 681
                        self.match(ObjectiveCParser.COMMA)
                        self.state = 682
                        self.dictionaryPair() 
                    self.state = 687
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ObjectiveCParser.COMMA:
                    self.state = 688
                    self.match(ObjectiveCParser.COMMA)




            self.state = 693
            self.match(ObjectiveCParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryPairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.CastExpressionContext,0)


        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_dictionaryPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryPair" ):
                listener.enterDictionaryPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryPair" ):
                listener.exitDictionaryPair(self)




    def dictionaryPair(self):

        localctx = ObjectiveCParser.DictionaryPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_dictionaryPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.castExpression()
            self.state = 696
            self.match(ObjectiveCParser.COLON)
            self.state = 697
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(ObjectiveCParser.AT, 0)

        def LBRACK(self):
            return self.getToken(ObjectiveCParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(ObjectiveCParser.RBRACK, 0)

        def expressions(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionsContext,0)


        def COMMA(self):
            return self.getToken(ObjectiveCParser.COMMA, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_arrayExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayExpression" ):
                listener.enterArrayExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayExpression" ):
                listener.exitArrayExpression(self)




    def arrayExpression(self):

        localctx = ObjectiveCParser.ArrayExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_arrayExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(ObjectiveCParser.AT)
            self.state = 700
            self.match(ObjectiveCParser.LBRACK)
            self.state = 705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.TRUE) | (1 << ObjectiveCParser.FALSE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.NIL) | (1 << ObjectiveCParser.NO) | (1 << ObjectiveCParser.NULL) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.YES) | (1 << ObjectiveCParser.ENCODE))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ObjectiveCParser.PROTOCOL - 70)) | (1 << (ObjectiveCParser.SELECTOR - 70)) | (1 << (ObjectiveCParser.ATOMIC - 70)) | (1 << (ObjectiveCParser.NONATOMIC - 70)) | (1 << (ObjectiveCParser.RETAIN - 70)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 70)) | (1 << (ObjectiveCParser.BLOCK - 70)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 70)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 70)) | (1 << (ObjectiveCParser.COVARIANT - 70)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 70)) | (1 << (ObjectiveCParser.DEPRECATED - 70)) | (1 << (ObjectiveCParser.KINDOF - 70)) | (1 << (ObjectiveCParser.UNUSED - 70)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 70)) | (1 << (ObjectiveCParser.NULLABLE - 70)) | (1 << (ObjectiveCParser.NONNULL - 70)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 70)) | (1 << (ObjectiveCParser.NS_INLINE - 70)) | (1 << (ObjectiveCParser.NS_ENUM - 70)) | (1 << (ObjectiveCParser.NS_OPTIONS - 70)) | (1 << (ObjectiveCParser.ASSIGN - 70)) | (1 << (ObjectiveCParser.COPY - 70)) | (1 << (ObjectiveCParser.GETTER - 70)) | (1 << (ObjectiveCParser.SETTER - 70)) | (1 << (ObjectiveCParser.STRONG - 70)) | (1 << (ObjectiveCParser.READONLY - 70)) | (1 << (ObjectiveCParser.READWRITE - 70)) | (1 << (ObjectiveCParser.WEAK - 70)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 70)) | (1 << (ObjectiveCParser.IB_OUTLET - 70)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 70)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 70)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 70)) | (1 << (ObjectiveCParser.IDENTIFIER - 70)) | (1 << (ObjectiveCParser.LP - 70)) | (1 << (ObjectiveCParser.LBRACK - 70)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (ObjectiveCParser.AT - 137)) | (1 << (ObjectiveCParser.BANG - 137)) | (1 << (ObjectiveCParser.TILDE - 137)) | (1 << (ObjectiveCParser.INC - 137)) | (1 << (ObjectiveCParser.DEC - 137)) | (1 << (ObjectiveCParser.ADD - 137)) | (1 << (ObjectiveCParser.SUB - 137)) | (1 << (ObjectiveCParser.MUL - 137)) | (1 << (ObjectiveCParser.BITAND - 137)) | (1 << (ObjectiveCParser.BITXOR - 137)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 137)) | (1 << (ObjectiveCParser.STRING_START - 137)) | (1 << (ObjectiveCParser.HEX_LITERAL - 137)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 137)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 137)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 137)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 137)))) != 0):
                self.state = 701
                self.expressions()
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ObjectiveCParser.COMMA:
                    self.state = 702
                    self.match(ObjectiveCParser.COMMA)




            self.state = 707
            self.match(ObjectiveCParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(ObjectiveCParser.AT, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def constant(self):
            return self.getTypedRuleContext(ObjectiveCParser.ConstantContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_boxExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxExpression" ):
                listener.enterBoxExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxExpression" ):
                listener.exitBoxExpression(self)




    def boxExpression(self):

        localctx = ObjectiveCParser.BoxExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_boxExpression)
        try:
            self.state = 719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 709
                self.match(ObjectiveCParser.AT)
                self.state = 710
                self.match(ObjectiveCParser.LP)
                self.state = 711
                self.expression(0)
                self.state = 712
                self.match(ObjectiveCParser.RP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self.match(ObjectiveCParser.AT)
                self.state = 717
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ObjectiveCParser.TRUE, ObjectiveCParser.FALSE, ObjectiveCParser.NIL, ObjectiveCParser.NO, ObjectiveCParser.NULL, ObjectiveCParser.YES, ObjectiveCParser.ADD, ObjectiveCParser.SUB, ObjectiveCParser.CHARACTER_LITERAL, ObjectiveCParser.HEX_LITERAL, ObjectiveCParser.OCTAL_LITERAL, ObjectiveCParser.BINARY_LITERAL, ObjectiveCParser.DECIMAL_LITERAL, ObjectiveCParser.FLOATING_POINT_LITERAL]:
                    self.state = 715
                    self.constant()
                    pass
                elif token in [ObjectiveCParser.BOOL, ObjectiveCParser.Class, ObjectiveCParser.BYCOPY, ObjectiveCParser.BYREF, ObjectiveCParser.ID, ObjectiveCParser.IMP, ObjectiveCParser.IN, ObjectiveCParser.INOUT, ObjectiveCParser.ONEWAY, ObjectiveCParser.OUT, ObjectiveCParser.PROTOCOL_, ObjectiveCParser.SEL, ObjectiveCParser.SELF, ObjectiveCParser.SUPER, ObjectiveCParser.ATOMIC, ObjectiveCParser.NONATOMIC, ObjectiveCParser.RETAIN, ObjectiveCParser.AUTORELEASING_QUALIFIER, ObjectiveCParser.BLOCK, ObjectiveCParser.BRIDGE_RETAINED, ObjectiveCParser.BRIDGE_TRANSFER, ObjectiveCParser.COVARIANT, ObjectiveCParser.CONTRAVARIANT, ObjectiveCParser.DEPRECATED, ObjectiveCParser.KINDOF, ObjectiveCParser.UNUSED, ObjectiveCParser.NULL_UNSPECIFIED, ObjectiveCParser.NULLABLE, ObjectiveCParser.NONNULL, ObjectiveCParser.NULL_RESETTABLE, ObjectiveCParser.NS_INLINE, ObjectiveCParser.NS_ENUM, ObjectiveCParser.NS_OPTIONS, ObjectiveCParser.ASSIGN, ObjectiveCParser.COPY, ObjectiveCParser.GETTER, ObjectiveCParser.SETTER, ObjectiveCParser.STRONG, ObjectiveCParser.READONLY, ObjectiveCParser.READWRITE, ObjectiveCParser.WEAK, ObjectiveCParser.UNSAFE_UNRETAINED, ObjectiveCParser.IB_OUTLET, ObjectiveCParser.IB_OUTLET_COLLECTION, ObjectiveCParser.IB_INSPECTABLE, ObjectiveCParser.IB_DESIGNABLE, ObjectiveCParser.IDENTIFIER]:
                    self.state = 716
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def typeVariableDeclaratorOrName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypeVariableDeclaratorOrNameContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypeVariableDeclaratorOrNameContext,i)


        def VOID(self):
            return self.getToken(ObjectiveCParser.VOID, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_blockParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockParameters" ):
                listener.enterBlockParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockParameters" ):
                listener.exitBlockParameters(self)




    def blockParameters(self):

        localctx = ObjectiveCParser.BlockParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_blockParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(ObjectiveCParser.LP)
            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED) | (1 << ObjectiveCParser.VOID) | (1 << ObjectiveCParser.VOLATILE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.ATTRIBUTE - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 82)) | (1 << (ObjectiveCParser.TYPEOF - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0):
                self.state = 724
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 722
                    self.typeVariableDeclaratorOrName()
                    pass

                elif la_ == 2:
                    self.state = 723
                    self.match(ObjectiveCParser.VOID)
                    pass


                self.state = 730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ObjectiveCParser.COMMA:
                    self.state = 726
                    self.match(ObjectiveCParser.COMMA)
                    self.state = 727
                    self.typeVariableDeclaratorOrName()
                    self.state = 732
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 735
            self.match(ObjectiveCParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeVariableDeclaratorOrNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeVariableDeclarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeVariableDeclaratorContext,0)


        def typeName(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeNameContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeVariableDeclaratorOrName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeVariableDeclaratorOrName" ):
                listener.enterTypeVariableDeclaratorOrName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeVariableDeclaratorOrName" ):
                listener.exitTypeVariableDeclaratorOrName(self)




    def typeVariableDeclaratorOrName(self):

        localctx = ObjectiveCParser.TypeVariableDeclaratorOrNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_typeVariableDeclaratorOrName)
        try:
            self.state = 739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 737
                self.typeVariableDeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 738
                self.typeName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITXOR(self):
            return self.getToken(ObjectiveCParser.BITXOR, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierContext,0)


        def nullabilitySpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.NullabilitySpecifierContext,0)


        def blockParameters(self):
            return self.getTypedRuleContext(ObjectiveCParser.BlockParametersContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_blockExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockExpression" ):
                listener.enterBlockExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockExpression" ):
                listener.exitBlockExpression(self)




    def blockExpression(self):

        localctx = ObjectiveCParser.BlockExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_blockExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.match(ObjectiveCParser.BITXOR)
            self.state = 743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 742
                self.typeSpecifier()


            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (ObjectiveCParser.NULL_UNSPECIFIED - 100)) | (1 << (ObjectiveCParser.NULLABLE - 100)) | (1 << (ObjectiveCParser.NONNULL - 100)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 100)))) != 0):
                self.state = 745
                self.nullabilitySpecifier()


            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.LP:
                self.state = 748
                self.blockParameters()


            self.state = 751
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(ObjectiveCParser.LBRACK, 0)

        def receiver(self):
            return self.getTypedRuleContext(ObjectiveCParser.ReceiverContext,0)


        def messageSelector(self):
            return self.getTypedRuleContext(ObjectiveCParser.MessageSelectorContext,0)


        def RBRACK(self):
            return self.getToken(ObjectiveCParser.RBRACK, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_messageExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageExpression" ):
                listener.enterMessageExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageExpression" ):
                listener.exitMessageExpression(self)




    def messageExpression(self):

        localctx = ObjectiveCParser.MessageExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_messageExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(ObjectiveCParser.LBRACK)
            self.state = 754
            self.receiver()
            self.state = 755
            self.messageSelector()
            self.state = 756
            self.match(ObjectiveCParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_receiver

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiver" ):
                listener.enterReceiver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiver" ):
                listener.exitReceiver(self)




    def receiver(self):

        localctx = ObjectiveCParser.ReceiverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_receiver)
        try:
            self.state = 760
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 758
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 759
                self.typeSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageSelectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector(self):
            return self.getTypedRuleContext(ObjectiveCParser.SelectorContext,0)


        def keywordArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.KeywordArgumentContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.KeywordArgumentContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_messageSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageSelector" ):
                listener.enterMessageSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageSelector" ):
                listener.exitMessageSelector(self)




    def messageSelector(self):

        localctx = ObjectiveCParser.MessageSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_messageSelector)
        self._la = 0 # Token type
        try:
            self.state = 768
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.selector()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 764 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 763
                    self.keywordArgument()
                    self.state = 766 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.RETURN) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)) | (1 << (ObjectiveCParser.COLON - 82)))) != 0)):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def keywordArgumentType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.KeywordArgumentTypeContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.KeywordArgumentTypeContext,i)


        def selector(self):
            return self.getTypedRuleContext(ObjectiveCParser.SelectorContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_keywordArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordArgument" ):
                listener.enterKeywordArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordArgument" ):
                listener.exitKeywordArgument(self)




    def keywordArgument(self):

        localctx = ObjectiveCParser.KeywordArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_keywordArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.RETURN) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0):
                self.state = 770
                self.selector()


            self.state = 773
            self.match(ObjectiveCParser.COLON)
            self.state = 774
            self.keywordArgumentType()
            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ObjectiveCParser.COMMA:
                self.state = 775
                self.match(ObjectiveCParser.COMMA)
                self.state = 776
                self.keywordArgumentType()
                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordArgumentTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressions(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionsContext,0)


        def nullabilitySpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.NullabilitySpecifierContext,0)


        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def initializerList(self):
            return self.getTypedRuleContext(ObjectiveCParser.InitializerListContext,0)


        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_keywordArgumentType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordArgumentType" ):
                listener.enterKeywordArgumentType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordArgumentType" ):
                listener.exitKeywordArgumentType(self)




    def keywordArgumentType(self):

        localctx = ObjectiveCParser.KeywordArgumentTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_keywordArgumentType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self.expressions()
            self.state = 784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 783
                self.nullabilitySpecifier()


            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.LBRACE:
                self.state = 786
                self.match(ObjectiveCParser.LBRACE)
                self.state = 787
                self.initializerList()
                self.state = 788
                self.match(ObjectiveCParser.RBRACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECTOR(self):
            return self.getToken(ObjectiveCParser.SELECTOR, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def selectorName(self):
            return self.getTypedRuleContext(ObjectiveCParser.SelectorNameContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_selectorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectorExpression" ):
                listener.enterSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectorExpression" ):
                listener.exitSelectorExpression(self)




    def selectorExpression(self):

        localctx = ObjectiveCParser.SelectorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_selectorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(ObjectiveCParser.SELECTOR)
            self.state = 793
            self.match(ObjectiveCParser.LP)
            self.state = 794
            self.selectorName()
            self.state = 795
            self.match(ObjectiveCParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectorNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.SelectorContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.SelectorContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COLON)
            else:
                return self.getToken(ObjectiveCParser.COLON, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_selectorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectorName" ):
                listener.enterSelectorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectorName" ):
                listener.exitSelectorName(self)




    def selectorName(self):

        localctx = ObjectiveCParser.SelectorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_selectorName)
        self._la = 0 # Token type
        try:
            self.state = 806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 797
                self.selector()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 802 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.RETURN) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0):
                        self.state = 798
                        self.selector()


                    self.state = 801
                    self.match(ObjectiveCParser.COLON)
                    self.state = 804 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.RETURN) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)) | (1 << (ObjectiveCParser.COLON - 82)))) != 0)):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProtocolExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL(self):
            return self.getToken(ObjectiveCParser.PROTOCOL, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def protocolName(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolNameContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_protocolExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocolExpression" ):
                listener.enterProtocolExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocolExpression" ):
                listener.exitProtocolExpression(self)




    def protocolExpression(self):

        localctx = ObjectiveCParser.ProtocolExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_protocolExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(ObjectiveCParser.PROTOCOL)
            self.state = 809
            self.match(ObjectiveCParser.LP)
            self.state = 810
            self.protocolName()
            self.state = 811
            self.match(ObjectiveCParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EncodeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCODE(self):
            return self.getToken(ObjectiveCParser.ENCODE, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def typeName(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeNameContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_encodeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncodeExpression" ):
                listener.enterEncodeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncodeExpression" ):
                listener.exitEncodeExpression(self)




    def encodeExpression(self):

        localctx = ObjectiveCParser.EncodeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_encodeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(ObjectiveCParser.ENCODE)
            self.state = 814
            self.match(ObjectiveCParser.LP)
            self.state = 815
            self.typeName()
            self.state = 816
            self.match(ObjectiveCParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeVariableDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclarationSpecifiersContext,0)


        def declarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclaratorContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeVariableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeVariableDeclarator" ):
                listener.enterTypeVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeVariableDeclarator" ):
                listener.exitTypeVariableDeclarator(self)




    def typeVariableDeclarator(self):

        localctx = ObjectiveCParser.TypeVariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_typeVariableDeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.declarationSpecifiers()
            self.state = 819
            self.declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(ObjectiveCParser.THROW, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = ObjectiveCParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_throwStatement)
        try:
            self.state = 828
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 821
                self.match(ObjectiveCParser.THROW)
                self.state = 822
                self.match(ObjectiveCParser.LP)
                self.state = 823
                self.identifier()
                self.state = 824
                self.match(ObjectiveCParser.RP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 826
                self.match(ObjectiveCParser.THROW)
                self.state = 827
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tryStatement = None # CompoundStatementContext
            self.finallyStatement = None # CompoundStatementContext

        def TRY(self):
            return self.getToken(ObjectiveCParser.TRY, 0)

        def compoundStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.CompoundStatementContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,i)


        def catchStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.CatchStatementContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.CatchStatementContext,i)


        def FINALLY(self):
            return self.getToken(ObjectiveCParser.FINALLY, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_tryBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryBlock" ):
                listener.enterTryBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryBlock" ):
                listener.exitTryBlock(self)




    def tryBlock(self):

        localctx = ObjectiveCParser.TryBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_tryBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.match(ObjectiveCParser.TRY)
            self.state = 831
            localctx.tryStatement = self.compoundStatement()
            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ObjectiveCParser.CATCH:
                self.state = 832
                self.catchStatement()
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.FINALLY:
                self.state = 838
                self.match(ObjectiveCParser.FINALLY)
                self.state = 839
                localctx.finallyStatement = self.compoundStatement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(ObjectiveCParser.CATCH, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def typeVariableDeclarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeVariableDeclaratorContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_catchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchStatement" ):
                listener.enterCatchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchStatement" ):
                listener.exitCatchStatement(self)




    def catchStatement(self):

        localctx = ObjectiveCParser.CatchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_catchStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.match(ObjectiveCParser.CATCH)
            self.state = 843
            self.match(ObjectiveCParser.LP)
            self.state = 844
            self.typeVariableDeclarator()
            self.state = 845
            self.match(ObjectiveCParser.RP)
            self.state = 846
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SynchronizedStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYNCHRONIZED(self):
            return self.getToken(ObjectiveCParser.SYNCHRONIZED, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_synchronizedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSynchronizedStatement" ):
                listener.enterSynchronizedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSynchronizedStatement" ):
                listener.exitSynchronizedStatement(self)




    def synchronizedStatement(self):

        localctx = ObjectiveCParser.SynchronizedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_synchronizedStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(ObjectiveCParser.SYNCHRONIZED)
            self.state = 849
            self.match(ObjectiveCParser.LP)
            self.state = 850
            self.expression(0)
            self.state = 851
            self.match(ObjectiveCParser.RP)
            self.state = 852
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AutoreleaseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTORELEASEPOOL(self):
            return self.getToken(ObjectiveCParser.AUTORELEASEPOOL, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_autoreleaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAutoreleaseStatement" ):
                listener.enterAutoreleaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAutoreleaseStatement" ):
                listener.exitAutoreleaseStatement(self)




    def autoreleaseStatement(self):

        localctx = ObjectiveCParser.AutoreleaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_autoreleaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(ObjectiveCParser.AUTORELEASEPOOL)
            self.state = 855
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSignature(self):
            return self.getTypedRuleContext(ObjectiveCParser.FunctionSignatureContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)




    def functionDeclaration(self):

        localctx = ObjectiveCParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_functionDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.functionSignature()
            self.state = 858
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSignature(self):
            return self.getTypedRuleContext(ObjectiveCParser.FunctionSignatureContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = ObjectiveCParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_functionDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.functionSignature()
            self.state = 861
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSignatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclarationSpecifiersContext,0)


        def attributeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.AttributeSpecifierContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ParameterListContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_functionSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSignature" ):
                listener.enterFunctionSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSignature" ):
                listener.exitFunctionSignature(self)




    def functionSignature(self):

        localctx = ObjectiveCParser.FunctionSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_functionSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 863
                self.declarationSpecifiers()


            self.state = 866
            self.identifier()

            self.state = 867
            self.match(ObjectiveCParser.LP)
            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED) | (1 << ObjectiveCParser.VOID) | (1 << ObjectiveCParser.VOLATILE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.ATTRIBUTE - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 82)) | (1 << (ObjectiveCParser.TYPEOF - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0):
                self.state = 868
                self.parameterList()


            self.state = 871
            self.match(ObjectiveCParser.RP)
            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.ATTRIBUTE:
                self.state = 873
                self.attributeSpecifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeName(self):
            return self.getTypedRuleContext(ObjectiveCParser.AttributeNameContext,0)


        def attributeParameters(self):
            return self.getTypedRuleContext(ObjectiveCParser.AttributeParametersContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = ObjectiveCParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.attributeName()
            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.LP:
                self.state = 877
                self.attributeParameters()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(ObjectiveCParser.CONST, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_attributeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeName" ):
                listener.enterAttributeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeName" ):
                listener.exitAttributeName(self)




    def attributeName(self):

        localctx = ObjectiveCParser.AttributeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_attributeName)
        try:
            self.state = 882
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ObjectiveCParser.CONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 880
                self.match(ObjectiveCParser.CONST)
                pass
            elif token in [ObjectiveCParser.BOOL, ObjectiveCParser.Class, ObjectiveCParser.BYCOPY, ObjectiveCParser.BYREF, ObjectiveCParser.ID, ObjectiveCParser.IMP, ObjectiveCParser.IN, ObjectiveCParser.INOUT, ObjectiveCParser.ONEWAY, ObjectiveCParser.OUT, ObjectiveCParser.PROTOCOL_, ObjectiveCParser.SEL, ObjectiveCParser.SELF, ObjectiveCParser.SUPER, ObjectiveCParser.ATOMIC, ObjectiveCParser.NONATOMIC, ObjectiveCParser.RETAIN, ObjectiveCParser.AUTORELEASING_QUALIFIER, ObjectiveCParser.BLOCK, ObjectiveCParser.BRIDGE_RETAINED, ObjectiveCParser.BRIDGE_TRANSFER, ObjectiveCParser.COVARIANT, ObjectiveCParser.CONTRAVARIANT, ObjectiveCParser.DEPRECATED, ObjectiveCParser.KINDOF, ObjectiveCParser.UNUSED, ObjectiveCParser.NULL_UNSPECIFIED, ObjectiveCParser.NULLABLE, ObjectiveCParser.NONNULL, ObjectiveCParser.NULL_RESETTABLE, ObjectiveCParser.NS_INLINE, ObjectiveCParser.NS_ENUM, ObjectiveCParser.NS_OPTIONS, ObjectiveCParser.ASSIGN, ObjectiveCParser.COPY, ObjectiveCParser.GETTER, ObjectiveCParser.SETTER, ObjectiveCParser.STRONG, ObjectiveCParser.READONLY, ObjectiveCParser.READWRITE, ObjectiveCParser.WEAK, ObjectiveCParser.UNSAFE_UNRETAINED, ObjectiveCParser.IB_OUTLET, ObjectiveCParser.IB_OUTLET_COLLECTION, ObjectiveCParser.IB_INSPECTABLE, ObjectiveCParser.IB_DESIGNABLE, ObjectiveCParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 881
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def attributeParameterList(self):
            return self.getTypedRuleContext(ObjectiveCParser.AttributeParameterListContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_attributeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeParameters" ):
                listener.enterAttributeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeParameters" ):
                listener.exitAttributeParameters(self)




    def attributeParameters(self):

        localctx = ObjectiveCParser.AttributeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_attributeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.match(ObjectiveCParser.LP)
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.TRUE) | (1 << ObjectiveCParser.FALSE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.NIL) | (1 << ObjectiveCParser.NO) | (1 << ObjectiveCParser.NULL) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.YES))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0) or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & ((1 << (ObjectiveCParser.ADD - 153)) | (1 << (ObjectiveCParser.SUB - 153)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 153)) | (1 << (ObjectiveCParser.STRING_START - 153)) | (1 << (ObjectiveCParser.HEX_LITERAL - 153)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 153)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 153)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 153)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 153)))) != 0):
                self.state = 885
                self.attributeParameterList()


            self.state = 888
            self.match(ObjectiveCParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.AttributeParameterContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.AttributeParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_attributeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeParameterList" ):
                listener.enterAttributeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeParameterList" ):
                listener.exitAttributeParameterList(self)




    def attributeParameterList(self):

        localctx = ObjectiveCParser.AttributeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_attributeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.attributeParameter()
            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ObjectiveCParser.COMMA:
                self.state = 891
                self.match(ObjectiveCParser.COMMA)
                self.state = 892
                self.attributeParameter()
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self):
            return self.getTypedRuleContext(ObjectiveCParser.AttributeContext,0)


        def constant(self):
            return self.getTypedRuleContext(ObjectiveCParser.ConstantContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(ObjectiveCParser.StringLiteralContext,0)


        def attributeParameterAssignment(self):
            return self.getTypedRuleContext(ObjectiveCParser.AttributeParameterAssignmentContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_attributeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeParameter" ):
                listener.enterAttributeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeParameter" ):
                listener.exitAttributeParameter(self)




    def attributeParameter(self):

        localctx = ObjectiveCParser.AttributeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_attributeParameter)
        try:
            self.state = 902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 898
                self.attribute()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 899
                self.constant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 900
                self.stringLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 901
                self.attributeParameterAssignment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeParameterAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.AttributeNameContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.AttributeNameContext,i)


        def ASSIGNMENT(self):
            return self.getToken(ObjectiveCParser.ASSIGNMENT, 0)

        def constant(self):
            return self.getTypedRuleContext(ObjectiveCParser.ConstantContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(ObjectiveCParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_attributeParameterAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeParameterAssignment" ):
                listener.enterAttributeParameterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeParameterAssignment" ):
                listener.exitAttributeParameterAssignment(self)




    def attributeParameterAssignment(self):

        localctx = ObjectiveCParser.AttributeParameterAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_attributeParameterAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.attributeName()
            self.state = 905
            self.match(ObjectiveCParser.ASSIGNMENT)
            self.state = 909
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ObjectiveCParser.TRUE, ObjectiveCParser.FALSE, ObjectiveCParser.NIL, ObjectiveCParser.NO, ObjectiveCParser.NULL, ObjectiveCParser.YES, ObjectiveCParser.ADD, ObjectiveCParser.SUB, ObjectiveCParser.CHARACTER_LITERAL, ObjectiveCParser.HEX_LITERAL, ObjectiveCParser.OCTAL_LITERAL, ObjectiveCParser.BINARY_LITERAL, ObjectiveCParser.DECIMAL_LITERAL, ObjectiveCParser.FLOATING_POINT_LITERAL]:
                self.state = 906
                self.constant()
                pass
            elif token in [ObjectiveCParser.CONST, ObjectiveCParser.BOOL, ObjectiveCParser.Class, ObjectiveCParser.BYCOPY, ObjectiveCParser.BYREF, ObjectiveCParser.ID, ObjectiveCParser.IMP, ObjectiveCParser.IN, ObjectiveCParser.INOUT, ObjectiveCParser.ONEWAY, ObjectiveCParser.OUT, ObjectiveCParser.PROTOCOL_, ObjectiveCParser.SEL, ObjectiveCParser.SELF, ObjectiveCParser.SUPER, ObjectiveCParser.ATOMIC, ObjectiveCParser.NONATOMIC, ObjectiveCParser.RETAIN, ObjectiveCParser.AUTORELEASING_QUALIFIER, ObjectiveCParser.BLOCK, ObjectiveCParser.BRIDGE_RETAINED, ObjectiveCParser.BRIDGE_TRANSFER, ObjectiveCParser.COVARIANT, ObjectiveCParser.CONTRAVARIANT, ObjectiveCParser.DEPRECATED, ObjectiveCParser.KINDOF, ObjectiveCParser.UNUSED, ObjectiveCParser.NULL_UNSPECIFIED, ObjectiveCParser.NULLABLE, ObjectiveCParser.NONNULL, ObjectiveCParser.NULL_RESETTABLE, ObjectiveCParser.NS_INLINE, ObjectiveCParser.NS_ENUM, ObjectiveCParser.NS_OPTIONS, ObjectiveCParser.ASSIGN, ObjectiveCParser.COPY, ObjectiveCParser.GETTER, ObjectiveCParser.SETTER, ObjectiveCParser.STRONG, ObjectiveCParser.READONLY, ObjectiveCParser.READWRITE, ObjectiveCParser.WEAK, ObjectiveCParser.UNSAFE_UNRETAINED, ObjectiveCParser.IB_OUTLET, ObjectiveCParser.IB_OUTLET_COLLECTION, ObjectiveCParser.IB_INSPECTABLE, ObjectiveCParser.IB_DESIGNABLE, ObjectiveCParser.IDENTIFIER]:
                self.state = 907
                self.attributeName()
                pass
            elif token in [ObjectiveCParser.STRING_START]:
                self.state = 908
                self.stringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.FunctionCallExpressionContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.EnumDeclarationContext,0)


        def varDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.VarDeclarationContext,0)


        def typedefDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypedefDeclarationContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = ObjectiveCParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_declaration)
        try:
            self.state = 915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 911
                self.functionCallExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 912
                self.enumDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 913
                self.varDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 914
                self.typedefDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def directDeclarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.DirectDeclaratorContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def attributeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.AttributeSpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.AttributeSpecifierContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_functionCallExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpression" ):
                listener.enterFunctionCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpression" ):
                listener.exitFunctionCallExpression(self)




    def functionCallExpression(self):

        localctx = ObjectiveCParser.FunctionCallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_functionCallExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.ATTRIBUTE:
                self.state = 917
                self.attributeSpecifier()


            self.state = 920
            self.identifier()
            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.ATTRIBUTE:
                self.state = 921
                self.attributeSpecifier()


            self.state = 924
            self.match(ObjectiveCParser.LP)
            self.state = 925
            self.directDeclarator()
            self.state = 926
            self.match(ObjectiveCParser.RP)
            self.state = 927
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.EnumSpecifierContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def attributeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.AttributeSpecifierContext,0)


        def TYPEDEF(self):
            return self.getToken(ObjectiveCParser.TYPEDEF, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)




    def enumDeclaration(self):

        localctx = ObjectiveCParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.ATTRIBUTE:
                self.state = 929
                self.attributeSpecifier()


            self.state = 933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.TYPEDEF:
                self.state = 932
                self.match(ObjectiveCParser.TYPEDEF)


            self.state = 935
            self.enumSpecifier()
            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0):
                self.state = 936
                self.identifier()


            self.state = 939
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(ObjectiveCParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_varDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDeclaration" ):
                listener.enterVarDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDeclaration" ):
                listener.exitVarDeclaration(self)




    def varDeclaration(self):

        localctx = ObjectiveCParser.VarDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_varDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 941
                self.declarationSpecifiers()
                self.state = 942
                self.initDeclaratorList()
                pass

            elif la_ == 2:
                self.state = 944
                self.declarationSpecifiers()
                pass


            self.state = 947
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedefDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEDEF(self):
            return self.getToken(ObjectiveCParser.TYPEDEF, 0)

        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclarationSpecifiersContext,0)


        def typeDeclaratorList(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeDeclaratorListContext,0)


        def attributeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.AttributeSpecifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typedefDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefDeclaration" ):
                listener.enterTypedefDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefDeclaration" ):
                listener.exitTypedefDeclaration(self)




    def typedefDeclaration(self):

        localctx = ObjectiveCParser.TypedefDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_typedefDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.ATTRIBUTE:
                self.state = 949
                self.attributeSpecifier()


            self.state = 952
            self.match(ObjectiveCParser.TYPEDEF)
            self.state = 957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 953
                self.declarationSpecifiers()
                self.state = 954
                self.typeDeclaratorList()
                pass

            elif la_ == 2:
                self.state = 956
                self.declarationSpecifiers()
                pass


            self.state = 959
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypeDeclaratorContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypeDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclaratorList" ):
                listener.enterTypeDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclaratorList" ):
                listener.exitTypeDeclaratorList(self)




    def typeDeclaratorList(self):

        localctx = ObjectiveCParser.TypeDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_typeDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.typeDeclarator()
            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ObjectiveCParser.COMMA:
                self.state = 962
                self.match(ObjectiveCParser.COMMA)
                self.state = 963
                self.typeDeclarator()
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ObjectiveCParser.PointerContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclarator" ):
                listener.enterTypeDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclarator" ):
                listener.exitTypeDeclarator(self)




    def typeDeclarator(self):

        localctx = ObjectiveCParser.TypeDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_typeDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.MUL:
                self.state = 969
                self.pointer()


            self.state = 972
            self.directDeclarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.StorageClassSpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.StorageClassSpecifierContext,i)


        def attributeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.AttributeSpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.AttributeSpecifierContext,i)


        def arcBehaviourSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ArcBehaviourSpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ArcBehaviourSpecifierContext,i)


        def nullabilitySpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.NullabilitySpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.NullabilitySpecifierContext,i)


        def ibOutletQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.IbOutletQualifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.IbOutletQualifierContext,i)


        def typePrefix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypePrefixContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypePrefixContext,i)


        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypeQualifierContext,i)


        def typeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypeSpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)




    def declarationSpecifiers(self):

        localctx = ObjectiveCParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 982
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                    if la_ == 1:
                        self.state = 974
                        self.storageClassSpecifier()
                        pass

                    elif la_ == 2:
                        self.state = 975
                        self.attributeSpecifier()
                        pass

                    elif la_ == 3:
                        self.state = 976
                        self.arcBehaviourSpecifier()
                        pass

                    elif la_ == 4:
                        self.state = 977
                        self.nullabilitySpecifier()
                        pass

                    elif la_ == 5:
                        self.state = 978
                        self.ibOutletQualifier()
                        pass

                    elif la_ == 6:
                        self.state = 979
                        self.typePrefix()
                        pass

                    elif la_ == 7:
                        self.state = 980
                        self.typeQualifier()
                        pass

                    elif la_ == 8:
                        self.state = 981
                        self.typeSpecifier()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 984 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(ObjectiveCParser.ATTRIBUTE, 0)

        def LP(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.LP)
            else:
                return self.getToken(ObjectiveCParser.LP, i)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.AttributeContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.AttributeContext,i)


        def RP(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.RP)
            else:
                return self.getToken(ObjectiveCParser.RP, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_attributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeSpecifier" ):
                listener.enterAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeSpecifier" ):
                listener.exitAttributeSpecifier(self)




    def attributeSpecifier(self):

        localctx = ObjectiveCParser.AttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_attributeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.match(ObjectiveCParser.ATTRIBUTE)
            self.state = 987
            self.match(ObjectiveCParser.LP)
            self.state = 988
            self.match(ObjectiveCParser.LP)
            self.state = 989
            self.attribute()
            self.state = 994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ObjectiveCParser.COMMA:
                self.state = 990
                self.match(ObjectiveCParser.COMMA)
                self.state = 991
                self.attribute()
                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 997
            self.match(ObjectiveCParser.RP)
            self.state = 998
            self.match(ObjectiveCParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.InitDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)




    def initDeclaratorList(self):

        localctx = ObjectiveCParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.initDeclarator()
            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ObjectiveCParser.COMMA:
                self.state = 1001
                self.match(ObjectiveCParser.COMMA)
                self.state = 1002
                self.initDeclarator()
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclaratorContext,0)


        def ASSIGNMENT(self):
            return self.getToken(ObjectiveCParser.ASSIGNMENT, 0)

        def initializer(self):
            return self.getTypedRuleContext(ObjectiveCParser.InitializerContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)




    def initDeclarator(self):

        localctx = ObjectiveCParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.declarator()
            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.ASSIGNMENT:
                self.state = 1009
                self.match(ObjectiveCParser.ASSIGNMENT)
                self.state = 1010
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(ObjectiveCParser.STRUCT, 0)

        def UNION(self):
            return self.getToken(ObjectiveCParser.UNION, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def fieldDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.FieldDeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.FieldDeclarationContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)




    def structOrUnionSpecifier(self):

        localctx = ObjectiveCParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            _la = self._input.LA(1)
            if not(_la==ObjectiveCParser.STRUCT or _la==ObjectiveCParser.UNION):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1014
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0):
                    self.state = 1015
                    self.identifier()


                self.state = 1018
                self.match(ObjectiveCParser.LBRACE)
                self.state = 1020 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1019
                    self.fieldDeclaration()
                    self.state = 1022 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED) | (1 << ObjectiveCParser.VOID) | (1 << ObjectiveCParser.VOLATILE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 82)) | (1 << (ObjectiveCParser.TYPEOF - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0)):
                        break

                self.state = 1024
                self.match(ObjectiveCParser.RBRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ObjectiveCParser.SpecifierQualifierListContext,0)


        def fieldDeclaratorList(self):
            return self.getTypedRuleContext(ObjectiveCParser.FieldDeclaratorListContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def macro(self):
            return self.getTypedRuleContext(ObjectiveCParser.MacroContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)




    def fieldDeclaration(self):

        localctx = ObjectiveCParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_fieldDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.specifierQualifierList()
            self.state = 1029
            self.fieldDeclaratorList()
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0):
                self.state = 1030
                self.macro()


            self.state = 1033
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arcBehaviourSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ArcBehaviourSpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ArcBehaviourSpecifierContext,i)


        def nullabilitySpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.NullabilitySpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.NullabilitySpecifierContext,i)


        def ibOutletQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.IbOutletQualifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.IbOutletQualifierContext,i)


        def typePrefix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypePrefixContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypePrefixContext,i)


        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypeQualifierContext,i)


        def typeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypeSpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)




    def specifierQualifierList(self):

        localctx = ObjectiveCParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_specifierQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1041
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                    if la_ == 1:
                        self.state = 1035
                        self.arcBehaviourSpecifier()
                        pass

                    elif la_ == 2:
                        self.state = 1036
                        self.nullabilitySpecifier()
                        pass

                    elif la_ == 3:
                        self.state = 1037
                        self.ibOutletQualifier()
                        pass

                    elif la_ == 4:
                        self.state = 1038
                        self.typePrefix()
                        pass

                    elif la_ == 5:
                        self.state = 1039
                        self.typeQualifier()
                        pass

                    elif la_ == 6:
                        self.state = 1040
                        self.typeSpecifier()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 1043 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IbOutletQualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IB_OUTLET_COLLECTION(self):
            return self.getToken(ObjectiveCParser.IB_OUTLET_COLLECTION, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def IB_OUTLET(self):
            return self.getToken(ObjectiveCParser.IB_OUTLET, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_ibOutletQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIbOutletQualifier" ):
                listener.enterIbOutletQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIbOutletQualifier" ):
                listener.exitIbOutletQualifier(self)




    def ibOutletQualifier(self):

        localctx = ObjectiveCParser.IbOutletQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_ibOutletQualifier)
        try:
            self.state = 1051
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ObjectiveCParser.IB_OUTLET_COLLECTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1045
                self.match(ObjectiveCParser.IB_OUTLET_COLLECTION)
                self.state = 1046
                self.match(ObjectiveCParser.LP)
                self.state = 1047
                self.identifier()
                self.state = 1048
                self.match(ObjectiveCParser.RP)
                pass
            elif token in [ObjectiveCParser.IB_OUTLET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1050
                self.match(ObjectiveCParser.IB_OUTLET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArcBehaviourSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WEAK_QUALIFIER(self):
            return self.getToken(ObjectiveCParser.WEAK_QUALIFIER, 0)

        def STRONG_QUALIFIER(self):
            return self.getToken(ObjectiveCParser.STRONG_QUALIFIER, 0)

        def AUTORELEASING_QUALIFIER(self):
            return self.getToken(ObjectiveCParser.AUTORELEASING_QUALIFIER, 0)

        def UNSAFE_UNRETAINED_QUALIFIER(self):
            return self.getToken(ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_arcBehaviourSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArcBehaviourSpecifier" ):
                listener.enterArcBehaviourSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArcBehaviourSpecifier" ):
                listener.exitArcBehaviourSpecifier(self)




    def arcBehaviourSpecifier(self):

        localctx = ObjectiveCParser.ArcBehaviourSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_arcBehaviourSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            _la = self._input.LA(1)
            if not(((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 86)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 86)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 86)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 86)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullabilitySpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_UNSPECIFIED(self):
            return self.getToken(ObjectiveCParser.NULL_UNSPECIFIED, 0)

        def NULLABLE(self):
            return self.getToken(ObjectiveCParser.NULLABLE, 0)

        def NONNULL(self):
            return self.getToken(ObjectiveCParser.NONNULL, 0)

        def NULL_RESETTABLE(self):
            return self.getToken(ObjectiveCParser.NULL_RESETTABLE, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_nullabilitySpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullabilitySpecifier" ):
                listener.enterNullabilitySpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullabilitySpecifier" ):
                listener.exitNullabilitySpecifier(self)




    def nullabilitySpecifier(self):

        localctx = ObjectiveCParser.NullabilitySpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_nullabilitySpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            _la = self._input.LA(1)
            if not(((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (ObjectiveCParser.NULL_UNSPECIFIED - 100)) | (1 << (ObjectiveCParser.NULLABLE - 100)) | (1 << (ObjectiveCParser.NONNULL - 100)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 100)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO(self):
            return self.getToken(ObjectiveCParser.AUTO, 0)

        def REGISTER(self):
            return self.getToken(ObjectiveCParser.REGISTER, 0)

        def STATIC(self):
            return self.getToken(ObjectiveCParser.STATIC, 0)

        def EXTERN(self):
            return self.getToken(ObjectiveCParser.EXTERN, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)




    def storageClassSpecifier(self):

        localctx = ObjectiveCParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.STATIC))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePrefixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRIDGE(self):
            return self.getToken(ObjectiveCParser.BRIDGE, 0)

        def BRIDGE_TRANSFER(self):
            return self.getToken(ObjectiveCParser.BRIDGE_TRANSFER, 0)

        def BRIDGE_RETAINED(self):
            return self.getToken(ObjectiveCParser.BRIDGE_RETAINED, 0)

        def BLOCK(self):
            return self.getToken(ObjectiveCParser.BLOCK, 0)

        def INLINE(self):
            return self.getToken(ObjectiveCParser.INLINE, 0)

        def NS_INLINE(self):
            return self.getToken(ObjectiveCParser.NS_INLINE, 0)

        def KINDOF(self):
            return self.getToken(ObjectiveCParser.KINDOF, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typePrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePrefix" ):
                listener.enterTypePrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePrefix" ):
                listener.exitTypePrefix(self)




    def typePrefix(self):

        localctx = ObjectiveCParser.TypePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_typePrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            _la = self._input.LA(1)
            if not(_la==ObjectiveCParser.INLINE or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (ObjectiveCParser.BLOCK - 87)) | (1 << (ObjectiveCParser.BRIDGE - 87)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 87)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 87)) | (1 << (ObjectiveCParser.KINDOF - 87)) | (1 << (ObjectiveCParser.NS_INLINE - 87)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(ObjectiveCParser.CONST, 0)

        def VOLATILE(self):
            return self.getToken(ObjectiveCParser.VOLATILE, 0)

        def RESTRICT(self):
            return self.getToken(ObjectiveCParser.RESTRICT, 0)

        def protocolQualifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolQualifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)




    def typeQualifier(self):

        localctx = ObjectiveCParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_typeQualifier)
        try:
            self.state = 1065
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ObjectiveCParser.CONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1061
                self.match(ObjectiveCParser.CONST)
                pass
            elif token in [ObjectiveCParser.VOLATILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1062
                self.match(ObjectiveCParser.VOLATILE)
                pass
            elif token in [ObjectiveCParser.RESTRICT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1063
                self.match(ObjectiveCParser.RESTRICT)
                pass
            elif token in [ObjectiveCParser.BYCOPY, ObjectiveCParser.BYREF, ObjectiveCParser.IN, ObjectiveCParser.INOUT, ObjectiveCParser.ONEWAY, ObjectiveCParser.OUT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1064
                self.protocolQualifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProtocolQualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(ObjectiveCParser.IN, 0)

        def OUT(self):
            return self.getToken(ObjectiveCParser.OUT, 0)

        def INOUT(self):
            return self.getToken(ObjectiveCParser.INOUT, 0)

        def BYCOPY(self):
            return self.getToken(ObjectiveCParser.BYCOPY, 0)

        def BYREF(self):
            return self.getToken(ObjectiveCParser.BYREF, 0)

        def ONEWAY(self):
            return self.getToken(ObjectiveCParser.ONEWAY, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_protocolQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocolQualifier" ):
                listener.enterProtocolQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocolQualifier" ):
                listener.exitProtocolQualifier(self)




    def protocolQualifier(self):

        localctx = ObjectiveCParser.ProtocolQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_protocolQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VOID(self):
            return self.getToken(ObjectiveCParser.VOID, 0)

        def CHAR(self):
            return self.getToken(ObjectiveCParser.CHAR, 0)

        def SHORT(self):
            return self.getToken(ObjectiveCParser.SHORT, 0)

        def INT(self):
            return self.getToken(ObjectiveCParser.INT, 0)

        def LONG(self):
            return self.getToken(ObjectiveCParser.LONG, 0)

        def FLOAT(self):
            return self.getToken(ObjectiveCParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(ObjectiveCParser.DOUBLE, 0)

        def SIGNED(self):
            return self.getToken(ObjectiveCParser.SIGNED, 0)

        def UNSIGNED(self):
            return self.getToken(ObjectiveCParser.UNSIGNED, 0)

        def typeofExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeofExpressionContext,0)


        def genericTypeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.GenericTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.EnumSpecifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ObjectiveCParser.PointerContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)




    def typeSpecifier(self):

        localctx = ObjectiveCParser.TypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_typeSpecifier)
        try:
            self.state = 1086
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1069
                self.match(ObjectiveCParser.VOID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1070
                self.match(ObjectiveCParser.CHAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1071
                self.match(ObjectiveCParser.SHORT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1072
                self.match(ObjectiveCParser.INT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1073
                self.match(ObjectiveCParser.LONG)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1074
                self.match(ObjectiveCParser.FLOAT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1075
                self.match(ObjectiveCParser.DOUBLE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1076
                self.match(ObjectiveCParser.SIGNED)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1077
                self.match(ObjectiveCParser.UNSIGNED)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1078
                self.typeofExpression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1079
                self.genericTypeSpecifier()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1080
                self.structOrUnionSpecifier()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1081
                self.enumSpecifier()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1082
                self.identifier()
                self.state = 1084
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1083
                    self.pointer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeofExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEOF(self):
            return self.getToken(ObjectiveCParser.TYPEOF, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeofExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeofExpression" ):
                listener.enterTypeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeofExpression" ):
                listener.exitTypeofExpression(self)




    def typeofExpression(self):

        localctx = ObjectiveCParser.TypeofExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_typeofExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.match(ObjectiveCParser.TYPEOF)

            self.state = 1089
            self.match(ObjectiveCParser.LP)
            self.state = 1090
            self.expression(0)
            self.state = 1091
            self.match(ObjectiveCParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.FieldDeclaratorContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.FieldDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_fieldDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaratorList" ):
                listener.enterFieldDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaratorList" ):
                listener.exitFieldDeclaratorList(self)




    def fieldDeclaratorList(self):

        localctx = ObjectiveCParser.FieldDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_fieldDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.fieldDeclarator()
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ObjectiveCParser.COMMA:
                self.state = 1094
                self.match(ObjectiveCParser.COMMA)
                self.state = 1095
                self.fieldDeclarator()
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclaratorContext,0)


        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def constant(self):
            return self.getTypedRuleContext(ObjectiveCParser.ConstantContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_fieldDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclarator" ):
                listener.enterFieldDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclarator" ):
                listener.exitFieldDeclarator(self)




    def fieldDeclarator(self):

        localctx = ObjectiveCParser.FieldDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_fieldDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 1107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1101
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)) | (1 << (ObjectiveCParser.ATOMIC - 40)) | (1 << (ObjectiveCParser.NONATOMIC - 40)) | (1 << (ObjectiveCParser.RETAIN - 40)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 40)) | (1 << (ObjectiveCParser.BLOCK - 40)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 40)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 40)) | (1 << (ObjectiveCParser.COVARIANT - 40)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 40)) | (1 << (ObjectiveCParser.DEPRECATED - 40)) | (1 << (ObjectiveCParser.KINDOF - 40)) | (1 << (ObjectiveCParser.UNUSED - 40)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 40)) | (1 << (ObjectiveCParser.NULLABLE - 40)) | (1 << (ObjectiveCParser.NONNULL - 40)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (ObjectiveCParser.NS_INLINE - 104)) | (1 << (ObjectiveCParser.NS_ENUM - 104)) | (1 << (ObjectiveCParser.NS_OPTIONS - 104)) | (1 << (ObjectiveCParser.ASSIGN - 104)) | (1 << (ObjectiveCParser.COPY - 104)) | (1 << (ObjectiveCParser.GETTER - 104)) | (1 << (ObjectiveCParser.SETTER - 104)) | (1 << (ObjectiveCParser.STRONG - 104)) | (1 << (ObjectiveCParser.READONLY - 104)) | (1 << (ObjectiveCParser.READWRITE - 104)) | (1 << (ObjectiveCParser.WEAK - 104)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 104)) | (1 << (ObjectiveCParser.IB_OUTLET - 104)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 104)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 104)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 104)) | (1 << (ObjectiveCParser.IDENTIFIER - 104)) | (1 << (ObjectiveCParser.LP - 104)) | (1 << (ObjectiveCParser.MUL - 104)))) != 0):
                    self.state = 1102
                    self.declarator()


                self.state = 1105
                self.match(ObjectiveCParser.COLON)
                self.state = 1106
                self.constant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(ObjectiveCParser.ENUM, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,i)


        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(ObjectiveCParser.EnumeratorListContext,0)


        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def typeName(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeNameContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def COMMA(self):
            return self.getToken(ObjectiveCParser.COMMA, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def NS_OPTIONS(self):
            return self.getToken(ObjectiveCParser.NS_OPTIONS, 0)

        def NS_ENUM(self):
            return self.getToken(ObjectiveCParser.NS_ENUM, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)




    def enumSpecifier(self):

        localctx = ObjectiveCParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 1140
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ObjectiveCParser.ENUM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1109
                self.match(ObjectiveCParser.ENUM)
                self.state = 1115
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                if la_ == 1:
                    self.state = 1111
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0):
                        self.state = 1110
                        self.identifier()


                    self.state = 1113
                    self.match(ObjectiveCParser.COLON)
                    self.state = 1114
                    self.typeName()


                self.state = 1128
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ObjectiveCParser.BOOL, ObjectiveCParser.Class, ObjectiveCParser.BYCOPY, ObjectiveCParser.BYREF, ObjectiveCParser.ID, ObjectiveCParser.IMP, ObjectiveCParser.IN, ObjectiveCParser.INOUT, ObjectiveCParser.ONEWAY, ObjectiveCParser.OUT, ObjectiveCParser.PROTOCOL_, ObjectiveCParser.SEL, ObjectiveCParser.SELF, ObjectiveCParser.SUPER, ObjectiveCParser.ATOMIC, ObjectiveCParser.NONATOMIC, ObjectiveCParser.RETAIN, ObjectiveCParser.AUTORELEASING_QUALIFIER, ObjectiveCParser.BLOCK, ObjectiveCParser.BRIDGE_RETAINED, ObjectiveCParser.BRIDGE_TRANSFER, ObjectiveCParser.COVARIANT, ObjectiveCParser.CONTRAVARIANT, ObjectiveCParser.DEPRECATED, ObjectiveCParser.KINDOF, ObjectiveCParser.UNUSED, ObjectiveCParser.NULL_UNSPECIFIED, ObjectiveCParser.NULLABLE, ObjectiveCParser.NONNULL, ObjectiveCParser.NULL_RESETTABLE, ObjectiveCParser.NS_INLINE, ObjectiveCParser.NS_ENUM, ObjectiveCParser.NS_OPTIONS, ObjectiveCParser.ASSIGN, ObjectiveCParser.COPY, ObjectiveCParser.GETTER, ObjectiveCParser.SETTER, ObjectiveCParser.STRONG, ObjectiveCParser.READONLY, ObjectiveCParser.READWRITE, ObjectiveCParser.WEAK, ObjectiveCParser.UNSAFE_UNRETAINED, ObjectiveCParser.IB_OUTLET, ObjectiveCParser.IB_OUTLET_COLLECTION, ObjectiveCParser.IB_INSPECTABLE, ObjectiveCParser.IB_DESIGNABLE, ObjectiveCParser.IDENTIFIER]:
                    self.state = 1117
                    self.identifier()
                    self.state = 1122
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                    if la_ == 1:
                        self.state = 1118
                        self.match(ObjectiveCParser.LBRACE)
                        self.state = 1119
                        self.enumeratorList()
                        self.state = 1120
                        self.match(ObjectiveCParser.RBRACE)


                    pass
                elif token in [ObjectiveCParser.LBRACE]:
                    self.state = 1124
                    self.match(ObjectiveCParser.LBRACE)
                    self.state = 1125
                    self.enumeratorList()
                    self.state = 1126
                    self.match(ObjectiveCParser.RBRACE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [ObjectiveCParser.NS_ENUM, ObjectiveCParser.NS_OPTIONS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1130
                _la = self._input.LA(1)
                if not(_la==ObjectiveCParser.NS_ENUM or _la==ObjectiveCParser.NS_OPTIONS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1131
                self.match(ObjectiveCParser.LP)
                self.state = 1132
                self.typeName()
                self.state = 1133
                self.match(ObjectiveCParser.COMMA)
                self.state = 1134
                self.identifier()
                self.state = 1135
                self.match(ObjectiveCParser.RP)
                self.state = 1136
                self.match(ObjectiveCParser.LBRACE)
                self.state = 1137
                self.enumeratorList()
                self.state = 1138
                self.match(ObjectiveCParser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.EnumeratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)




    def enumeratorList(self):

        localctx = ObjectiveCParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_enumeratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.enumerator()
            self.state = 1147
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1143
                    self.match(ObjectiveCParser.COMMA)
                    self.state = 1144
                    self.enumerator() 
                self.state = 1149
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

            self.state = 1151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.COMMA:
                self.state = 1150
                self.match(ObjectiveCParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeratorIdentifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.EnumeratorIdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(ObjectiveCParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = ObjectiveCParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_enumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.enumeratorIdentifier()
            self.state = 1156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.ASSIGNMENT:
                self.state = 1154
                self.match(ObjectiveCParser.ASSIGNMENT)
                self.state = 1155
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def DEFAULT(self):
            return self.getToken(ObjectiveCParser.DEFAULT, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_enumeratorIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorIdentifier" ):
                listener.enterEnumeratorIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorIdentifier" ):
                listener.exitEnumeratorIdentifier(self)




    def enumeratorIdentifier(self):

        localctx = ObjectiveCParser.EnumeratorIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_enumeratorIdentifier)
        try:
            self.state = 1160
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ObjectiveCParser.BOOL, ObjectiveCParser.Class, ObjectiveCParser.BYCOPY, ObjectiveCParser.BYREF, ObjectiveCParser.ID, ObjectiveCParser.IMP, ObjectiveCParser.IN, ObjectiveCParser.INOUT, ObjectiveCParser.ONEWAY, ObjectiveCParser.OUT, ObjectiveCParser.PROTOCOL_, ObjectiveCParser.SEL, ObjectiveCParser.SELF, ObjectiveCParser.SUPER, ObjectiveCParser.ATOMIC, ObjectiveCParser.NONATOMIC, ObjectiveCParser.RETAIN, ObjectiveCParser.AUTORELEASING_QUALIFIER, ObjectiveCParser.BLOCK, ObjectiveCParser.BRIDGE_RETAINED, ObjectiveCParser.BRIDGE_TRANSFER, ObjectiveCParser.COVARIANT, ObjectiveCParser.CONTRAVARIANT, ObjectiveCParser.DEPRECATED, ObjectiveCParser.KINDOF, ObjectiveCParser.UNUSED, ObjectiveCParser.NULL_UNSPECIFIED, ObjectiveCParser.NULLABLE, ObjectiveCParser.NONNULL, ObjectiveCParser.NULL_RESETTABLE, ObjectiveCParser.NS_INLINE, ObjectiveCParser.NS_ENUM, ObjectiveCParser.NS_OPTIONS, ObjectiveCParser.ASSIGN, ObjectiveCParser.COPY, ObjectiveCParser.GETTER, ObjectiveCParser.SETTER, ObjectiveCParser.STRONG, ObjectiveCParser.READONLY, ObjectiveCParser.READWRITE, ObjectiveCParser.WEAK, ObjectiveCParser.UNSAFE_UNRETAINED, ObjectiveCParser.IB_OUTLET, ObjectiveCParser.IB_OUTLET_COLLECTION, ObjectiveCParser.IB_INSPECTABLE, ObjectiveCParser.IB_DESIGNABLE, ObjectiveCParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1158
                self.identifier()
                pass
            elif token in [ObjectiveCParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1159
                self.match(ObjectiveCParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def declarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclaratorContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def declaratorSuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.DeclaratorSuffixContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.DeclaratorSuffixContext,i)


        def BITXOR(self):
            return self.getToken(ObjectiveCParser.BITXOR, 0)

        def blockParameters(self):
            return self.getTypedRuleContext(ObjectiveCParser.BlockParametersContext,0)


        def nullabilitySpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.NullabilitySpecifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)




    def directDeclarator(self):

        localctx = ObjectiveCParser.DirectDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_directDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 1185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1167
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ObjectiveCParser.BOOL, ObjectiveCParser.Class, ObjectiveCParser.BYCOPY, ObjectiveCParser.BYREF, ObjectiveCParser.ID, ObjectiveCParser.IMP, ObjectiveCParser.IN, ObjectiveCParser.INOUT, ObjectiveCParser.ONEWAY, ObjectiveCParser.OUT, ObjectiveCParser.PROTOCOL_, ObjectiveCParser.SEL, ObjectiveCParser.SELF, ObjectiveCParser.SUPER, ObjectiveCParser.ATOMIC, ObjectiveCParser.NONATOMIC, ObjectiveCParser.RETAIN, ObjectiveCParser.AUTORELEASING_QUALIFIER, ObjectiveCParser.BLOCK, ObjectiveCParser.BRIDGE_RETAINED, ObjectiveCParser.BRIDGE_TRANSFER, ObjectiveCParser.COVARIANT, ObjectiveCParser.CONTRAVARIANT, ObjectiveCParser.DEPRECATED, ObjectiveCParser.KINDOF, ObjectiveCParser.UNUSED, ObjectiveCParser.NULL_UNSPECIFIED, ObjectiveCParser.NULLABLE, ObjectiveCParser.NONNULL, ObjectiveCParser.NULL_RESETTABLE, ObjectiveCParser.NS_INLINE, ObjectiveCParser.NS_ENUM, ObjectiveCParser.NS_OPTIONS, ObjectiveCParser.ASSIGN, ObjectiveCParser.COPY, ObjectiveCParser.GETTER, ObjectiveCParser.SETTER, ObjectiveCParser.STRONG, ObjectiveCParser.READONLY, ObjectiveCParser.READWRITE, ObjectiveCParser.WEAK, ObjectiveCParser.UNSAFE_UNRETAINED, ObjectiveCParser.IB_OUTLET, ObjectiveCParser.IB_OUTLET_COLLECTION, ObjectiveCParser.IB_INSPECTABLE, ObjectiveCParser.IB_DESIGNABLE, ObjectiveCParser.IDENTIFIER]:
                    self.state = 1162
                    self.identifier()
                    pass
                elif token in [ObjectiveCParser.LP]:
                    self.state = 1163
                    self.match(ObjectiveCParser.LP)
                    self.state = 1164
                    self.declarator()
                    self.state = 1165
                    self.match(ObjectiveCParser.RP)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ObjectiveCParser.LBRACK:
                    self.state = 1169
                    self.declaratorSuffix()
                    self.state = 1174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1175
                self.match(ObjectiveCParser.LP)
                self.state = 1176
                self.match(ObjectiveCParser.BITXOR)
                self.state = 1178
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1177
                    self.nullabilitySpecifier()


                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0):
                    self.state = 1180
                    self.identifier()


                self.state = 1183
                self.match(ObjectiveCParser.RP)
                self.state = 1184
                self.blockParameters()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorSuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(ObjectiveCParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(ObjectiveCParser.RBRACK, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_declaratorSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaratorSuffix" ):
                listener.enterDeclaratorSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaratorSuffix" ):
                listener.exitDeclaratorSuffix(self)




    def declaratorSuffix(self):

        localctx = ObjectiveCParser.DeclaratorSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_declaratorSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.match(ObjectiveCParser.LBRACK)
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.TRUE) | (1 << ObjectiveCParser.FALSE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.NIL) | (1 << ObjectiveCParser.NO) | (1 << ObjectiveCParser.NULL) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.YES))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0) or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & ((1 << (ObjectiveCParser.ADD - 153)) | (1 << (ObjectiveCParser.SUB - 153)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 153)) | (1 << (ObjectiveCParser.HEX_LITERAL - 153)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 153)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 153)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 153)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 153)))) != 0):
                self.state = 1188
                self.constantExpression()


            self.state = 1191
            self.match(ObjectiveCParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclarationList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ParameterDeclarationListContext,0)


        def COMMA(self):
            return self.getToken(ObjectiveCParser.COMMA, 0)

        def ELIPSIS(self):
            return self.getToken(ObjectiveCParser.ELIPSIS, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = ObjectiveCParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1193
            self.parameterDeclarationList()
            self.state = 1196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.COMMA:
                self.state = 1194
                self.match(ObjectiveCParser.COMMA)
                self.state = 1195
                self.match(ObjectiveCParser.ELIPSIS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUL(self):
            return self.getToken(ObjectiveCParser.MUL, 0)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclarationSpecifiersContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ObjectiveCParser.PointerContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)




    def pointer(self):

        localctx = ObjectiveCParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_pointer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self.match(ObjectiveCParser.MUL)
            self.state = 1200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1199
                self.declarationSpecifiers()


            self.state = 1203
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1202
                self.pointer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.PrimaryExpressionContext,i)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_macro

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro" ):
                listener.enterMacro(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro" ):
                listener.exitMacro(self)




    def macro(self):

        localctx = ObjectiveCParser.MacroContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_macro)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self.identifier()
            self.state = 1217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.LP:
                self.state = 1206
                self.match(ObjectiveCParser.LP)
                self.state = 1207
                self.primaryExpression()
                self.state = 1212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ObjectiveCParser.COMMA:
                    self.state = 1208
                    self.match(ObjectiveCParser.COMMA)
                    self.state = 1209
                    self.primaryExpression()
                    self.state = 1214
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1215
                self.match(ObjectiveCParser.RP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def expressions(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionsContext,0)


        def COMMA(self):
            return self.getToken(ObjectiveCParser.COMMA, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)




    def arrayInitializer(self):

        localctx = ObjectiveCParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.match(ObjectiveCParser.LBRACE)
            self.state = 1224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.TRUE) | (1 << ObjectiveCParser.FALSE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.NIL) | (1 << ObjectiveCParser.NO) | (1 << ObjectiveCParser.NULL) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.YES) | (1 << ObjectiveCParser.ENCODE))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ObjectiveCParser.PROTOCOL - 70)) | (1 << (ObjectiveCParser.SELECTOR - 70)) | (1 << (ObjectiveCParser.ATOMIC - 70)) | (1 << (ObjectiveCParser.NONATOMIC - 70)) | (1 << (ObjectiveCParser.RETAIN - 70)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 70)) | (1 << (ObjectiveCParser.BLOCK - 70)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 70)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 70)) | (1 << (ObjectiveCParser.COVARIANT - 70)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 70)) | (1 << (ObjectiveCParser.DEPRECATED - 70)) | (1 << (ObjectiveCParser.KINDOF - 70)) | (1 << (ObjectiveCParser.UNUSED - 70)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 70)) | (1 << (ObjectiveCParser.NULLABLE - 70)) | (1 << (ObjectiveCParser.NONNULL - 70)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 70)) | (1 << (ObjectiveCParser.NS_INLINE - 70)) | (1 << (ObjectiveCParser.NS_ENUM - 70)) | (1 << (ObjectiveCParser.NS_OPTIONS - 70)) | (1 << (ObjectiveCParser.ASSIGN - 70)) | (1 << (ObjectiveCParser.COPY - 70)) | (1 << (ObjectiveCParser.GETTER - 70)) | (1 << (ObjectiveCParser.SETTER - 70)) | (1 << (ObjectiveCParser.STRONG - 70)) | (1 << (ObjectiveCParser.READONLY - 70)) | (1 << (ObjectiveCParser.READWRITE - 70)) | (1 << (ObjectiveCParser.WEAK - 70)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 70)) | (1 << (ObjectiveCParser.IB_OUTLET - 70)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 70)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 70)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 70)) | (1 << (ObjectiveCParser.IDENTIFIER - 70)) | (1 << (ObjectiveCParser.LP - 70)) | (1 << (ObjectiveCParser.LBRACK - 70)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (ObjectiveCParser.AT - 137)) | (1 << (ObjectiveCParser.BANG - 137)) | (1 << (ObjectiveCParser.TILDE - 137)) | (1 << (ObjectiveCParser.INC - 137)) | (1 << (ObjectiveCParser.DEC - 137)) | (1 << (ObjectiveCParser.ADD - 137)) | (1 << (ObjectiveCParser.SUB - 137)) | (1 << (ObjectiveCParser.MUL - 137)) | (1 << (ObjectiveCParser.BITAND - 137)) | (1 << (ObjectiveCParser.BITXOR - 137)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 137)) | (1 << (ObjectiveCParser.STRING_START - 137)) | (1 << (ObjectiveCParser.HEX_LITERAL - 137)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 137)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 137)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 137)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 137)))) != 0):
                self.state = 1220
                self.expressions()
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ObjectiveCParser.COMMA:
                    self.state = 1221
                    self.match(ObjectiveCParser.COMMA)




            self.state = 1226
            self.match(ObjectiveCParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.DOT)
            else:
                return self.getToken(ObjectiveCParser.DOT, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_structInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructInitializer" ):
                listener.enterStructInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructInitializer" ):
                listener.exitStructInitializer(self)




    def structInitializer(self):

        localctx = ObjectiveCParser.StructInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_structInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self.match(ObjectiveCParser.LBRACE)
            self.state = 1242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.DOT:
                self.state = 1229
                self.match(ObjectiveCParser.DOT)
                self.state = 1230
                self.expression(0)
                self.state = 1236
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1231
                        self.match(ObjectiveCParser.COMMA)
                        self.state = 1232
                        self.match(ObjectiveCParser.DOT)
                        self.state = 1233
                        self.expression(0) 
                    self.state = 1238
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

                self.state = 1240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ObjectiveCParser.COMMA:
                    self.state = 1239
                    self.match(ObjectiveCParser.COMMA)




            self.state = 1244
            self.match(ObjectiveCParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.InitializerContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.InitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)




    def initializerList(self):

        localctx = ObjectiveCParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1246
            self.initializer()
            self.state = 1251
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1247
                    self.match(ObjectiveCParser.COMMA)
                    self.state = 1248
                    self.initializer() 
                self.state = 1253
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

            self.state = 1255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.COMMA:
                self.state = 1254
                self.match(ObjectiveCParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ObjectiveCParser.SpecifierQualifierListContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.AbstractDeclaratorContext,0)


        def blockType(self):
            return self.getTypedRuleContext(ObjectiveCParser.BlockTypeContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = ObjectiveCParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.state = 1262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1257
                self.specifierQualifierList()
                self.state = 1259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (ObjectiveCParser.LP - 127)) | (1 << (ObjectiveCParser.LBRACK - 127)) | (1 << (ObjectiveCParser.MUL - 127)))) != 0):
                    self.state = 1258
                    self.abstractDeclarator()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1261
                self.blockType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(ObjectiveCParser.PointerContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.AbstractDeclaratorContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def abstractDeclaratorSuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.AbstractDeclaratorSuffixContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.AbstractDeclaratorSuffixContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.LBRACK)
            else:
                return self.getToken(ObjectiveCParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.RBRACK)
            else:
                return self.getToken(ObjectiveCParser.RBRACK, i)

        def constantExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ConstantExpressionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ConstantExpressionContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)




    def abstractDeclarator(self):

        localctx = ObjectiveCParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 1287
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ObjectiveCParser.MUL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1264
                self.pointer()
                self.state = 1266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (ObjectiveCParser.LP - 127)) | (1 << (ObjectiveCParser.LBRACK - 127)) | (1 << (ObjectiveCParser.MUL - 127)))) != 0):
                    self.state = 1265
                    self.abstractDeclarator()


                pass
            elif token in [ObjectiveCParser.LP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1268
                self.match(ObjectiveCParser.LP)
                self.state = 1270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (ObjectiveCParser.LP - 127)) | (1 << (ObjectiveCParser.LBRACK - 127)) | (1 << (ObjectiveCParser.MUL - 127)))) != 0):
                    self.state = 1269
                    self.abstractDeclarator()


                self.state = 1272
                self.match(ObjectiveCParser.RP)
                self.state = 1274 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1273
                    self.abstractDeclaratorSuffix()
                    self.state = 1276 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==ObjectiveCParser.LP or _la==ObjectiveCParser.LBRACK):
                        break

                pass
            elif token in [ObjectiveCParser.LBRACK]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1283 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1278
                    self.match(ObjectiveCParser.LBRACK)
                    self.state = 1280
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.TRUE) | (1 << ObjectiveCParser.FALSE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.NIL) | (1 << ObjectiveCParser.NO) | (1 << ObjectiveCParser.NULL) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.YES))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0) or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & ((1 << (ObjectiveCParser.ADD - 153)) | (1 << (ObjectiveCParser.SUB - 153)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 153)) | (1 << (ObjectiveCParser.HEX_LITERAL - 153)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 153)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 153)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 153)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 153)))) != 0):
                        self.state = 1279
                        self.constantExpression()


                    self.state = 1282
                    self.match(ObjectiveCParser.RBRACK)
                    self.state = 1285 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==ObjectiveCParser.LBRACK):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorSuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(ObjectiveCParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(ObjectiveCParser.RBRACK, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ConstantExpressionContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def parameterDeclarationList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ParameterDeclarationListContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_abstractDeclaratorSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclaratorSuffix" ):
                listener.enterAbstractDeclaratorSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclaratorSuffix" ):
                listener.exitAbstractDeclaratorSuffix(self)




    def abstractDeclaratorSuffix(self):

        localctx = ObjectiveCParser.AbstractDeclaratorSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_abstractDeclaratorSuffix)
        self._la = 0 # Token type
        try:
            self.state = 1299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ObjectiveCParser.LBRACK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1289
                self.match(ObjectiveCParser.LBRACK)
                self.state = 1291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.TRUE) | (1 << ObjectiveCParser.FALSE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.NIL) | (1 << ObjectiveCParser.NO) | (1 << ObjectiveCParser.NULL) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.YES))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0) or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & ((1 << (ObjectiveCParser.ADD - 153)) | (1 << (ObjectiveCParser.SUB - 153)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 153)) | (1 << (ObjectiveCParser.HEX_LITERAL - 153)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 153)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 153)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 153)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 153)))) != 0):
                    self.state = 1290
                    self.constantExpression()


                self.state = 1293
                self.match(ObjectiveCParser.RBRACK)
                pass
            elif token in [ObjectiveCParser.LP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1294
                self.match(ObjectiveCParser.LP)
                self.state = 1296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED) | (1 << ObjectiveCParser.VOID) | (1 << ObjectiveCParser.VOLATILE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.ATTRIBUTE - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 82)) | (1 << (ObjectiveCParser.TYPEOF - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0):
                    self.state = 1295
                    self.parameterDeclarationList()


                self.state = 1298
                self.match(ObjectiveCParser.RP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ParameterDeclarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_parameterDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclarationList" ):
                listener.enterParameterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclarationList" ):
                listener.exitParameterDeclarationList(self)




    def parameterDeclarationList(self):

        localctx = ObjectiveCParser.ParameterDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_parameterDeclarationList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self.parameterDeclaration()
            self.state = 1306
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1302
                    self.match(ObjectiveCParser.COMMA)
                    self.state = 1303
                    self.parameterDeclaration() 
                self.state = 1308
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclarationSpecifiersContext,0)


        def declarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclaratorContext,0)


        def VOID(self):
            return self.getToken(ObjectiveCParser.VOID, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)




    def parameterDeclaration(self):

        localctx = ObjectiveCParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_parameterDeclaration)
        try:
            self.state = 1313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1309
                self.declarationSpecifiers()
                self.state = 1310
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1312
                self.match(ObjectiveCParser.VOID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ObjectiveCParser.PointerContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = ObjectiveCParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.MUL:
                self.state = 1315
                self.pointer()


            self.state = 1318
            self.directDeclarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.LabeledStatementContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.JumpStatementContext,0)


        def synchronizedStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.SynchronizedStatementContext,0)


        def autoreleaseStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.AutoreleaseStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.ThrowStatementContext,0)


        def tryBlock(self):
            return self.getTypedRuleContext(ObjectiveCParser.TryBlockContext,0)


        def expressions(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = ObjectiveCParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_statement)
        try:
            self.state = 1361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1320
                self.labeledStatement()
                self.state = 1322
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1321
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1324
                self.compoundStatement()
                self.state = 1326
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1325
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1328
                self.selectionStatement()
                self.state = 1330
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1329
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1332
                self.iterationStatement()
                self.state = 1334
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                if la_ == 1:
                    self.state = 1333
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1336
                self.jumpStatement()
                self.state = 1338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1337
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1340
                self.synchronizedStatement()
                self.state = 1342
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                if la_ == 1:
                    self.state = 1341
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1344
                self.autoreleaseStatement()
                self.state = 1346
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1345
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1348
                self.throwStatement()
                self.state = 1350
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                if la_ == 1:
                    self.state = 1349
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1352
                self.tryBlock()
                self.state = 1354
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                if la_ == 1:
                    self.state = 1353
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1356
                self.expressions()
                self.state = 1358
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1357
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1360
                self.match(ObjectiveCParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def statement(self):
            return self.getTypedRuleContext(ObjectiveCParser.StatementContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = ObjectiveCParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_labeledStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1363
            self.identifier()
            self.state = 1364
            self.match(ObjectiveCParser.COLON)
            self.state = 1365
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ConstantExpressionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ConstantExpressionContext,i)


        def ELIPSIS(self):
            return self.getToken(ObjectiveCParser.ELIPSIS, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_rangeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeExpression" ):
                listener.enterRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeExpression" ):
                listener.exitRangeExpression(self)




    def rangeExpression(self):

        localctx = ObjectiveCParser.RangeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_rangeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1367
            self.constantExpression()
            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ObjectiveCParser.ELIPSIS:
                self.state = 1368
                self.match(ObjectiveCParser.ELIPSIS)
                self.state = 1369
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.DeclarationContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.StatementContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.StatementContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = ObjectiveCParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self.match(ObjectiveCParser.LBRACE)
            self.state = 1377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.BREAK) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.CONTINUE) | (1 << ObjectiveCParser.DO) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.FOR) | (1 << ObjectiveCParser.GOTO) | (1 << ObjectiveCParser.IF) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.RETURN) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.SWITCH) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED) | (1 << ObjectiveCParser.VOID) | (1 << ObjectiveCParser.VOLATILE) | (1 << ObjectiveCParser.WHILE) | (1 << ObjectiveCParser.TRUE) | (1 << ObjectiveCParser.FALSE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.NIL) | (1 << ObjectiveCParser.NO) | (1 << ObjectiveCParser.NULL) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.YES) | (1 << ObjectiveCParser.AUTORELEASEPOOL) | (1 << ObjectiveCParser.ENCODE))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ObjectiveCParser.PROTOCOL - 70)) | (1 << (ObjectiveCParser.SELECTOR - 70)) | (1 << (ObjectiveCParser.SYNCHRONIZED - 70)) | (1 << (ObjectiveCParser.THROW - 70)) | (1 << (ObjectiveCParser.TRY - 70)) | (1 << (ObjectiveCParser.ATOMIC - 70)) | (1 << (ObjectiveCParser.NONATOMIC - 70)) | (1 << (ObjectiveCParser.RETAIN - 70)) | (1 << (ObjectiveCParser.ATTRIBUTE - 70)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 70)) | (1 << (ObjectiveCParser.BLOCK - 70)) | (1 << (ObjectiveCParser.BRIDGE - 70)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 70)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 70)) | (1 << (ObjectiveCParser.COVARIANT - 70)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 70)) | (1 << (ObjectiveCParser.DEPRECATED - 70)) | (1 << (ObjectiveCParser.KINDOF - 70)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 70)) | (1 << (ObjectiveCParser.TYPEOF - 70)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 70)) | (1 << (ObjectiveCParser.UNUSED - 70)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 70)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 70)) | (1 << (ObjectiveCParser.NULLABLE - 70)) | (1 << (ObjectiveCParser.NONNULL - 70)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 70)) | (1 << (ObjectiveCParser.NS_INLINE - 70)) | (1 << (ObjectiveCParser.NS_ENUM - 70)) | (1 << (ObjectiveCParser.NS_OPTIONS - 70)) | (1 << (ObjectiveCParser.ASSIGN - 70)) | (1 << (ObjectiveCParser.COPY - 70)) | (1 << (ObjectiveCParser.GETTER - 70)) | (1 << (ObjectiveCParser.SETTER - 70)) | (1 << (ObjectiveCParser.STRONG - 70)) | (1 << (ObjectiveCParser.READONLY - 70)) | (1 << (ObjectiveCParser.READWRITE - 70)) | (1 << (ObjectiveCParser.WEAK - 70)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 70)) | (1 << (ObjectiveCParser.IB_OUTLET - 70)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 70)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 70)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 70)) | (1 << (ObjectiveCParser.IDENTIFIER - 70)) | (1 << (ObjectiveCParser.LP - 70)) | (1 << (ObjectiveCParser.LBRACE - 70)) | (1 << (ObjectiveCParser.LBRACK - 70)) | (1 << (ObjectiveCParser.SEMI - 70)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (ObjectiveCParser.AT - 137)) | (1 << (ObjectiveCParser.BANG - 137)) | (1 << (ObjectiveCParser.TILDE - 137)) | (1 << (ObjectiveCParser.INC - 137)) | (1 << (ObjectiveCParser.DEC - 137)) | (1 << (ObjectiveCParser.ADD - 137)) | (1 << (ObjectiveCParser.SUB - 137)) | (1 << (ObjectiveCParser.MUL - 137)) | (1 << (ObjectiveCParser.BITAND - 137)) | (1 << (ObjectiveCParser.BITXOR - 137)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 137)) | (1 << (ObjectiveCParser.STRING_START - 137)) | (1 << (ObjectiveCParser.HEX_LITERAL - 137)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 137)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 137)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 137)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 137)))) != 0):
                self.state = 1375
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1373
                    self.declaration()
                    pass

                elif la_ == 2:
                    self.state = 1374
                    self.statement()
                    pass


                self.state = 1379
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1380
            self.match(ObjectiveCParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ifBody = None # StatementContext
            self.elseBody = None # StatementContext

        def IF(self):
            return self.getToken(ObjectiveCParser.IF, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.StatementContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(ObjectiveCParser.ELSE, 0)

        def switchStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.SwitchStatementContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)




    def selectionStatement(self):

        localctx = ObjectiveCParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_selectionStatement)
        try:
            self.state = 1392
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ObjectiveCParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1382
                self.match(ObjectiveCParser.IF)
                self.state = 1383
                self.match(ObjectiveCParser.LP)
                self.state = 1384
                self.expression(0)
                self.state = 1385
                self.match(ObjectiveCParser.RP)
                self.state = 1386
                localctx.ifBody = self.statement()
                self.state = 1389
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1387
                    self.match(ObjectiveCParser.ELSE)
                    self.state = 1388
                    localctx.elseBody = self.statement()


                pass
            elif token in [ObjectiveCParser.SWITCH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1391
                self.switchStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(ObjectiveCParser.SWITCH, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def switchBlock(self):
            return self.getTypedRuleContext(ObjectiveCParser.SwitchBlockContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)




    def switchStatement(self):

        localctx = ObjectiveCParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_switchStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            self.match(ObjectiveCParser.SWITCH)
            self.state = 1395
            self.match(ObjectiveCParser.LP)
            self.state = 1396
            self.expression(0)
            self.state = 1397
            self.match(ObjectiveCParser.RP)
            self.state = 1398
            self.switchBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def switchSection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.SwitchSectionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.SwitchSectionContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_switchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlock" ):
                listener.enterSwitchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlock" ):
                listener.exitSwitchBlock(self)




    def switchBlock(self):

        localctx = ObjectiveCParser.SwitchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_switchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.match(ObjectiveCParser.LBRACE)
            self.state = 1404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ObjectiveCParser.CASE or _la==ObjectiveCParser.DEFAULT:
                self.state = 1401
                self.switchSection()
                self.state = 1406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1407
            self.match(ObjectiveCParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchSectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.SwitchLabelContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.StatementContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.StatementContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_switchSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchSection" ):
                listener.enterSwitchSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchSection" ):
                listener.exitSwitchSection(self)




    def switchSection(self):

        localctx = ObjectiveCParser.SwitchSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_switchSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1409
                self.switchLabel()
                self.state = 1412 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ObjectiveCParser.CASE or _la==ObjectiveCParser.DEFAULT):
                    break

            self.state = 1415 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1414
                self.statement()
                self.state = 1417 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.BREAK) | (1 << ObjectiveCParser.CONTINUE) | (1 << ObjectiveCParser.DO) | (1 << ObjectiveCParser.FOR) | (1 << ObjectiveCParser.GOTO) | (1 << ObjectiveCParser.IF) | (1 << ObjectiveCParser.RETURN) | (1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.SWITCH) | (1 << ObjectiveCParser.WHILE) | (1 << ObjectiveCParser.TRUE) | (1 << ObjectiveCParser.FALSE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.NIL) | (1 << ObjectiveCParser.NO) | (1 << ObjectiveCParser.NULL) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.YES) | (1 << ObjectiveCParser.AUTORELEASEPOOL) | (1 << ObjectiveCParser.ENCODE))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ObjectiveCParser.PROTOCOL - 70)) | (1 << (ObjectiveCParser.SELECTOR - 70)) | (1 << (ObjectiveCParser.SYNCHRONIZED - 70)) | (1 << (ObjectiveCParser.THROW - 70)) | (1 << (ObjectiveCParser.TRY - 70)) | (1 << (ObjectiveCParser.ATOMIC - 70)) | (1 << (ObjectiveCParser.NONATOMIC - 70)) | (1 << (ObjectiveCParser.RETAIN - 70)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 70)) | (1 << (ObjectiveCParser.BLOCK - 70)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 70)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 70)) | (1 << (ObjectiveCParser.COVARIANT - 70)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 70)) | (1 << (ObjectiveCParser.DEPRECATED - 70)) | (1 << (ObjectiveCParser.KINDOF - 70)) | (1 << (ObjectiveCParser.UNUSED - 70)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 70)) | (1 << (ObjectiveCParser.NULLABLE - 70)) | (1 << (ObjectiveCParser.NONNULL - 70)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 70)) | (1 << (ObjectiveCParser.NS_INLINE - 70)) | (1 << (ObjectiveCParser.NS_ENUM - 70)) | (1 << (ObjectiveCParser.NS_OPTIONS - 70)) | (1 << (ObjectiveCParser.ASSIGN - 70)) | (1 << (ObjectiveCParser.COPY - 70)) | (1 << (ObjectiveCParser.GETTER - 70)) | (1 << (ObjectiveCParser.SETTER - 70)) | (1 << (ObjectiveCParser.STRONG - 70)) | (1 << (ObjectiveCParser.READONLY - 70)) | (1 << (ObjectiveCParser.READWRITE - 70)) | (1 << (ObjectiveCParser.WEAK - 70)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 70)) | (1 << (ObjectiveCParser.IB_OUTLET - 70)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 70)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 70)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 70)) | (1 << (ObjectiveCParser.IDENTIFIER - 70)) | (1 << (ObjectiveCParser.LP - 70)) | (1 << (ObjectiveCParser.LBRACE - 70)) | (1 << (ObjectiveCParser.LBRACK - 70)) | (1 << (ObjectiveCParser.SEMI - 70)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (ObjectiveCParser.AT - 137)) | (1 << (ObjectiveCParser.BANG - 137)) | (1 << (ObjectiveCParser.TILDE - 137)) | (1 << (ObjectiveCParser.INC - 137)) | (1 << (ObjectiveCParser.DEC - 137)) | (1 << (ObjectiveCParser.ADD - 137)) | (1 << (ObjectiveCParser.SUB - 137)) | (1 << (ObjectiveCParser.MUL - 137)) | (1 << (ObjectiveCParser.BITAND - 137)) | (1 << (ObjectiveCParser.BITXOR - 137)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 137)) | (1 << (ObjectiveCParser.STRING_START - 137)) | (1 << (ObjectiveCParser.HEX_LITERAL - 137)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 137)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 137)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 137)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 137)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(ObjectiveCParser.CASE, 0)

        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def rangeExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.RangeExpressionContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def DEFAULT(self):
            return self.getToken(ObjectiveCParser.DEFAULT, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)




    def switchLabel(self):

        localctx = ObjectiveCParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_switchLabel)
        try:
            self.state = 1431
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ObjectiveCParser.CASE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1419
                self.match(ObjectiveCParser.CASE)
                self.state = 1425
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ObjectiveCParser.TRUE, ObjectiveCParser.FALSE, ObjectiveCParser.BOOL, ObjectiveCParser.Class, ObjectiveCParser.BYCOPY, ObjectiveCParser.BYREF, ObjectiveCParser.ID, ObjectiveCParser.IMP, ObjectiveCParser.IN, ObjectiveCParser.INOUT, ObjectiveCParser.NIL, ObjectiveCParser.NO, ObjectiveCParser.NULL, ObjectiveCParser.ONEWAY, ObjectiveCParser.OUT, ObjectiveCParser.PROTOCOL_, ObjectiveCParser.SEL, ObjectiveCParser.SELF, ObjectiveCParser.SUPER, ObjectiveCParser.YES, ObjectiveCParser.ATOMIC, ObjectiveCParser.NONATOMIC, ObjectiveCParser.RETAIN, ObjectiveCParser.AUTORELEASING_QUALIFIER, ObjectiveCParser.BLOCK, ObjectiveCParser.BRIDGE_RETAINED, ObjectiveCParser.BRIDGE_TRANSFER, ObjectiveCParser.COVARIANT, ObjectiveCParser.CONTRAVARIANT, ObjectiveCParser.DEPRECATED, ObjectiveCParser.KINDOF, ObjectiveCParser.UNUSED, ObjectiveCParser.NULL_UNSPECIFIED, ObjectiveCParser.NULLABLE, ObjectiveCParser.NONNULL, ObjectiveCParser.NULL_RESETTABLE, ObjectiveCParser.NS_INLINE, ObjectiveCParser.NS_ENUM, ObjectiveCParser.NS_OPTIONS, ObjectiveCParser.ASSIGN, ObjectiveCParser.COPY, ObjectiveCParser.GETTER, ObjectiveCParser.SETTER, ObjectiveCParser.STRONG, ObjectiveCParser.READONLY, ObjectiveCParser.READWRITE, ObjectiveCParser.WEAK, ObjectiveCParser.UNSAFE_UNRETAINED, ObjectiveCParser.IB_OUTLET, ObjectiveCParser.IB_OUTLET_COLLECTION, ObjectiveCParser.IB_INSPECTABLE, ObjectiveCParser.IB_DESIGNABLE, ObjectiveCParser.IDENTIFIER, ObjectiveCParser.ADD, ObjectiveCParser.SUB, ObjectiveCParser.CHARACTER_LITERAL, ObjectiveCParser.HEX_LITERAL, ObjectiveCParser.OCTAL_LITERAL, ObjectiveCParser.BINARY_LITERAL, ObjectiveCParser.DECIMAL_LITERAL, ObjectiveCParser.FLOATING_POINT_LITERAL]:
                    self.state = 1420
                    self.rangeExpression()
                    pass
                elif token in [ObjectiveCParser.LP]:
                    self.state = 1421
                    self.match(ObjectiveCParser.LP)
                    self.state = 1422
                    self.rangeExpression()
                    self.state = 1423
                    self.match(ObjectiveCParser.RP)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1427
                self.match(ObjectiveCParser.COLON)
                pass
            elif token in [ObjectiveCParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1429
                self.match(ObjectiveCParser.DEFAULT)
                self.state = 1430
                self.match(ObjectiveCParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whileStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.WhileStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.DoStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.ForStatementContext,0)


        def forInStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.ForInStatementContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)




    def iterationStatement(self):

        localctx = ObjectiveCParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_iterationStatement)
        try:
            self.state = 1437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1433
                self.whileStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1434
                self.doStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1435
                self.forStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1436
                self.forInStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(ObjectiveCParser.WHILE, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def statement(self):
            return self.getTypedRuleContext(ObjectiveCParser.StatementContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = ObjectiveCParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self.match(ObjectiveCParser.WHILE)
            self.state = 1440
            self.match(ObjectiveCParser.LP)
            self.state = 1441
            self.expression(0)
            self.state = 1442
            self.match(ObjectiveCParser.RP)
            self.state = 1443
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(ObjectiveCParser.DO, 0)

        def statement(self):
            return self.getTypedRuleContext(ObjectiveCParser.StatementContext,0)


        def WHILE(self):
            return self.getToken(ObjectiveCParser.WHILE, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)




    def doStatement(self):

        localctx = ObjectiveCParser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_doStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.match(ObjectiveCParser.DO)
            self.state = 1446
            self.statement()
            self.state = 1447
            self.match(ObjectiveCParser.WHILE)
            self.state = 1448
            self.match(ObjectiveCParser.LP)
            self.state = 1449
            self.expression(0)
            self.state = 1450
            self.match(ObjectiveCParser.RP)
            self.state = 1451
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(ObjectiveCParser.FOR, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.SEMI)
            else:
                return self.getToken(ObjectiveCParser.SEMI, i)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def statement(self):
            return self.getTypedRuleContext(ObjectiveCParser.StatementContext,0)


        def forLoopInitializer(self):
            return self.getTypedRuleContext(ObjectiveCParser.ForLoopInitializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def expressions(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = ObjectiveCParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            self.match(ObjectiveCParser.FOR)
            self.state = 1454
            self.match(ObjectiveCParser.LP)
            self.state = 1456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED) | (1 << ObjectiveCParser.VOID) | (1 << ObjectiveCParser.VOLATILE) | (1 << ObjectiveCParser.TRUE) | (1 << ObjectiveCParser.FALSE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.NIL) | (1 << ObjectiveCParser.NO) | (1 << ObjectiveCParser.NULL) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.YES) | (1 << ObjectiveCParser.ENCODE))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ObjectiveCParser.PROTOCOL - 70)) | (1 << (ObjectiveCParser.SELECTOR - 70)) | (1 << (ObjectiveCParser.ATOMIC - 70)) | (1 << (ObjectiveCParser.NONATOMIC - 70)) | (1 << (ObjectiveCParser.RETAIN - 70)) | (1 << (ObjectiveCParser.ATTRIBUTE - 70)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 70)) | (1 << (ObjectiveCParser.BLOCK - 70)) | (1 << (ObjectiveCParser.BRIDGE - 70)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 70)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 70)) | (1 << (ObjectiveCParser.COVARIANT - 70)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 70)) | (1 << (ObjectiveCParser.DEPRECATED - 70)) | (1 << (ObjectiveCParser.KINDOF - 70)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 70)) | (1 << (ObjectiveCParser.TYPEOF - 70)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 70)) | (1 << (ObjectiveCParser.UNUSED - 70)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 70)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 70)) | (1 << (ObjectiveCParser.NULLABLE - 70)) | (1 << (ObjectiveCParser.NONNULL - 70)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 70)) | (1 << (ObjectiveCParser.NS_INLINE - 70)) | (1 << (ObjectiveCParser.NS_ENUM - 70)) | (1 << (ObjectiveCParser.NS_OPTIONS - 70)) | (1 << (ObjectiveCParser.ASSIGN - 70)) | (1 << (ObjectiveCParser.COPY - 70)) | (1 << (ObjectiveCParser.GETTER - 70)) | (1 << (ObjectiveCParser.SETTER - 70)) | (1 << (ObjectiveCParser.STRONG - 70)) | (1 << (ObjectiveCParser.READONLY - 70)) | (1 << (ObjectiveCParser.READWRITE - 70)) | (1 << (ObjectiveCParser.WEAK - 70)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 70)) | (1 << (ObjectiveCParser.IB_OUTLET - 70)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 70)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 70)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 70)) | (1 << (ObjectiveCParser.IDENTIFIER - 70)) | (1 << (ObjectiveCParser.LP - 70)) | (1 << (ObjectiveCParser.LBRACK - 70)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (ObjectiveCParser.AT - 137)) | (1 << (ObjectiveCParser.BANG - 137)) | (1 << (ObjectiveCParser.TILDE - 137)) | (1 << (ObjectiveCParser.INC - 137)) | (1 << (ObjectiveCParser.DEC - 137)) | (1 << (ObjectiveCParser.ADD - 137)) | (1 << (ObjectiveCParser.SUB - 137)) | (1 << (ObjectiveCParser.MUL - 137)) | (1 << (ObjectiveCParser.BITAND - 137)) | (1 << (ObjectiveCParser.BITXOR - 137)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 137)) | (1 << (ObjectiveCParser.STRING_START - 137)) | (1 << (ObjectiveCParser.HEX_LITERAL - 137)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 137)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 137)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 137)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 137)))) != 0):
                self.state = 1455
                self.forLoopInitializer()


            self.state = 1458
            self.match(ObjectiveCParser.SEMI)
            self.state = 1460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.TRUE) | (1 << ObjectiveCParser.FALSE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.NIL) | (1 << ObjectiveCParser.NO) | (1 << ObjectiveCParser.NULL) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.YES) | (1 << ObjectiveCParser.ENCODE))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ObjectiveCParser.PROTOCOL - 70)) | (1 << (ObjectiveCParser.SELECTOR - 70)) | (1 << (ObjectiveCParser.ATOMIC - 70)) | (1 << (ObjectiveCParser.NONATOMIC - 70)) | (1 << (ObjectiveCParser.RETAIN - 70)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 70)) | (1 << (ObjectiveCParser.BLOCK - 70)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 70)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 70)) | (1 << (ObjectiveCParser.COVARIANT - 70)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 70)) | (1 << (ObjectiveCParser.DEPRECATED - 70)) | (1 << (ObjectiveCParser.KINDOF - 70)) | (1 << (ObjectiveCParser.UNUSED - 70)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 70)) | (1 << (ObjectiveCParser.NULLABLE - 70)) | (1 << (ObjectiveCParser.NONNULL - 70)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 70)) | (1 << (ObjectiveCParser.NS_INLINE - 70)) | (1 << (ObjectiveCParser.NS_ENUM - 70)) | (1 << (ObjectiveCParser.NS_OPTIONS - 70)) | (1 << (ObjectiveCParser.ASSIGN - 70)) | (1 << (ObjectiveCParser.COPY - 70)) | (1 << (ObjectiveCParser.GETTER - 70)) | (1 << (ObjectiveCParser.SETTER - 70)) | (1 << (ObjectiveCParser.STRONG - 70)) | (1 << (ObjectiveCParser.READONLY - 70)) | (1 << (ObjectiveCParser.READWRITE - 70)) | (1 << (ObjectiveCParser.WEAK - 70)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 70)) | (1 << (ObjectiveCParser.IB_OUTLET - 70)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 70)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 70)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 70)) | (1 << (ObjectiveCParser.IDENTIFIER - 70)) | (1 << (ObjectiveCParser.LP - 70)) | (1 << (ObjectiveCParser.LBRACK - 70)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (ObjectiveCParser.AT - 137)) | (1 << (ObjectiveCParser.BANG - 137)) | (1 << (ObjectiveCParser.TILDE - 137)) | (1 << (ObjectiveCParser.INC - 137)) | (1 << (ObjectiveCParser.DEC - 137)) | (1 << (ObjectiveCParser.ADD - 137)) | (1 << (ObjectiveCParser.SUB - 137)) | (1 << (ObjectiveCParser.MUL - 137)) | (1 << (ObjectiveCParser.BITAND - 137)) | (1 << (ObjectiveCParser.BITXOR - 137)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 137)) | (1 << (ObjectiveCParser.STRING_START - 137)) | (1 << (ObjectiveCParser.HEX_LITERAL - 137)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 137)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 137)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 137)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 137)))) != 0):
                self.state = 1459
                self.expression(0)


            self.state = 1462
            self.match(ObjectiveCParser.SEMI)
            self.state = 1464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.TRUE) | (1 << ObjectiveCParser.FALSE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.NIL) | (1 << ObjectiveCParser.NO) | (1 << ObjectiveCParser.NULL) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.YES) | (1 << ObjectiveCParser.ENCODE))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ObjectiveCParser.PROTOCOL - 70)) | (1 << (ObjectiveCParser.SELECTOR - 70)) | (1 << (ObjectiveCParser.ATOMIC - 70)) | (1 << (ObjectiveCParser.NONATOMIC - 70)) | (1 << (ObjectiveCParser.RETAIN - 70)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 70)) | (1 << (ObjectiveCParser.BLOCK - 70)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 70)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 70)) | (1 << (ObjectiveCParser.COVARIANT - 70)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 70)) | (1 << (ObjectiveCParser.DEPRECATED - 70)) | (1 << (ObjectiveCParser.KINDOF - 70)) | (1 << (ObjectiveCParser.UNUSED - 70)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 70)) | (1 << (ObjectiveCParser.NULLABLE - 70)) | (1 << (ObjectiveCParser.NONNULL - 70)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 70)) | (1 << (ObjectiveCParser.NS_INLINE - 70)) | (1 << (ObjectiveCParser.NS_ENUM - 70)) | (1 << (ObjectiveCParser.NS_OPTIONS - 70)) | (1 << (ObjectiveCParser.ASSIGN - 70)) | (1 << (ObjectiveCParser.COPY - 70)) | (1 << (ObjectiveCParser.GETTER - 70)) | (1 << (ObjectiveCParser.SETTER - 70)) | (1 << (ObjectiveCParser.STRONG - 70)) | (1 << (ObjectiveCParser.READONLY - 70)) | (1 << (ObjectiveCParser.READWRITE - 70)) | (1 << (ObjectiveCParser.WEAK - 70)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 70)) | (1 << (ObjectiveCParser.IB_OUTLET - 70)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 70)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 70)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 70)) | (1 << (ObjectiveCParser.IDENTIFIER - 70)) | (1 << (ObjectiveCParser.LP - 70)) | (1 << (ObjectiveCParser.LBRACK - 70)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (ObjectiveCParser.AT - 137)) | (1 << (ObjectiveCParser.BANG - 137)) | (1 << (ObjectiveCParser.TILDE - 137)) | (1 << (ObjectiveCParser.INC - 137)) | (1 << (ObjectiveCParser.DEC - 137)) | (1 << (ObjectiveCParser.ADD - 137)) | (1 << (ObjectiveCParser.SUB - 137)) | (1 << (ObjectiveCParser.MUL - 137)) | (1 << (ObjectiveCParser.BITAND - 137)) | (1 << (ObjectiveCParser.BITXOR - 137)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 137)) | (1 << (ObjectiveCParser.STRING_START - 137)) | (1 << (ObjectiveCParser.HEX_LITERAL - 137)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 137)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 137)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 137)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 137)))) != 0):
                self.state = 1463
                self.expressions()


            self.state = 1466
            self.match(ObjectiveCParser.RP)
            self.state = 1467
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForLoopInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(ObjectiveCParser.InitDeclaratorListContext,0)


        def expressions(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_forLoopInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoopInitializer" ):
                listener.enterForLoopInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoopInitializer" ):
                listener.exitForLoopInitializer(self)




    def forLoopInitializer(self):

        localctx = ObjectiveCParser.ForLoopInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_forLoopInitializer)
        try:
            self.state = 1473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1469
                self.declarationSpecifiers()
                self.state = 1470
                self.initDeclaratorList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1472
                self.expressions()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(ObjectiveCParser.FOR, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def typeVariableDeclarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeVariableDeclaratorContext,0)


        def IN(self):
            return self.getToken(ObjectiveCParser.IN, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def statement(self):
            return self.getTypedRuleContext(ObjectiveCParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_forInStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInStatement" ):
                listener.enterForInStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInStatement" ):
                listener.exitForInStatement(self)




    def forInStatement(self):

        localctx = ObjectiveCParser.ForInStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_forInStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1475
            self.match(ObjectiveCParser.FOR)
            self.state = 1476
            self.match(ObjectiveCParser.LP)
            self.state = 1477
            self.typeVariableDeclarator()
            self.state = 1478
            self.match(ObjectiveCParser.IN)
            self.state = 1480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.TRUE) | (1 << ObjectiveCParser.FALSE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.NIL) | (1 << ObjectiveCParser.NO) | (1 << ObjectiveCParser.NULL) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.YES) | (1 << ObjectiveCParser.ENCODE))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ObjectiveCParser.PROTOCOL - 70)) | (1 << (ObjectiveCParser.SELECTOR - 70)) | (1 << (ObjectiveCParser.ATOMIC - 70)) | (1 << (ObjectiveCParser.NONATOMIC - 70)) | (1 << (ObjectiveCParser.RETAIN - 70)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 70)) | (1 << (ObjectiveCParser.BLOCK - 70)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 70)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 70)) | (1 << (ObjectiveCParser.COVARIANT - 70)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 70)) | (1 << (ObjectiveCParser.DEPRECATED - 70)) | (1 << (ObjectiveCParser.KINDOF - 70)) | (1 << (ObjectiveCParser.UNUSED - 70)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 70)) | (1 << (ObjectiveCParser.NULLABLE - 70)) | (1 << (ObjectiveCParser.NONNULL - 70)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 70)) | (1 << (ObjectiveCParser.NS_INLINE - 70)) | (1 << (ObjectiveCParser.NS_ENUM - 70)) | (1 << (ObjectiveCParser.NS_OPTIONS - 70)) | (1 << (ObjectiveCParser.ASSIGN - 70)) | (1 << (ObjectiveCParser.COPY - 70)) | (1 << (ObjectiveCParser.GETTER - 70)) | (1 << (ObjectiveCParser.SETTER - 70)) | (1 << (ObjectiveCParser.STRONG - 70)) | (1 << (ObjectiveCParser.READONLY - 70)) | (1 << (ObjectiveCParser.READWRITE - 70)) | (1 << (ObjectiveCParser.WEAK - 70)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 70)) | (1 << (ObjectiveCParser.IB_OUTLET - 70)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 70)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 70)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 70)) | (1 << (ObjectiveCParser.IDENTIFIER - 70)) | (1 << (ObjectiveCParser.LP - 70)) | (1 << (ObjectiveCParser.LBRACK - 70)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (ObjectiveCParser.AT - 137)) | (1 << (ObjectiveCParser.BANG - 137)) | (1 << (ObjectiveCParser.TILDE - 137)) | (1 << (ObjectiveCParser.INC - 137)) | (1 << (ObjectiveCParser.DEC - 137)) | (1 << (ObjectiveCParser.ADD - 137)) | (1 << (ObjectiveCParser.SUB - 137)) | (1 << (ObjectiveCParser.MUL - 137)) | (1 << (ObjectiveCParser.BITAND - 137)) | (1 << (ObjectiveCParser.BITXOR - 137)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 137)) | (1 << (ObjectiveCParser.STRING_START - 137)) | (1 << (ObjectiveCParser.HEX_LITERAL - 137)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 137)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 137)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 137)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 137)))) != 0):
                self.state = 1479
                self.expression(0)


            self.state = 1482
            self.match(ObjectiveCParser.RP)
            self.state = 1483
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(ObjectiveCParser.GOTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def CONTINUE(self):
            return self.getToken(ObjectiveCParser.CONTINUE, 0)

        def BREAK(self):
            return self.getToken(ObjectiveCParser.BREAK, 0)

        def RETURN(self):
            return self.getToken(ObjectiveCParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)




    def jumpStatement(self):

        localctx = ObjectiveCParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_jumpStatement)
        try:
            self.state = 1493
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ObjectiveCParser.GOTO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1485
                self.match(ObjectiveCParser.GOTO)
                self.state = 1486
                self.identifier()
                pass
            elif token in [ObjectiveCParser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1487
                self.match(ObjectiveCParser.CONTINUE)
                pass
            elif token in [ObjectiveCParser.BREAK]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1488
                self.match(ObjectiveCParser.BREAK)
                pass
            elif token in [ObjectiveCParser.RETURN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1489
                self.match(ObjectiveCParser.RETURN)
                self.state = 1491
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1490
                    self.expression(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)




    def expressions(self):

        localctx = ObjectiveCParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_expressions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1495
            self.expression(0)
            self.state = 1500
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1496
                    self.match(ObjectiveCParser.COMMA)
                    self.state = 1497
                    self.expression(0) 
                self.state = 1502
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assignmentExpression = None # ExpressionContext
            self.op = None # Token
            self.trueExpression = None # ExpressionContext
            self.falseExpression = None # ExpressionContext

        def castExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.CastExpressionContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(ObjectiveCParser.AssignmentOperatorContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,i)


        def MUL(self):
            return self.getToken(ObjectiveCParser.MUL, 0)

        def DIV(self):
            return self.getToken(ObjectiveCParser.DIV, 0)

        def MOD(self):
            return self.getToken(ObjectiveCParser.MOD, 0)

        def ADD(self):
            return self.getToken(ObjectiveCParser.ADD, 0)

        def SUB(self):
            return self.getToken(ObjectiveCParser.SUB, 0)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.LT)
            else:
                return self.getToken(ObjectiveCParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.GT)
            else:
                return self.getToken(ObjectiveCParser.GT, i)

        def LE(self):
            return self.getToken(ObjectiveCParser.LE, 0)

        def GE(self):
            return self.getToken(ObjectiveCParser.GE, 0)

        def NOTEQUAL(self):
            return self.getToken(ObjectiveCParser.NOTEQUAL, 0)

        def EQUAL(self):
            return self.getToken(ObjectiveCParser.EQUAL, 0)

        def BITAND(self):
            return self.getToken(ObjectiveCParser.BITAND, 0)

        def BITXOR(self):
            return self.getToken(ObjectiveCParser.BITXOR, 0)

        def BITOR(self):
            return self.getToken(ObjectiveCParser.BITOR, 0)

        def AND(self):
            return self.getToken(ObjectiveCParser.AND, 0)

        def OR(self):
            return self.getToken(ObjectiveCParser.OR, 0)

        def QUESTION(self):
            return self.getToken(ObjectiveCParser.QUESTION, 0)

        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ObjectiveCParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 260
        self.enterRecursionRule(localctx, 260, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 1504
                self.castExpression()
                pass

            elif la_ == 2:
                self.state = 1505
                self.match(ObjectiveCParser.LP)
                self.state = 1506
                self.compoundStatement()
                self.state = 1507
                self.match(ObjectiveCParser.RP)
                pass

            elif la_ == 3:
                self.state = 1509
                self.unaryExpression()
                self.state = 1510
                self.assignmentOperator()
                self.state = 1511
                localctx.assignmentExpression = self.expression(1)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1559
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,200,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1557
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                    if la_ == 1:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1515
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1516
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (ObjectiveCParser.MUL - 155)) | (1 << (ObjectiveCParser.DIV - 155)) | (1 << (ObjectiveCParser.MOD - 155)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1517
                        self.expression(14)
                        pass

                    elif la_ == 2:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1518
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1519
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==ObjectiveCParser.ADD or _la==ObjectiveCParser.SUB):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1520
                        self.expression(13)
                        pass

                    elif la_ == 3:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1521
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1526
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [ObjectiveCParser.LT]:
                            self.state = 1522
                            self.match(ObjectiveCParser.LT)
                            self.state = 1523
                            self.match(ObjectiveCParser.LT)
                            pass
                        elif token in [ObjectiveCParser.GT]:
                            self.state = 1524
                            self.match(ObjectiveCParser.GT)
                            self.state = 1525
                            self.match(ObjectiveCParser.GT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1528
                        self.expression(12)
                        pass

                    elif la_ == 4:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1529
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1530
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (ObjectiveCParser.GT - 139)) | (1 << (ObjectiveCParser.LT - 139)) | (1 << (ObjectiveCParser.LE - 139)) | (1 << (ObjectiveCParser.GE - 139)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1531
                        self.expression(11)
                        pass

                    elif la_ == 5:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1532
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1533
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==ObjectiveCParser.EQUAL or _la==ObjectiveCParser.NOTEQUAL):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1534
                        self.expression(10)
                        pass

                    elif la_ == 6:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1535
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1536
                        localctx.op = self.match(ObjectiveCParser.BITAND)
                        self.state = 1537
                        self.expression(9)
                        pass

                    elif la_ == 7:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1538
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1539
                        localctx.op = self.match(ObjectiveCParser.BITXOR)
                        self.state = 1540
                        self.expression(8)
                        pass

                    elif la_ == 8:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1541
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1542
                        localctx.op = self.match(ObjectiveCParser.BITOR)
                        self.state = 1543
                        self.expression(7)
                        pass

                    elif la_ == 9:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1544
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1545
                        localctx.op = self.match(ObjectiveCParser.AND)
                        self.state = 1546
                        self.expression(6)
                        pass

                    elif la_ == 10:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1547
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1548
                        localctx.op = self.match(ObjectiveCParser.OR)
                        self.state = 1549
                        self.expression(5)
                        pass

                    elif la_ == 11:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1550
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1551
                        self.match(ObjectiveCParser.QUESTION)
                        self.state = 1553
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.TRUE) | (1 << ObjectiveCParser.FALSE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.NIL) | (1 << ObjectiveCParser.NO) | (1 << ObjectiveCParser.NULL) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.YES) | (1 << ObjectiveCParser.ENCODE))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ObjectiveCParser.PROTOCOL - 70)) | (1 << (ObjectiveCParser.SELECTOR - 70)) | (1 << (ObjectiveCParser.ATOMIC - 70)) | (1 << (ObjectiveCParser.NONATOMIC - 70)) | (1 << (ObjectiveCParser.RETAIN - 70)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 70)) | (1 << (ObjectiveCParser.BLOCK - 70)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 70)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 70)) | (1 << (ObjectiveCParser.COVARIANT - 70)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 70)) | (1 << (ObjectiveCParser.DEPRECATED - 70)) | (1 << (ObjectiveCParser.KINDOF - 70)) | (1 << (ObjectiveCParser.UNUSED - 70)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 70)) | (1 << (ObjectiveCParser.NULLABLE - 70)) | (1 << (ObjectiveCParser.NONNULL - 70)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 70)) | (1 << (ObjectiveCParser.NS_INLINE - 70)) | (1 << (ObjectiveCParser.NS_ENUM - 70)) | (1 << (ObjectiveCParser.NS_OPTIONS - 70)) | (1 << (ObjectiveCParser.ASSIGN - 70)) | (1 << (ObjectiveCParser.COPY - 70)) | (1 << (ObjectiveCParser.GETTER - 70)) | (1 << (ObjectiveCParser.SETTER - 70)) | (1 << (ObjectiveCParser.STRONG - 70)) | (1 << (ObjectiveCParser.READONLY - 70)) | (1 << (ObjectiveCParser.READWRITE - 70)) | (1 << (ObjectiveCParser.WEAK - 70)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 70)) | (1 << (ObjectiveCParser.IB_OUTLET - 70)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 70)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 70)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 70)) | (1 << (ObjectiveCParser.IDENTIFIER - 70)) | (1 << (ObjectiveCParser.LP - 70)) | (1 << (ObjectiveCParser.LBRACK - 70)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (ObjectiveCParser.AT - 137)) | (1 << (ObjectiveCParser.BANG - 137)) | (1 << (ObjectiveCParser.TILDE - 137)) | (1 << (ObjectiveCParser.INC - 137)) | (1 << (ObjectiveCParser.DEC - 137)) | (1 << (ObjectiveCParser.ADD - 137)) | (1 << (ObjectiveCParser.SUB - 137)) | (1 << (ObjectiveCParser.MUL - 137)) | (1 << (ObjectiveCParser.BITAND - 137)) | (1 << (ObjectiveCParser.BITXOR - 137)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 137)) | (1 << (ObjectiveCParser.STRING_START - 137)) | (1 << (ObjectiveCParser.HEX_LITERAL - 137)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 137)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 137)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 137)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 137)))) != 0):
                            self.state = 1552
                            localctx.trueExpression = self.expression(0)


                        self.state = 1555
                        self.match(ObjectiveCParser.COLON)
                        self.state = 1556
                        localctx.falseExpression = self.expression(4)
                        pass

             
                self.state = 1561
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,200,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(ObjectiveCParser.ASSIGNMENT, 0)

        def MUL_ASSIGN(self):
            return self.getToken(ObjectiveCParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(ObjectiveCParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(ObjectiveCParser.MOD_ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(ObjectiveCParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(ObjectiveCParser.SUB_ASSIGN, 0)

        def LSHIFT_ASSIGN(self):
            return self.getToken(ObjectiveCParser.LSHIFT_ASSIGN, 0)

        def RSHIFT_ASSIGN(self):
            return self.getToken(ObjectiveCParser.RSHIFT_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(ObjectiveCParser.AND_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(ObjectiveCParser.XOR_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(ObjectiveCParser.OR_ASSIGN, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = ObjectiveCParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1562
            _la = self._input.LA(1)
            if not(((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (ObjectiveCParser.ASSIGNMENT - 138)) | (1 << (ObjectiveCParser.ADD_ASSIGN - 138)) | (1 << (ObjectiveCParser.SUB_ASSIGN - 138)) | (1 << (ObjectiveCParser.MUL_ASSIGN - 138)) | (1 << (ObjectiveCParser.DIV_ASSIGN - 138)) | (1 << (ObjectiveCParser.AND_ASSIGN - 138)) | (1 << (ObjectiveCParser.OR_ASSIGN - 138)) | (1 << (ObjectiveCParser.XOR_ASSIGN - 138)) | (1 << (ObjectiveCParser.MOD_ASSIGN - 138)) | (1 << (ObjectiveCParser.LSHIFT_ASSIGN - 138)) | (1 << (ObjectiveCParser.RSHIFT_ASSIGN - 138)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.UnaryExpressionContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def typeName(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeNameContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def castExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.CastExpressionContext,0)


        def initializer(self):
            return self.getTypedRuleContext(ObjectiveCParser.InitializerContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)




    def castExpression(self):

        localctx = ObjectiveCParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_castExpression)
        try:
            self.state = 1573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1564
                self.unaryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1565
                self.match(ObjectiveCParser.LP)
                self.state = 1566
                self.typeName()
                self.state = 1567
                self.match(ObjectiveCParser.RP)
                self.state = 1571
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1569
                    self.castExpression()
                    pass

                elif la_ == 2:
                    self.state = 1570
                    self.initializer()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def arrayInitializer(self):
            return self.getTypedRuleContext(ObjectiveCParser.ArrayInitializerContext,0)


        def structInitializer(self):
            return self.getTypedRuleContext(ObjectiveCParser.StructInitializerContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = ObjectiveCParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_initializer)
        try:
            self.state = 1578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1575
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1576
                self.arrayInitializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1577
                self.structInitializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def constant(self):
            return self.getTypedRuleContext(ObjectiveCParser.ConstantContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = ObjectiveCParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_constantExpression)
        try:
            self.state = 1582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ObjectiveCParser.BOOL, ObjectiveCParser.Class, ObjectiveCParser.BYCOPY, ObjectiveCParser.BYREF, ObjectiveCParser.ID, ObjectiveCParser.IMP, ObjectiveCParser.IN, ObjectiveCParser.INOUT, ObjectiveCParser.ONEWAY, ObjectiveCParser.OUT, ObjectiveCParser.PROTOCOL_, ObjectiveCParser.SEL, ObjectiveCParser.SELF, ObjectiveCParser.SUPER, ObjectiveCParser.ATOMIC, ObjectiveCParser.NONATOMIC, ObjectiveCParser.RETAIN, ObjectiveCParser.AUTORELEASING_QUALIFIER, ObjectiveCParser.BLOCK, ObjectiveCParser.BRIDGE_RETAINED, ObjectiveCParser.BRIDGE_TRANSFER, ObjectiveCParser.COVARIANT, ObjectiveCParser.CONTRAVARIANT, ObjectiveCParser.DEPRECATED, ObjectiveCParser.KINDOF, ObjectiveCParser.UNUSED, ObjectiveCParser.NULL_UNSPECIFIED, ObjectiveCParser.NULLABLE, ObjectiveCParser.NONNULL, ObjectiveCParser.NULL_RESETTABLE, ObjectiveCParser.NS_INLINE, ObjectiveCParser.NS_ENUM, ObjectiveCParser.NS_OPTIONS, ObjectiveCParser.ASSIGN, ObjectiveCParser.COPY, ObjectiveCParser.GETTER, ObjectiveCParser.SETTER, ObjectiveCParser.STRONG, ObjectiveCParser.READONLY, ObjectiveCParser.READWRITE, ObjectiveCParser.WEAK, ObjectiveCParser.UNSAFE_UNRETAINED, ObjectiveCParser.IB_OUTLET, ObjectiveCParser.IB_OUTLET_COLLECTION, ObjectiveCParser.IB_INSPECTABLE, ObjectiveCParser.IB_DESIGNABLE, ObjectiveCParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1580
                self.identifier()
                pass
            elif token in [ObjectiveCParser.TRUE, ObjectiveCParser.FALSE, ObjectiveCParser.NIL, ObjectiveCParser.NO, ObjectiveCParser.NULL, ObjectiveCParser.YES, ObjectiveCParser.ADD, ObjectiveCParser.SUB, ObjectiveCParser.CHARACTER_LITERAL, ObjectiveCParser.HEX_LITERAL, ObjectiveCParser.OCTAL_LITERAL, ObjectiveCParser.BINARY_LITERAL, ObjectiveCParser.DECIMAL_LITERAL, ObjectiveCParser.FLOATING_POINT_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1581
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def postfixExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.PostfixExpressionContext,0)


        def SIZEOF(self):
            return self.getToken(ObjectiveCParser.SIZEOF, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.UnaryExpressionContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def typeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def INC(self):
            return self.getToken(ObjectiveCParser.INC, 0)

        def DEC(self):
            return self.getToken(ObjectiveCParser.DEC, 0)

        def unaryOperator(self):
            return self.getTypedRuleContext(ObjectiveCParser.UnaryOperatorContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.CastExpressionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = ObjectiveCParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 1598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1584
                self.postfixExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1585
                self.match(ObjectiveCParser.SIZEOF)
                self.state = 1591
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                if la_ == 1:
                    self.state = 1586
                    self.unaryExpression()
                    pass

                elif la_ == 2:
                    self.state = 1587
                    self.match(ObjectiveCParser.LP)
                    self.state = 1588
                    self.typeSpecifier()
                    self.state = 1589
                    self.match(ObjectiveCParser.RP)
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1593
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==ObjectiveCParser.INC or _la==ObjectiveCParser.DEC):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1594
                self.unaryExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1595
                self.unaryOperator()
                self.state = 1596
                self.castExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITAND(self):
            return self.getToken(ObjectiveCParser.BITAND, 0)

        def MUL(self):
            return self.getToken(ObjectiveCParser.MUL, 0)

        def ADD(self):
            return self.getToken(ObjectiveCParser.ADD, 0)

        def SUB(self):
            return self.getToken(ObjectiveCParser.SUB, 0)

        def TILDE(self):
            return self.getToken(ObjectiveCParser.TILDE, 0)

        def BANG(self):
            return self.getToken(ObjectiveCParser.BANG, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = ObjectiveCParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1600
            _la = self._input.LA(1)
            if not(((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & ((1 << (ObjectiveCParser.BANG - 141)) | (1 << (ObjectiveCParser.TILDE - 141)) | (1 << (ObjectiveCParser.ADD - 141)) | (1 << (ObjectiveCParser.SUB - 141)) | (1 << (ObjectiveCParser.MUL - 141)) | (1 << (ObjectiveCParser.BITAND - 141)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.PrimaryExpressionContext,0)


        def postfix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.PostfixContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.PostfixContext,i)


        def postfixExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.PostfixExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(ObjectiveCParser.DOT, 0)

        def STRUCTACCESS(self):
            return self.getToken(ObjectiveCParser.STRUCTACCESS, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)



    def postfixExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ObjectiveCParser.PostfixExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 274
        self.enterRecursionRule(localctx, 274, self.RULE_postfixExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1603
            self.primaryExpression()
            self.state = 1607
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,207,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1604
                    self.postfix() 
                self.state = 1609
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,207,self._ctx)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1621
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,209,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ObjectiveCParser.PostfixExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                    self.state = 1610
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1611
                    _la = self._input.LA(1)
                    if not(_la==ObjectiveCParser.DOT or _la==ObjectiveCParser.STRUCTACCESS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1612
                    self.identifier()
                    self.state = 1616
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1613
                            self.postfix() 
                        self.state = 1618
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
             
                self.state = 1623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,209,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PostfixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._RP = None # Token
            self.macroArguments = list() # of Tokens
            self._tset3124 = None # Token
            self.op = None # Token

        def LBRACK(self):
            return self.getToken(ObjectiveCParser.LBRACK, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(ObjectiveCParser.RBRACK, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.RP)
            else:
                return self.getToken(ObjectiveCParser.RP, i)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ArgumentExpressionListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def INC(self):
            return self.getToken(ObjectiveCParser.INC, 0)

        def DEC(self):
            return self.getToken(ObjectiveCParser.DEC, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_postfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix" ):
                listener.enterPostfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix" ):
                listener.exitPostfix(self)




    def postfix(self):

        localctx = ObjectiveCParser.PostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_postfix)
        self._la = 0 # Token type
        try:
            self.state = 1642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1624
                self.match(ObjectiveCParser.LBRACK)
                self.state = 1625
                self.expression(0)
                self.state = 1626
                self.match(ObjectiveCParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1628
                self.match(ObjectiveCParser.LP)
                self.state = 1630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED) | (1 << ObjectiveCParser.VOID) | (1 << ObjectiveCParser.TRUE) | (1 << ObjectiveCParser.FALSE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.NIL) | (1 << ObjectiveCParser.NO) | (1 << ObjectiveCParser.NULL) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.YES) | (1 << ObjectiveCParser.ENCODE))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ObjectiveCParser.PROTOCOL - 70)) | (1 << (ObjectiveCParser.SELECTOR - 70)) | (1 << (ObjectiveCParser.ATOMIC - 70)) | (1 << (ObjectiveCParser.NONATOMIC - 70)) | (1 << (ObjectiveCParser.RETAIN - 70)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 70)) | (1 << (ObjectiveCParser.BLOCK - 70)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 70)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 70)) | (1 << (ObjectiveCParser.COVARIANT - 70)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 70)) | (1 << (ObjectiveCParser.DEPRECATED - 70)) | (1 << (ObjectiveCParser.KINDOF - 70)) | (1 << (ObjectiveCParser.TYPEOF - 70)) | (1 << (ObjectiveCParser.UNUSED - 70)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 70)) | (1 << (ObjectiveCParser.NULLABLE - 70)) | (1 << (ObjectiveCParser.NONNULL - 70)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 70)) | (1 << (ObjectiveCParser.NS_INLINE - 70)) | (1 << (ObjectiveCParser.NS_ENUM - 70)) | (1 << (ObjectiveCParser.NS_OPTIONS - 70)) | (1 << (ObjectiveCParser.ASSIGN - 70)) | (1 << (ObjectiveCParser.COPY - 70)) | (1 << (ObjectiveCParser.GETTER - 70)) | (1 << (ObjectiveCParser.SETTER - 70)) | (1 << (ObjectiveCParser.STRONG - 70)) | (1 << (ObjectiveCParser.READONLY - 70)) | (1 << (ObjectiveCParser.READWRITE - 70)) | (1 << (ObjectiveCParser.WEAK - 70)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 70)) | (1 << (ObjectiveCParser.IB_OUTLET - 70)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 70)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 70)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 70)) | (1 << (ObjectiveCParser.IDENTIFIER - 70)) | (1 << (ObjectiveCParser.LP - 70)) | (1 << (ObjectiveCParser.LBRACK - 70)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (ObjectiveCParser.AT - 137)) | (1 << (ObjectiveCParser.BANG - 137)) | (1 << (ObjectiveCParser.TILDE - 137)) | (1 << (ObjectiveCParser.INC - 137)) | (1 << (ObjectiveCParser.DEC - 137)) | (1 << (ObjectiveCParser.ADD - 137)) | (1 << (ObjectiveCParser.SUB - 137)) | (1 << (ObjectiveCParser.MUL - 137)) | (1 << (ObjectiveCParser.BITAND - 137)) | (1 << (ObjectiveCParser.BITXOR - 137)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 137)) | (1 << (ObjectiveCParser.STRING_START - 137)) | (1 << (ObjectiveCParser.HEX_LITERAL - 137)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 137)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 137)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 137)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 137)))) != 0):
                    self.state = 1629
                    self.argumentExpressionList()


                self.state = 1632
                self.match(ObjectiveCParser.RP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1633
                self.match(ObjectiveCParser.LP)
                self.state = 1636 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1636
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                    if la_ == 1:
                        self.state = 1634
                        self.match(ObjectiveCParser.COMMA)
                        pass

                    elif la_ == 2:
                        self.state = 1635
                        localctx._tset3124 = self._input.LT(1)
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==ObjectiveCParser.RP:
                            localctx._tset3124 = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        localctx.macroArguments.append(localctx._tset3124)
                        pass


                    self.state = 1638 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.BREAK) | (1 << ObjectiveCParser.CASE) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.CONTINUE) | (1 << ObjectiveCParser.DEFAULT) | (1 << ObjectiveCParser.DO) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ELSE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.FOR) | (1 << ObjectiveCParser.GOTO) | (1 << ObjectiveCParser.IF) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.RETURN) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.SWITCH) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED) | (1 << ObjectiveCParser.VOID) | (1 << ObjectiveCParser.VOLATILE) | (1 << ObjectiveCParser.WHILE) | (1 << ObjectiveCParser.BOOL_) | (1 << ObjectiveCParser.COMPLEX) | (1 << ObjectiveCParser.IMAGINERY) | (1 << ObjectiveCParser.TRUE) | (1 << ObjectiveCParser.FALSE) | (1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.NIL) | (1 << ObjectiveCParser.NO) | (1 << ObjectiveCParser.NULL) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.YES) | (1 << ObjectiveCParser.AUTORELEASEPOOL) | (1 << ObjectiveCParser.CATCH) | (1 << ObjectiveCParser.CLASS) | (1 << ObjectiveCParser.DYNAMIC) | (1 << ObjectiveCParser.ENCODE) | (1 << ObjectiveCParser.END))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ObjectiveCParser.FINALLY - 64)) | (1 << (ObjectiveCParser.IMPLEMENTATION - 64)) | (1 << (ObjectiveCParser.INTERFACE - 64)) | (1 << (ObjectiveCParser.IMPORT - 64)) | (1 << (ObjectiveCParser.INCLUDE - 64)) | (1 << (ObjectiveCParser.PACKAGE - 64)) | (1 << (ObjectiveCParser.PROTOCOL - 64)) | (1 << (ObjectiveCParser.OPTIONAL - 64)) | (1 << (ObjectiveCParser.PRIVATE - 64)) | (1 << (ObjectiveCParser.PROPERTY - 64)) | (1 << (ObjectiveCParser.PROTECTED - 64)) | (1 << (ObjectiveCParser.PUBLIC - 64)) | (1 << (ObjectiveCParser.REQUIRED - 64)) | (1 << (ObjectiveCParser.SELECTOR - 64)) | (1 << (ObjectiveCParser.SYNCHRONIZED - 64)) | (1 << (ObjectiveCParser.SYNTHESIZE - 64)) | (1 << (ObjectiveCParser.THROW - 64)) | (1 << (ObjectiveCParser.TRY - 64)) | (1 << (ObjectiveCParser.ATOMIC - 64)) | (1 << (ObjectiveCParser.NONATOMIC - 64)) | (1 << (ObjectiveCParser.RETAIN - 64)) | (1 << (ObjectiveCParser.ATTRIBUTE - 64)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 64)) | (1 << (ObjectiveCParser.BLOCK - 64)) | (1 << (ObjectiveCParser.BRIDGE - 64)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 64)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 64)) | (1 << (ObjectiveCParser.COVARIANT - 64)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 64)) | (1 << (ObjectiveCParser.DEPRECATED - 64)) | (1 << (ObjectiveCParser.KINDOF - 64)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 64)) | (1 << (ObjectiveCParser.TYPEOF - 64)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 64)) | (1 << (ObjectiveCParser.UNUSED - 64)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 64)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 64)) | (1 << (ObjectiveCParser.NULLABLE - 64)) | (1 << (ObjectiveCParser.NONNULL - 64)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 64)) | (1 << (ObjectiveCParser.NS_INLINE - 64)) | (1 << (ObjectiveCParser.NS_ENUM - 64)) | (1 << (ObjectiveCParser.NS_OPTIONS - 64)) | (1 << (ObjectiveCParser.ASSIGN - 64)) | (1 << (ObjectiveCParser.COPY - 64)) | (1 << (ObjectiveCParser.GETTER - 64)) | (1 << (ObjectiveCParser.SETTER - 64)) | (1 << (ObjectiveCParser.STRONG - 64)) | (1 << (ObjectiveCParser.READONLY - 64)) | (1 << (ObjectiveCParser.READWRITE - 64)) | (1 << (ObjectiveCParser.WEAK - 64)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 64)) | (1 << (ObjectiveCParser.IB_OUTLET - 64)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 64)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 64)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 64)) | (1 << (ObjectiveCParser.NS_ASSUME_NONNULL_BEGIN - 64)) | (1 << (ObjectiveCParser.NS_ASSUME_NONNULL_END - 64)) | (1 << (ObjectiveCParser.EXTERN_SUFFIX - 64)) | (1 << (ObjectiveCParser.IOS_SUFFIX - 64)) | (1 << (ObjectiveCParser.MAC_SUFFIX - 64)) | (1 << (ObjectiveCParser.TVOS_PROHIBITED - 64)) | (1 << (ObjectiveCParser.IDENTIFIER - 64)) | (1 << (ObjectiveCParser.LP - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.LBRACE - 129)) | (1 << (ObjectiveCParser.RBRACE - 129)) | (1 << (ObjectiveCParser.LBRACK - 129)) | (1 << (ObjectiveCParser.RBRACK - 129)) | (1 << (ObjectiveCParser.SEMI - 129)) | (1 << (ObjectiveCParser.COMMA - 129)) | (1 << (ObjectiveCParser.DOT - 129)) | (1 << (ObjectiveCParser.STRUCTACCESS - 129)) | (1 << (ObjectiveCParser.AT - 129)) | (1 << (ObjectiveCParser.ASSIGNMENT - 129)) | (1 << (ObjectiveCParser.GT - 129)) | (1 << (ObjectiveCParser.LT - 129)) | (1 << (ObjectiveCParser.BANG - 129)) | (1 << (ObjectiveCParser.TILDE - 129)) | (1 << (ObjectiveCParser.QUESTION - 129)) | (1 << (ObjectiveCParser.COLON - 129)) | (1 << (ObjectiveCParser.EQUAL - 129)) | (1 << (ObjectiveCParser.LE - 129)) | (1 << (ObjectiveCParser.GE - 129)) | (1 << (ObjectiveCParser.NOTEQUAL - 129)) | (1 << (ObjectiveCParser.AND - 129)) | (1 << (ObjectiveCParser.OR - 129)) | (1 << (ObjectiveCParser.INC - 129)) | (1 << (ObjectiveCParser.DEC - 129)) | (1 << (ObjectiveCParser.ADD - 129)) | (1 << (ObjectiveCParser.SUB - 129)) | (1 << (ObjectiveCParser.MUL - 129)) | (1 << (ObjectiveCParser.DIV - 129)) | (1 << (ObjectiveCParser.BITAND - 129)) | (1 << (ObjectiveCParser.BITOR - 129)) | (1 << (ObjectiveCParser.BITXOR - 129)) | (1 << (ObjectiveCParser.MOD - 129)) | (1 << (ObjectiveCParser.ADD_ASSIGN - 129)) | (1 << (ObjectiveCParser.SUB_ASSIGN - 129)) | (1 << (ObjectiveCParser.MUL_ASSIGN - 129)) | (1 << (ObjectiveCParser.DIV_ASSIGN - 129)) | (1 << (ObjectiveCParser.AND_ASSIGN - 129)) | (1 << (ObjectiveCParser.OR_ASSIGN - 129)) | (1 << (ObjectiveCParser.XOR_ASSIGN - 129)) | (1 << (ObjectiveCParser.MOD_ASSIGN - 129)) | (1 << (ObjectiveCParser.LSHIFT_ASSIGN - 129)) | (1 << (ObjectiveCParser.RSHIFT_ASSIGN - 129)) | (1 << (ObjectiveCParser.ELIPSIS - 129)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 129)) | (1 << (ObjectiveCParser.STRING_START - 129)) | (1 << (ObjectiveCParser.INCLUDE_START - 129)) | (1 << (ObjectiveCParser.HEX_LITERAL - 129)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 129)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 129)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 129)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 129)) | (1 << (ObjectiveCParser.WS - 129)) | (1 << (ObjectiveCParser.MULTI_COMMENT - 129)) | (1 << (ObjectiveCParser.SINGLE_COMMENT - 129)) | (1 << (ObjectiveCParser.BACKSLASH - 129)) | (1 << (ObjectiveCParser.SHARP - 129)) | (1 << (ObjectiveCParser.INCLUDE_END - 129)) | (1 << (ObjectiveCParser.INCLUDE_VALUE - 129)) | (1 << (ObjectiveCParser.STRING_NEWLINE - 129)) | (1 << (ObjectiveCParser.STRING_END - 129)) | (1 << (ObjectiveCParser.STRING_VALUE - 129)) | (1 << (ObjectiveCParser.DIRECTIVE_IMPORT - 129)) | (1 << (ObjectiveCParser.DIRECTIVE_INCLUDE - 129)) | (1 << (ObjectiveCParser.DIRECTIVE_PRAGMA - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (ObjectiveCParser.DIRECTIVE_DEFINE - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_DEFINED - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_IF - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_ELIF - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_ELSE - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_UNDEF - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_IFDEF - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_IFNDEF - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_ENDIF - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_TRUE - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_FALSE - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_ERROR - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_WARNING - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_BANG - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_LP - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_RP - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_EQUAL - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_NOTEQUAL - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_AND - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_OR - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_LT - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_GT - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_LE - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_GE - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_STRING - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_ID - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_DECIMAL_LITERAL - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_FLOAT - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_NEWLINE - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_MULTI_COMMENT - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_SINGLE_COMMENT - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_BACKSLASH_NEWLINE - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_TEXT_NEWLINE - 193)) | (1 << (ObjectiveCParser.DIRECTIVE_TEXT - 193)))) != 0)):
                        break

                self.state = 1640
                self.match(ObjectiveCParser.RP)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1641
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==ObjectiveCParser.INC or _la==ObjectiveCParser.DEC):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ArgumentExpressionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ArgumentExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)




    def argumentExpressionList(self):

        localctx = ObjectiveCParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_argumentExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1644
            self.argumentExpression()
            self.state = 1649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ObjectiveCParser.COMMA:
                self.state = 1645
                self.match(ObjectiveCParser.COMMA)
                self.state = 1646
                self.argumentExpression()
                self.state = 1651
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_argumentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpression" ):
                listener.enterArgumentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpression" ):
                listener.exitArgumentExpression(self)




    def argumentExpression(self):

        localctx = ObjectiveCParser.ArgumentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_argumentExpression)
        try:
            self.state = 1654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1652
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1653
                self.typeSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def constant(self):
            return self.getTypedRuleContext(ObjectiveCParser.ConstantContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(ObjectiveCParser.StringLiteralContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def messageExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.MessageExpressionContext,0)


        def selectorExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.SelectorExpressionContext,0)


        def protocolExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolExpressionContext,0)


        def encodeExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.EncodeExpressionContext,0)


        def dictionaryExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.DictionaryExpressionContext,0)


        def arrayExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ArrayExpressionContext,0)


        def boxExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.BoxExpressionContext,0)


        def blockExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.BlockExpressionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = ObjectiveCParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_primaryExpression)
        try:
            self.state = 1671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1656
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1657
                self.constant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1658
                self.stringLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1659
                self.match(ObjectiveCParser.LP)
                self.state = 1660
                self.expression(0)
                self.state = 1661
                self.match(ObjectiveCParser.RP)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1663
                self.messageExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1664
                self.selectorExpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1665
                self.protocolExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1666
                self.encodeExpression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1667
                self.dictionaryExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1668
                self.arrayExpression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1669
                self.boxExpression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1670
                self.blockExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_LITERAL(self):
            return self.getToken(ObjectiveCParser.HEX_LITERAL, 0)

        def OCTAL_LITERAL(self):
            return self.getToken(ObjectiveCParser.OCTAL_LITERAL, 0)

        def BINARY_LITERAL(self):
            return self.getToken(ObjectiveCParser.BINARY_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(ObjectiveCParser.DECIMAL_LITERAL, 0)

        def ADD(self):
            return self.getToken(ObjectiveCParser.ADD, 0)

        def SUB(self):
            return self.getToken(ObjectiveCParser.SUB, 0)

        def FLOATING_POINT_LITERAL(self):
            return self.getToken(ObjectiveCParser.FLOATING_POINT_LITERAL, 0)

        def CHARACTER_LITERAL(self):
            return self.getToken(ObjectiveCParser.CHARACTER_LITERAL, 0)

        def NIL(self):
            return self.getToken(ObjectiveCParser.NIL, 0)

        def NULL(self):
            return self.getToken(ObjectiveCParser.NULL, 0)

        def YES(self):
            return self.getToken(ObjectiveCParser.YES, 0)

        def NO(self):
            return self.getToken(ObjectiveCParser.NO, 0)

        def TRUE(self):
            return self.getToken(ObjectiveCParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(ObjectiveCParser.FALSE, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = ObjectiveCParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 1691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1673
                self.match(ObjectiveCParser.HEX_LITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1674
                self.match(ObjectiveCParser.OCTAL_LITERAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1675
                self.match(ObjectiveCParser.BINARY_LITERAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ObjectiveCParser.ADD or _la==ObjectiveCParser.SUB:
                    self.state = 1676
                    _la = self._input.LA(1)
                    if not(_la==ObjectiveCParser.ADD or _la==ObjectiveCParser.SUB):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1679
                self.match(ObjectiveCParser.DECIMAL_LITERAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ObjectiveCParser.ADD or _la==ObjectiveCParser.SUB:
                    self.state = 1680
                    _la = self._input.LA(1)
                    if not(_la==ObjectiveCParser.ADD or _la==ObjectiveCParser.SUB):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1683
                self.match(ObjectiveCParser.FLOATING_POINT_LITERAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1684
                self.match(ObjectiveCParser.CHARACTER_LITERAL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1685
                self.match(ObjectiveCParser.NIL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1686
                self.match(ObjectiveCParser.NULL)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1687
                self.match(ObjectiveCParser.YES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1688
                self.match(ObjectiveCParser.NO)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1689
                self.match(ObjectiveCParser.TRUE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1690
                self.match(ObjectiveCParser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_START(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.STRING_START)
            else:
                return self.getToken(ObjectiveCParser.STRING_START, i)

        def STRING_END(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.STRING_END)
            else:
                return self.getToken(ObjectiveCParser.STRING_END, i)

        def STRING_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.STRING_VALUE)
            else:
                return self.getToken(ObjectiveCParser.STRING_VALUE, i)

        def STRING_NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.STRING_NEWLINE)
            else:
                return self.getToken(ObjectiveCParser.STRING_NEWLINE, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = ObjectiveCParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1701 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1693
                    self.match(ObjectiveCParser.STRING_START)
                    self.state = 1697
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ObjectiveCParser.STRING_NEWLINE or _la==ObjectiveCParser.STRING_VALUE:
                        self.state = 1694
                        _la = self._input.LA(1)
                        if not(_la==ObjectiveCParser.STRING_NEWLINE or _la==ObjectiveCParser.STRING_VALUE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1699
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1700
                    self.match(ObjectiveCParser.STRING_END)

                else:
                    raise NoViableAltException(self)
                self.state = 1703 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ObjectiveCParser.IDENTIFIER, 0)

        def BOOL(self):
            return self.getToken(ObjectiveCParser.BOOL, 0)

        def Class(self):
            return self.getToken(ObjectiveCParser.Class, 0)

        def BYCOPY(self):
            return self.getToken(ObjectiveCParser.BYCOPY, 0)

        def BYREF(self):
            return self.getToken(ObjectiveCParser.BYREF, 0)

        def ID(self):
            return self.getToken(ObjectiveCParser.ID, 0)

        def IMP(self):
            return self.getToken(ObjectiveCParser.IMP, 0)

        def IN(self):
            return self.getToken(ObjectiveCParser.IN, 0)

        def INOUT(self):
            return self.getToken(ObjectiveCParser.INOUT, 0)

        def ONEWAY(self):
            return self.getToken(ObjectiveCParser.ONEWAY, 0)

        def OUT(self):
            return self.getToken(ObjectiveCParser.OUT, 0)

        def PROTOCOL_(self):
            return self.getToken(ObjectiveCParser.PROTOCOL_, 0)

        def SEL(self):
            return self.getToken(ObjectiveCParser.SEL, 0)

        def SELF(self):
            return self.getToken(ObjectiveCParser.SELF, 0)

        def SUPER(self):
            return self.getToken(ObjectiveCParser.SUPER, 0)

        def ATOMIC(self):
            return self.getToken(ObjectiveCParser.ATOMIC, 0)

        def NONATOMIC(self):
            return self.getToken(ObjectiveCParser.NONATOMIC, 0)

        def RETAIN(self):
            return self.getToken(ObjectiveCParser.RETAIN, 0)

        def AUTORELEASING_QUALIFIER(self):
            return self.getToken(ObjectiveCParser.AUTORELEASING_QUALIFIER, 0)

        def BLOCK(self):
            return self.getToken(ObjectiveCParser.BLOCK, 0)

        def BRIDGE_RETAINED(self):
            return self.getToken(ObjectiveCParser.BRIDGE_RETAINED, 0)

        def BRIDGE_TRANSFER(self):
            return self.getToken(ObjectiveCParser.BRIDGE_TRANSFER, 0)

        def COVARIANT(self):
            return self.getToken(ObjectiveCParser.COVARIANT, 0)

        def CONTRAVARIANT(self):
            return self.getToken(ObjectiveCParser.CONTRAVARIANT, 0)

        def DEPRECATED(self):
            return self.getToken(ObjectiveCParser.DEPRECATED, 0)

        def KINDOF(self):
            return self.getToken(ObjectiveCParser.KINDOF, 0)

        def UNUSED(self):
            return self.getToken(ObjectiveCParser.UNUSED, 0)

        def NS_INLINE(self):
            return self.getToken(ObjectiveCParser.NS_INLINE, 0)

        def NS_ENUM(self):
            return self.getToken(ObjectiveCParser.NS_ENUM, 0)

        def NS_OPTIONS(self):
            return self.getToken(ObjectiveCParser.NS_OPTIONS, 0)

        def NULL_UNSPECIFIED(self):
            return self.getToken(ObjectiveCParser.NULL_UNSPECIFIED, 0)

        def NULLABLE(self):
            return self.getToken(ObjectiveCParser.NULLABLE, 0)

        def NONNULL(self):
            return self.getToken(ObjectiveCParser.NONNULL, 0)

        def NULL_RESETTABLE(self):
            return self.getToken(ObjectiveCParser.NULL_RESETTABLE, 0)

        def ASSIGN(self):
            return self.getToken(ObjectiveCParser.ASSIGN, 0)

        def COPY(self):
            return self.getToken(ObjectiveCParser.COPY, 0)

        def GETTER(self):
            return self.getToken(ObjectiveCParser.GETTER, 0)

        def SETTER(self):
            return self.getToken(ObjectiveCParser.SETTER, 0)

        def STRONG(self):
            return self.getToken(ObjectiveCParser.STRONG, 0)

        def READONLY(self):
            return self.getToken(ObjectiveCParser.READONLY, 0)

        def READWRITE(self):
            return self.getToken(ObjectiveCParser.READWRITE, 0)

        def WEAK(self):
            return self.getToken(ObjectiveCParser.WEAK, 0)

        def UNSAFE_UNRETAINED(self):
            return self.getToken(ObjectiveCParser.UNSAFE_UNRETAINED, 0)

        def IB_OUTLET(self):
            return self.getToken(ObjectiveCParser.IB_OUTLET, 0)

        def IB_OUTLET_COLLECTION(self):
            return self.getToken(ObjectiveCParser.IB_OUTLET_COLLECTION, 0)

        def IB_INSPECTABLE(self):
            return self.getToken(ObjectiveCParser.IB_INSPECTABLE, 0)

        def IB_DESIGNABLE(self):
            return self.getToken(ObjectiveCParser.IB_DESIGNABLE, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = ObjectiveCParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1705
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ObjectiveCParser.BOOL) | (1 << ObjectiveCParser.Class) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF) | (1 << ObjectiveCParser.ID) | (1 << ObjectiveCParser.IMP) | (1 << ObjectiveCParser.IN) | (1 << ObjectiveCParser.INOUT) | (1 << ObjectiveCParser.ONEWAY) | (1 << ObjectiveCParser.OUT) | (1 << ObjectiveCParser.PROTOCOL_) | (1 << ObjectiveCParser.SEL) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.SUPER))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ObjectiveCParser.ATOMIC - 82)) | (1 << (ObjectiveCParser.NONATOMIC - 82)) | (1 << (ObjectiveCParser.RETAIN - 82)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 82)) | (1 << (ObjectiveCParser.BLOCK - 82)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 82)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 82)) | (1 << (ObjectiveCParser.COVARIANT - 82)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 82)) | (1 << (ObjectiveCParser.DEPRECATED - 82)) | (1 << (ObjectiveCParser.KINDOF - 82)) | (1 << (ObjectiveCParser.UNUSED - 82)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 82)) | (1 << (ObjectiveCParser.NULLABLE - 82)) | (1 << (ObjectiveCParser.NONNULL - 82)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 82)) | (1 << (ObjectiveCParser.NS_INLINE - 82)) | (1 << (ObjectiveCParser.NS_ENUM - 82)) | (1 << (ObjectiveCParser.NS_OPTIONS - 82)) | (1 << (ObjectiveCParser.ASSIGN - 82)) | (1 << (ObjectiveCParser.COPY - 82)) | (1 << (ObjectiveCParser.GETTER - 82)) | (1 << (ObjectiveCParser.SETTER - 82)) | (1 << (ObjectiveCParser.STRONG - 82)) | (1 << (ObjectiveCParser.READONLY - 82)) | (1 << (ObjectiveCParser.READWRITE - 82)) | (1 << (ObjectiveCParser.WEAK - 82)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 82)) | (1 << (ObjectiveCParser.IB_OUTLET - 82)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 82)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 82)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 82)) | (1 << (ObjectiveCParser.IDENTIFIER - 82)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeTextContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE_START(self):
            return self.getToken(ObjectiveCParser.INCLUDE_START, 0)

        def INCLUDE_VALUE(self):
            return self.getToken(ObjectiveCParser.INCLUDE_VALUE, 0)

        def INCLUDE_END(self):
            return self.getToken(ObjectiveCParser.INCLUDE_END, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_includeText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeText" ):
                listener.enterIncludeText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeText" ):
                listener.exitIncludeText(self)




    def includeText(self):

        localctx = ObjectiveCParser.IncludeTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_includeText)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1707
            self.match(ObjectiveCParser.INCLUDE_START)
            self.state = 1708
            self.match(ObjectiveCParser.INCLUDE_VALUE)
            self.state = 1709
            self.match(ObjectiveCParser.INCLUDE_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[130] = self.expression_sempred
        self._predicates[137] = self.postfixExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

    def postfixExpression_sempred(self, localctx:PostfixExpressionContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         




